/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.InlineResponse4xx101;
import io.swagger.client.model.InlineResponse4xx102;
import io.swagger.client.model.InlineResponse4xx103;
import io.swagger.client.model.InlineResponse4xx104;
import io.swagger.client.model.InlineResponse4xx105;
import io.swagger.client.model.InlineResponse4xx106;
import io.swagger.client.model.MultipleRouteDeleteResponse;
import io.swagger.client.model.MultipleRouteModifiedResponse;
import io.swagger.client.model.RouteDeleteManyRequest;
import io.swagger.client.model.RouteDeletedResponse;
import io.swagger.client.model.RouteModifiedResponse;
import io.swagger.client.model.RouteSingleResponse;
import io.swagger.client.model.RouteUpdateManyRequest;
import io.swagger.client.model.RouteUpdateRequest;
import io.swagger.client.model.RoutesCollectionResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for MagicStaticRoutesApi
 */
@Ignore
public class MagicStaticRoutesApiTest {

    private final MagicStaticRoutesApi api = new MagicStaticRoutesApi();

    /**
     * Create Routes
     *
     * Creates a new Magic static route. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicStaticRoutesCreateRoutesTest() throws Exception {
        Object body = null;
        String accountIdentifier = null;
        RoutesCollectionResponse response = api.magicStaticRoutesCreateRoutes(body, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Delete Many Routes
     *
     * Delete multiple Magic static routes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicStaticRoutesDeleteManyRoutesTest() throws Exception {
        RouteDeleteManyRequest body = null;
        String accountIdentifier = null;
        MultipleRouteDeleteResponse response = api.magicStaticRoutesDeleteManyRoutes(body, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Delete Route
     *
     * Disable and remove a specific Magic static route.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicStaticRoutesDeleteRouteTest() throws Exception {
        String routeIdentifier = null;
        String accountIdentifier = null;
        RouteDeletedResponse response = api.magicStaticRoutesDeleteRoute(routeIdentifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * List Routes
     *
     * List all Magic static routes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicStaticRoutesListRoutesTest() throws Exception {
        String accountIdentifier = null;
        RoutesCollectionResponse response = api.magicStaticRoutesListRoutes(accountIdentifier);

        // TODO: test validations
    }
    /**
     * Route Details
     *
     * Get a specific Magic static route.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicStaticRoutesRouteDetailsTest() throws Exception {
        String routeIdentifier = null;
        String accountIdentifier = null;
        RouteSingleResponse response = api.magicStaticRoutesRouteDetails(routeIdentifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Update Many Routes
     *
     * Update multiple Magic static routes. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes. Only fields for a route that need to be changed need be provided.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicStaticRoutesUpdateManyRoutesTest() throws Exception {
        RouteUpdateManyRequest body = null;
        String accountIdentifier = null;
        MultipleRouteModifiedResponse response = api.magicStaticRoutesUpdateManyRoutes(body, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Update Route
     *
     * Update a specific Magic static route. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to run validation only without persisting changes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicStaticRoutesUpdateRouteTest() throws Exception {
        RouteUpdateRequest body = null;
        String routeIdentifier = null;
        String accountIdentifier = null;
        RouteModifiedResponse response = api.magicStaticRoutesUpdateRoute(body, routeIdentifier, accountIdentifier);

        // TODO: test validations
    }
}
