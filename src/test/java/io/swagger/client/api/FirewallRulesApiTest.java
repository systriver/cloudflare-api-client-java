/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.FilterRulesResponseCollection;
import io.swagger.client.model.FilterRulesResponseCollectionDelete;
import io.swagger.client.model.FilterRulesSingleResponse;
import io.swagger.client.model.FilterRulesSingleResponseDelete;
import io.swagger.client.model.FirewallRulesBody;
import io.swagger.client.model.InlineResponse4xx391;
import io.swagger.client.model.InlineResponse4xx392;
import io.swagger.client.model.InlineResponse4xx393;
import io.swagger.client.model.InlineResponse4xx394;
import io.swagger.client.model.RulesIdBody;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for FirewallRulesApi
 */
@Ignore
public class FirewallRulesApiTest {

    private final FirewallRulesApi api = new FirewallRulesApi();

    /**
     * Create firewall rules
     *
     * Create one or more firewall rules.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void firewallRulesCreateFirewallRulesTest() throws Exception {
        Object body = null;
        String zoneIdentifier = null;
        FilterRulesResponseCollection response = api.firewallRulesCreateFirewallRules(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Delete a firewall rule
     *
     * Deletes an existing firewall rule.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void firewallRulesDeleteAFirewallRuleTest() throws Exception {
        RulesIdBody body = null;
        String id = null;
        String zoneIdentifier = null;
        FilterRulesSingleResponseDelete response = api.firewallRulesDeleteAFirewallRule(body, id, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Delete firewall rules
     *
     * Deletes existing firewall rules.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void firewallRulesDeleteFirewallRulesTest() throws Exception {
        FirewallRulesBody body = null;
        String zoneIdentifier = null;
        FilterRulesResponseCollectionDelete response = api.firewallRulesDeleteFirewallRules(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get a firewall rule
     *
     * Fetches the details of a firewall rule.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void firewallRulesGetAFirewallRuleTest() throws Exception {
        String id = null;
        String zoneIdentifier = null;
        FilterRulesSingleResponse response = api.firewallRulesGetAFirewallRule(id, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List firewall rules
     *
     * Fetches firewall rules in a zone. You can filter the results using several optional parameters.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void firewallRulesListFirewallRulesTest() throws Exception {
        String zoneIdentifier = null;
        FilterRulesResponseCollection response = api.firewallRulesListFirewallRules(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update a firewall rule
     *
     * Updates an existing firewall rule.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void firewallRulesUpdateAFirewallRuleTest() throws Exception {
        Object body = null;
        String id = null;
        String zoneIdentifier = null;
        FilterRulesSingleResponse response = api.firewallRulesUpdateAFirewallRule(body, id, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update firewall rules
     *
     * Updates one or more existing firewall rules.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void firewallRulesUpdateFirewallRulesTest() throws Exception {
        Object body = null;
        String zoneIdentifier = null;
        FilterRulesResponseCollection response = api.firewallRulesUpdateFirewallRules(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update priority of a firewall rule
     *
     * Updates the priority of an existing firewall rule.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void firewallRulesUpdatePriorityOfAFirewallRuleTest() throws Exception {
        Object body = null;
        String id = null;
        String zoneIdentifier = null;
        FilterRulesResponseCollection response = api.firewallRulesUpdatePriorityOfAFirewallRule(body, id, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update priority of firewall rules
     *
     * Updates the priority of existing firewall rules.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void firewallRulesUpdatePriorityOfFirewallRulesTest() throws Exception {
        Object body = null;
        String zoneIdentifier = null;
        FilterRulesResponseCollection response = api.firewallRulesUpdatePriorityOfFirewallRules(body, zoneIdentifier);

        // TODO: test validations
    }
}
