/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CloudflareClientAPIApiResponseSingleId;
import io.swagger.client.model.CloudflareClientAPIResponseCollection;
import io.swagger.client.model.CloudflareClientAPISchemasIdentifier;
import io.swagger.client.model.CreatePayload;
import io.swagger.client.model.InlineResponse4xx;
import io.swagger.client.model.InlineResponse4xx333;
import io.swagger.client.model.InlineResponse4xx335;
import io.swagger.client.model.InlineResponse4xx336;
import io.swagger.client.model.InlineResponse4xx43;
import io.swagger.client.model.InlineResponse4xx44;
import io.swagger.client.model.ResponseCreate;
import io.swagger.client.model.ResponseSingle;
import io.swagger.client.model.ResponseSingleSegment;
import io.swagger.client.model.ResponseSingleValue;
import io.swagger.client.model.SchemasToken;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for UserApiTokensApi
 */
@Ignore
public class UserApiTokensApiTest {

    private final UserApiTokensApi api = new UserApiTokensApi();

    /**
     * Create Token
     *
     * Create a new access token.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userApiTokensCreateTokenTest() throws Exception {
        CreatePayload body = null;
        ResponseCreate response = api.userApiTokensCreateToken(body);

        // TODO: test validations
    }
    /**
     * Delete Token
     *
     * Destroy a token.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userApiTokensDeleteTokenTest() throws Exception {
        CloudflareClientAPISchemasIdentifier identifier = null;
        CloudflareClientAPIApiResponseSingleId response = api.userApiTokensDeleteToken(identifier);

        // TODO: test validations
    }
    /**
     * List Tokens
     *
     * List all access tokens you created.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userApiTokensListTokensTest() throws Exception {
        CloudflareClientAPIResponseCollection response = api.userApiTokensListTokens();

        // TODO: test validations
    }
    /**
     * Roll Token
     *
     * Roll the token secret.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userApiTokensRollTokenTest() throws Exception {
        Object body = null;
        CloudflareClientAPISchemasIdentifier identifier = null;
        ResponseSingleValue response = api.userApiTokensRollToken(body, identifier);

        // TODO: test validations
    }
    /**
     * Token Details
     *
     * Get information about a specific token.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userApiTokensTokenDetailsTest() throws Exception {
        CloudflareClientAPISchemasIdentifier identifier = null;
        ResponseSingle response = api.userApiTokensTokenDetails(identifier);

        // TODO: test validations
    }
    /**
     * Update Token
     *
     * Update an existing token.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userApiTokensUpdateTokenTest() throws Exception {
        SchemasToken body = null;
        CloudflareClientAPISchemasIdentifier identifier = null;
        ResponseSingle response = api.userApiTokensUpdateToken(body, identifier);

        // TODO: test validations
    }
    /**
     * Verify Token
     *
     * Test whether a token works.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userApiTokensVerifyTokenTest() throws Exception {
        ResponseSingleSegment response = api.userApiTokensVerifyToken();

        // TODO: test validations
    }
}
