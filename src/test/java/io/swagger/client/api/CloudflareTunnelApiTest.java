/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.AccountIdentifierCfdTunnelBody;
import io.swagger.client.model.CfdTunnelTunnelIdBody;
import io.swagger.client.model.CloudflareTunnelComponentsSchemasEmptyResponse;
import io.swagger.client.model.InlineResponse4xx17;
import io.swagger.client.model.InlineResponse4xx18;
import io.swagger.client.model.InlineResponse4xx20;
import io.swagger.client.model.InlineResponse4xx21;
import io.swagger.client.model.InlineResponse4xx22;
import io.swagger.client.model.SchemasTunnelResponseCollection;
import io.swagger.client.model.SchemasTunnelResponseSingle;
import io.swagger.client.model.TunnelConnectionsResponse;
import io.swagger.client.model.TunnelResponseToken;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for CloudflareTunnelApi
 */
@Ignore
public class CloudflareTunnelApiTest {

    private final CloudflareTunnelApi api = new CloudflareTunnelApi();

    /**
     * Clean up Cloudflare Tunnel connections
     *
     * Removes connections that are in a disconnected or pending reconnect state. We recommend running this command after shutting down a tunnel.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareTunnelCleanUpCloudflareTunnelConnectionsTest() throws Exception {
        Object body = null;
        String tunnelId = null;
        String accountIdentifier = null;
        CloudflareTunnelComponentsSchemasEmptyResponse response = api.cloudflareTunnelCleanUpCloudflareTunnelConnections(body, tunnelId, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Create a Cloudflare Tunnel
     *
     * Creates a new Cloudflare Tunnel in an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareTunnelCreateACloudflareTunnelTest() throws Exception {
        AccountIdentifierCfdTunnelBody body = null;
        String accountIdentifier = null;
        SchemasTunnelResponseSingle response = api.cloudflareTunnelCreateACloudflareTunnel(body, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Delete a Cloudflare Tunnel
     *
     * Deletes a Cloudflare Tunnel from an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareTunnelDeleteACloudflareTunnelTest() throws Exception {
        Object body = null;
        String tunnelId = null;
        String accountIdentifier = null;
        SchemasTunnelResponseSingle response = api.cloudflareTunnelDeleteACloudflareTunnel(body, tunnelId, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Get a Cloudflare Tunnel
     *
     * Fetches a single Cloudflare Tunnel.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareTunnelGetACloudflareTunnelTest() throws Exception {
        String tunnelId = null;
        String accountIdentifier = null;
        SchemasTunnelResponseSingle response = api.cloudflareTunnelGetACloudflareTunnel(tunnelId, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Get a Cloudflare Tunnel token
     *
     * Gets the token used to associate cloudflared with a specific tunnel.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareTunnelGetACloudflareTunnelTokenTest() throws Exception {
        String tunnelId = null;
        String accountIdentifier = null;
        TunnelResponseToken response = api.cloudflareTunnelGetACloudflareTunnelToken(tunnelId, accountIdentifier);

        // TODO: test validations
    }
    /**
     * List Cloudflare Tunnel connections
     *
     * Fetches connection details for a Cloudflare Tunnel.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareTunnelListCloudflareTunnelConnectionsTest() throws Exception {
        String tunnelId = null;
        String accountIdentifier = null;
        TunnelConnectionsResponse response = api.cloudflareTunnelListCloudflareTunnelConnections(tunnelId, accountIdentifier);

        // TODO: test validations
    }
    /**
     * List Cloudflare Tunnels
     *
     * Lists and filters Cloudflare Tunnels in an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareTunnelListCloudflareTunnelsTest() throws Exception {
        String accountIdentifier = null;
        SchemasTunnelResponseCollection response = api.cloudflareTunnelListCloudflareTunnels(accountIdentifier);

        // TODO: test validations
    }
    /**
     * Update a Cloudflare Tunnel
     *
     * Updates an existing Cloudflare Tunnel.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareTunnelUpdateACloudflareTunnelTest() throws Exception {
        CfdTunnelTunnelIdBody body = null;
        String tunnelId = null;
        String accountIdentifier = null;
        SchemasTunnelResponseSingle response = api.cloudflareTunnelUpdateACloudflareTunnel(body, tunnelId, accountIdentifier);

        // TODO: test validations
    }
}
