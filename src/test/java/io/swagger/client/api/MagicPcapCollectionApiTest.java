/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.InlineResponse4xx125;
import io.swagger.client.model.InlineResponse4xx126;
import io.swagger.client.model.InlineResponse4xx127;
import io.swagger.client.model.InlineResponse4xx128;
import io.swagger.client.model.PcapsCollectionResponse;
import io.swagger.client.model.PcapsOwnershipCollection;
import io.swagger.client.model.PcapsOwnershipRequest;
import io.swagger.client.model.PcapsOwnershipSingleResponse;
import io.swagger.client.model.PcapsOwnershipValidateRequest;
import io.swagger.client.model.PcapsRequestPcap;
import io.swagger.client.model.PcapsSingleResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for MagicPcapCollectionApi
 */
@Ignore
public class MagicPcapCollectionApiTest {

    private final MagicPcapCollectionApi api = new MagicPcapCollectionApi();

    /**
     * Add buckets for full packet captures
     *
     * Adds an AWS or GCP bucket to use with full packet captures.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicPcapCollectionAddBucketsForFullPacketCapturesTest() throws Exception {
        PcapsOwnershipRequest body = null;
        String accountIdentifier = null;
        PcapsOwnershipSingleResponse response = api.magicPcapCollectionAddBucketsForFullPacketCaptures(body, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Create PCAP request
     *
     * Create new PCAP request for account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicPcapCollectionCreatePcapRequestTest() throws Exception {
        PcapsRequestPcap body = null;
        String accountIdentifier = null;
        PcapsSingleResponse response = api.magicPcapCollectionCreatePcapRequest(body, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Delete buckets for full packet captures
     *
     * Deletes buckets added to the packet captures API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicPcapCollectionDeleteBucketsForFullPacketCapturesTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        api.magicPcapCollectionDeleteBucketsForFullPacketCaptures(identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Download Simple PCAP
     *
     * Download PCAP information into a file. Response is a binary PCAP file.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicPcapCollectionDownloadSimplePcapTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        api.magicPcapCollectionDownloadSimplePcap(identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Get PCAP request
     *
     * Get information for a PCAP request by id.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicPcapCollectionGetPcapRequestTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        PcapsSingleResponse response = api.magicPcapCollectionGetPcapRequest(identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * List packet capture requests
     *
     * Lists all packet capture requests for an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicPcapCollectionListPacketCaptureRequestsTest() throws Exception {
        String accountIdentifier = null;
        PcapsCollectionResponse response = api.magicPcapCollectionListPacketCaptureRequests(accountIdentifier);

        // TODO: test validations
    }
    /**
     * List PCAPs Bucket Ownership
     *
     * List all buckets configured for use with PCAPs API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicPcapCollectionListPcaPsBucketOwnershipTest() throws Exception {
        String accountIdentifier = null;
        PcapsOwnershipCollection response = api.magicPcapCollectionListPcaPsBucketOwnership(accountIdentifier);

        // TODO: test validations
    }
    /**
     * Validate buckets for full packet captures
     *
     * Validates buckets added to the packet captures API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void magicPcapCollectionValidateBucketsForFullPacketCapturesTest() throws Exception {
        PcapsOwnershipValidateRequest body = null;
        String accountIdentifier = null;
        PcapsOwnershipSingleResponse response = api.magicPcapCollectionValidateBucketsForFullPacketCaptures(body, accountIdentifier);

        // TODO: test validations
    }
}
