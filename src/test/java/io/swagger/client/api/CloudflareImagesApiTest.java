/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.DirectUploadResponseV2;
import io.swagger.client.model.ImagePatchRequest;
import io.swagger.client.model.ImageResponseBlob;
import io.swagger.client.model.ImageResponseCollection;
import io.swagger.client.model.ImageResponseSingle;
import io.swagger.client.model.ImagesStats;
import io.swagger.client.model.InlineResponse4xx45;
import io.swagger.client.model.InlineResponse4xx46;
import io.swagger.client.model.InlineResponse4xx48;
import io.swagger.client.model.InlineResponse4xx51;
import io.swagger.client.model.InlineResponse4xx52;
import io.swagger.client.model.InlineResponse4xx53;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.SchemasDeletedResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for CloudflareImagesApi
 */
@Ignore
public class CloudflareImagesApiTest {

    private final CloudflareImagesApi api = new CloudflareImagesApi();

    /**
     * Base image
     *
     * Fetch base image. For most images this will be the originally uploaded file. For larger images it can be a near-lossless version of the original.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareImagesBaseImageTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        ImageResponseBlob response = api.cloudflareImagesBaseImage(identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Create authenticated direct upload URL V2
     *
     * Direct uploads allow users to upload images without API keys. A common use case are web apps, client-side applications, or mobile devices where users upload content directly to Cloudflare Images. This method creates a draft record for a future image. It returns an upload URL and an image identifier. To verify if the image itself has been uploaded, send an image details request (accounts/:account_identifier/images/v1/:identifier), and check that the &#x60;draft: true&#x60; property is not present.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareImagesCreateAuthenticatedDirectUploadUrlV2Test() throws Exception {
        OffsetDateTime expiry = null;
        String id = null;
        Object metadata = null;
        Boolean requireSignedURLs = null;
        String accountIdentifier = null;
        DirectUploadResponseV2 response = api.cloudflareImagesCreateAuthenticatedDirectUploadUrlV2(expiry, id, metadata, requireSignedURLs, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Delete image
     *
     * Delete an image on Cloudflare Images. On success, all copies of the image are deleted and purged from cache.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareImagesDeleteImageTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        SchemasDeletedResponse response = api.cloudflareImagesDeleteImage(identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Image details
     *
     * Fetch details for a single image.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareImagesImageDetailsTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        ImageResponseSingle response = api.cloudflareImagesImageDetails(identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Images usage statistics
     *
     * Fetch usage statistics details for Cloudflare Images.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareImagesImagesUsageStatisticsTest() throws Exception {
        String accountIdentifier = null;
        ImagesStats response = api.cloudflareImagesImagesUsageStatistics(accountIdentifier);

        // TODO: test validations
    }
    /**
     * List images
     *
     * List up to 100 images with one request. Use the optional parameters below to get a specific range of images.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareImagesListImagesTest() throws Exception {
        String accountIdentifier = null;
        ImageResponseCollection response = api.cloudflareImagesListImages(accountIdentifier);

        // TODO: test validations
    }
    /**
     * Update image
     *
     * Update image access control. On access control change, all copies of the image are purged from cache.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareImagesUpdateImageTest() throws Exception {
        ImagePatchRequest body = null;
        String identifier = null;
        String accountIdentifier = null;
        ImageResponseSingle response = api.cloudflareImagesUpdateImage(body, identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Upload an image via URL
     *
     * Upload an image via URL with up to 10 Megabytes using a single HTTP POST (multipart/form-data) request.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloudflareImagesUploadAnImageViaUrlTest() throws Exception {
        Object metadata = null;
        Boolean requireSignedURLs = null;
        String url = null;
        String accountIdentifier = null;
        ImageResponseSingle response = api.cloudflareImagesUploadAnImageViaUrl(metadata, requireSignedURLs, url, accountIdentifier);

        // TODO: test validations
    }
}
