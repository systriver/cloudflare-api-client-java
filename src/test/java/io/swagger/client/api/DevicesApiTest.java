/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ApiResponseSingle;
import io.swagger.client.model.DefaultDeviceSettingsResponse;
import io.swagger.client.model.DeviceResponse;
import io.swagger.client.model.DeviceSettingsResponse;
import io.swagger.client.model.DeviceSettingsResponseCollection;
import io.swagger.client.model.DevicesComponentsSchemasIdentifier;
import io.swagger.client.model.DevicesPolicyBody;
import io.swagger.client.model.DevicesPolicyBody1;
import io.swagger.client.model.DevicesResponse;
import io.swagger.client.model.FallbackDomain;
import io.swagger.client.model.FallbackDomainResponseCollection;
import io.swagger.client.model.InlineResponse4xx266;
import io.swagger.client.model.InlineResponse4xx269;
import io.swagger.client.model.InlineResponse4xx270;
import io.swagger.client.model.InlineResponse4xx271;
import io.swagger.client.model.InlineResponse4xx272;
import io.swagger.client.model.InlineResponse4xx273;
import io.swagger.client.model.InlineResponse4xx274;
import io.swagger.client.model.InlineResponse4xx282;
import io.swagger.client.model.InlineResponse4xx283;
import io.swagger.client.model.InlineResponse4xx33;
import io.swagger.client.model.OverrideCodesResponse;
import io.swagger.client.model.PolicyUuidBody;
import io.swagger.client.model.SplitTunnel;
import io.swagger.client.model.SplitTunnelInclude;
import io.swagger.client.model.SplitTunnelIncludeResponseCollection;
import io.swagger.client.model.SplitTunnelResponseCollection;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DevicesApi
 */
@Ignore
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Create Device Settings Policy
     *
     * Create a device settings policy to be applied to certain devices matching the criteria.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesCreateDeviceSettingsPolicyTest() throws Exception {
        DevicesPolicyBody body = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        DeviceSettingsResponse response = api.devicesCreateDeviceSettingsPolicy(body, identifier);

        // TODO: test validations
    }
    /**
     * Delete Device Settings Policy
     *
     * Delete a device settings policy. Returns the remaining policies for the account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesDeleteDeviceSettingsPolicyTest() throws Exception {
        String uuid = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        DeviceSettingsResponseCollection response = api.devicesDeleteDeviceSettingsPolicy(uuid, identifier);

        // TODO: test validations
    }
    /**
     * Device Details
     *
     * Fetch a single Device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesDeviceDetailsTest() throws Exception {
        String uuid = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        DeviceResponse response = api.devicesDeviceDetails(uuid, identifier);

        // TODO: test validations
    }
    /**
     * Get Default Device Settings Policy
     *
     * Get the default device settings policy for an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesGetDefaultDeviceSettingsPolicyTest() throws Exception {
        DevicesComponentsSchemasIdentifier identifier = null;
        DefaultDeviceSettingsResponse response = api.devicesGetDefaultDeviceSettingsPolicy(identifier);

        // TODO: test validations
    }
    /**
     * Get Device Settings Policy by ID
     *
     * Get the device settings policy by ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesGetDeviceSettingsPolicyByIdTest() throws Exception {
        String uuid = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        DeviceSettingsResponse response = api.devicesGetDeviceSettingsPolicyById(uuid, identifier);

        // TODO: test validations
    }
    /**
     * Get Local Domain Fallback List
     *
     * Get the list of domains to bypass Gateway for DNS resolution and instead use the specified server.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesGetLocalDomainFallbackListTest() throws Exception {
        DevicesComponentsSchemasIdentifier identifier = null;
        FallbackDomainResponseCollection response = api.devicesGetLocalDomainFallbackList(identifier);

        // TODO: test validations
    }
    /**
     * Get Local Domain Fallback List for a Device Settings Policy
     *
     * Get the list of domains to bypass Gateway for DNS resolution and instead use the specified server.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesGetLocalDomainFallbackListForADeviceSettingsPolicyTest() throws Exception {
        String uuid = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        FallbackDomainResponseCollection response = api.devicesGetLocalDomainFallbackListForADeviceSettingsPolicy(uuid, identifier);

        // TODO: test validations
    }
    /**
     * Get Split Tunnel Exclude List
     *
     * Get the list of routes excluded from the WARP client&#x27;s tunnel.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesGetSplitTunnelExcludeListTest() throws Exception {
        DevicesComponentsSchemasIdentifier identifier = null;
        SplitTunnelResponseCollection response = api.devicesGetSplitTunnelExcludeList(identifier);

        // TODO: test validations
    }
    /**
     * Get Split Tunnel Exclude List for a Device Settings Policy
     *
     * Get the list of routes excluded from the WARP client&#x27;s tunnel for one specific device settings policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesGetSplitTunnelExcludeListForADeviceSettingsPolicyTest() throws Exception {
        String uuid = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        SplitTunnelResponseCollection response = api.devicesGetSplitTunnelExcludeListForADeviceSettingsPolicy(uuid, identifier);

        // TODO: test validations
    }
    /**
     * Get Split Tunnel Include List
     *
     * Get the list of routes included in the WARP client&#x27;s tunnel.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesGetSplitTunnelIncludeListTest() throws Exception {
        DevicesComponentsSchemasIdentifier identifier = null;
        SplitTunnelIncludeResponseCollection response = api.devicesGetSplitTunnelIncludeList(identifier);

        // TODO: test validations
    }
    /**
     * Get Split Tunnel Include List for a Device Settings Policy
     *
     * Get the list of routes included in the WARP client&#x27;s tunnel for one specific device settings policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesGetSplitTunnelIncludeListForADeviceSettingsPolicyTest() throws Exception {
        String uuid = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        SplitTunnelIncludeResponseCollection response = api.devicesGetSplitTunnelIncludeListForADeviceSettingsPolicy(uuid, identifier);

        // TODO: test validations
    }
    /**
     * List Admin Override code for device
     *
     * Fetch one-time use admin override code for a device. This relies on the Admin Override setting being enabled in your device configuration.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesListAdminOverrideCodeForDeviceTest() throws Exception {
        String uuid = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        OverrideCodesResponse response = api.devicesListAdminOverrideCodeForDevice(uuid, identifier);

        // TODO: test validations
    }
    /**
     * List Device Settings Policies
     *
     * Lists the device settings policies for an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesListDeviceSettingsPoliciesTest() throws Exception {
        DevicesComponentsSchemasIdentifier identifier = null;
        DeviceSettingsResponseCollection response = api.devicesListDeviceSettingsPolicies(identifier);

        // TODO: test validations
    }
    /**
     * List Devices
     *
     * List Enrolled Devices.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesListDevicesTest() throws Exception {
        DevicesComponentsSchemasIdentifier identifier = null;
        DevicesResponse response = api.devicesListDevices(identifier);

        // TODO: test validations
    }
    /**
     * Revoke Devices
     *
     * Revoke a list of devices.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesRevokeDevicesTest() throws Exception {
        List<String> body = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        ApiResponseSingle response = api.devicesRevokeDevices(body, identifier);

        // TODO: test validations
    }
    /**
     * Set Local Domain Fallback List
     *
     * Set the list of domains to bypass Gateway for DNS resolution and instead use the specified server.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesSetLocalDomainFallbackListTest() throws Exception {
        List<FallbackDomain> body = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        FallbackDomainResponseCollection response = api.devicesSetLocalDomainFallbackList(body, identifier);

        // TODO: test validations
    }
    /**
     * Set Local Domain Fallback List for a Device Settings Policy
     *
     * Set the list of domains to bypass Gateway for DNS resolution and instead use the specified server.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesSetLocalDomainFallbackListForADeviceSettingsPolicyTest() throws Exception {
        List<FallbackDomain> body = null;
        String uuid = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        FallbackDomainResponseCollection response = api.devicesSetLocalDomainFallbackListForADeviceSettingsPolicy(body, uuid, identifier);

        // TODO: test validations
    }
    /**
     * Set Split Tunnel Exclude List
     *
     * Set the list of routes excluded from the WARP client&#x27;s tunnel.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesSetSplitTunnelExcludeListTest() throws Exception {
        List<SplitTunnel> body = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        SplitTunnelResponseCollection response = api.devicesSetSplitTunnelExcludeList(body, identifier);

        // TODO: test validations
    }
    /**
     * Set Split Tunnel Exclude List for a Device Settings Policy
     *
     * Set the list of routes excluded from the WARP client&#x27;s tunnel for one specific device settings policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesSetSplitTunnelExcludeListForADeviceSettingsPolicyTest() throws Exception {
        List<SplitTunnel> body = null;
        String uuid = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        SplitTunnelResponseCollection response = api.devicesSetSplitTunnelExcludeListForADeviceSettingsPolicy(body, uuid, identifier);

        // TODO: test validations
    }
    /**
     * Set Split Tunnel Include List
     *
     * Set the list of routes included in the WARP client&#x27;s tunnel.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesSetSplitTunnelIncludeListTest() throws Exception {
        List<SplitTunnelInclude> body = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        SplitTunnelIncludeResponseCollection response = api.devicesSetSplitTunnelIncludeList(body, identifier);

        // TODO: test validations
    }
    /**
     * Set Split Tunnel Include List for a Device Settings Policy
     *
     * Set the list of routes included in the WARP client&#x27;s tunnel for one specific device settings policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesSetSplitTunnelIncludeListForADeviceSettingsPolicyTest() throws Exception {
        List<SplitTunnelInclude> body = null;
        String uuid = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        SplitTunnelIncludeResponseCollection response = api.devicesSetSplitTunnelIncludeListForADeviceSettingsPolicy(body, uuid, identifier);

        // TODO: test validations
    }
    /**
     * Unrevoke Devices
     *
     * Unrevoke a list of devices.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesUnrevokeDevicesTest() throws Exception {
        List<String> body = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        ApiResponseSingle response = api.devicesUnrevokeDevices(body, identifier);

        // TODO: test validations
    }
    /**
     * Update Default Device Settings Policy
     *
     * Update the default device settings policy for an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesUpdateDefaultDeviceSettingsPolicyTest() throws Exception {
        DevicesPolicyBody1 body = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        DefaultDeviceSettingsResponse response = api.devicesUpdateDefaultDeviceSettingsPolicy(body, identifier);

        // TODO: test validations
    }
    /**
     * Update Device Settings Policy
     *
     * Update a device settings policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void devicesUpdateDeviceSettingsPolicyTest() throws Exception {
        PolicyUuidBody body = null;
        String uuid = null;
        DevicesComponentsSchemasIdentifier identifier = null;
        DeviceSettingsResponse response = api.devicesUpdateDeviceSettingsPolicy(body, uuid, identifier);

        // TODO: test validations
    }
}
