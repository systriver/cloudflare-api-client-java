/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CreateRule;
import io.swagger.client.model.EventDetailsResponse;
import io.swagger.client.model.EventId;
import io.swagger.client.model.EventIdResponse;
import io.swagger.client.model.EventResponse;
import io.swagger.client.model.EventResponseCollection;
import io.swagger.client.model.InlineResponse4xx492;
import io.swagger.client.model.InlineResponse4xx493;
import io.swagger.client.model.InlineResponse4xx494;
import io.swagger.client.model.InlineResponse4xx495;
import io.swagger.client.model.InlineResponse4xx496;
import io.swagger.client.model.InlineResponse4xx497;
import io.swagger.client.model.InlineResponse4xx498;
import io.swagger.client.model.InlineResponse4xx499;
import io.swagger.client.model.InlineResponse4xx500;
import io.swagger.client.model.InlineResponse4xx501;
import io.swagger.client.model.PatchRule;
import io.swagger.client.model.QueryEvent;
import io.swagger.client.model.QueryPreview;
import io.swagger.client.model.QueryWaitingroom;
import io.swagger.client.model.SchemasPreviewResponse;
import io.swagger.client.model.SchemasRulesResponseCollection;
import io.swagger.client.model.StatusResponse;
import io.swagger.client.model.WaitingRoomId;
import io.swagger.client.model.WaitingRoomIdResponse;
import io.swagger.client.model.WaitingroomComponentsSchemasResponseCollection;
import io.swagger.client.model.WaitingroomComponentsSchemasSingleResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for WaitingRoomApi
 */
@Ignore
public class WaitingRoomApiTest {

    private final WaitingRoomApi api = new WaitingRoomApi();

    /**
     * Create a custom waiting room page preview
     *
     * Creates a waiting room page preview. Upload a custom waiting room page for preview. You will receive a preview URL in the form &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;&#x60;. You can use the following query parameters to change the state of the preview: 1. &#x60;force_queue&#x60;: Boolean indicating if all users will be queued in the waiting room and no one will be let into the origin website (also known as queueAll). 2. &#x60;queue_is_full&#x60;: Boolean indicating if the waiting room&#x27;s queue is currently full and not accepting new users at the moment. 3. &#x60;queueing_method&#x60;: The queueing method currently used by the waiting room.  - **fifo** indicates a FIFO queue.  - **random** indicates a Random queue.  - **passthrough** indicates a Passthrough queue. Keep in mind that the waiting room page will only be displayed if &#x60;force_queue&#x3D;true&#x60; or &#x60;event&#x3D;prequeueing&#x60; â€” for other cases the request will pass through to the origin. For our preview, this will be a fake origin website returning \&quot;Welcome\&quot;.   - **reject** indicates a Reject queue. 4. &#x60;event&#x60;: Used to preview a waiting room event.  - **none** indicates no event is occurring.  - **prequeueing** indicates that an event is prequeueing (between &#x60;prequeue_start_time&#x60; and &#x60;event_start_time&#x60;).  - **started** indicates that an event has started (between &#x60;event_start_time&#x60; and &#x60;event_end_time&#x60;). 5. &#x60;shuffle_at_event_start&#x60;: Boolean indicating if the event will shuffle users in the prequeue when it starts. This can only be set to **true** if an event is active (&#x60;event&#x60; is not **none**).  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?force_queue&#x3D;false&amp;queue_is_full&#x3D;false&amp;queueing_method&#x3D;random&amp;event&#x3D;started&amp;shuffle_at_event_start&#x3D;true&#x60; 6. &#x60;waitTime&#x60;: Non-zero, positive integer indicating the estimated wait time in minutes. The default value is 10 minutes.  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?waitTime&#x3D;50&#x60; to configure the estimated wait time as 50 minutes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomCreateACustomWaitingRoomPagePreviewTest() throws Exception {
        QueryPreview body = null;
        String zoneIdentifier = null;
        SchemasPreviewResponse response = api.waitingRoomCreateACustomWaitingRoomPagePreview(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Create event
     *
     * Only available for the Waiting Room Advanced subscription. Creates an event for a waiting room. An event takes place during a specified period of time, temporarily changing the behavior of a waiting room. While the event is active, some of the properties in the event&#x27;s configuration may either override or inherit from the waiting room&#x27;s configuration. Note that events cannot overlap with each other, so only one event can be active at a time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomCreateEventTest() throws Exception {
        QueryEvent body = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        EventResponse response = api.waitingRoomCreateEvent(body, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Create waiting room
     *
     * Creates a new waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomCreateWaitingRoomTest() throws Exception {
        QueryWaitingroom body = null;
        String zoneIdentifier = null;
        WaitingroomComponentsSchemasSingleResponse response = api.waitingRoomCreateWaitingRoom(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Create Waiting Room Rule
     *
     * Only available for the Waiting Room Advanced subscription. Creates a rule for a waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomCreateWaitingRoomRuleTest() throws Exception {
        CreateRule body = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        SchemasRulesResponseCollection response = api.waitingRoomCreateWaitingRoomRule(body, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Delete event
     *
     * Deletes an event for a waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomDeleteEventTest() throws Exception {
        EventId eventId = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        EventIdResponse response = api.waitingRoomDeleteEvent(eventId, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Delete waiting room
     *
     * Deletes a waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomDeleteWaitingRoomTest() throws Exception {
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        WaitingRoomIdResponse response = api.waitingRoomDeleteWaitingRoom(waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Delete Waiting Room Rule
     *
     * Deletes a rule for a waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomDeleteWaitingRoomRuleTest() throws Exception {
        String ruleId = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        SchemasRulesResponseCollection response = api.waitingRoomDeleteWaitingRoomRule(ruleId, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Event details
     *
     * Fetches a single configured event for a waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomEventDetailsTest() throws Exception {
        EventId eventId = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        EventResponse response = api.waitingRoomEventDetails(eventId, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get waiting room status
     *
     * Fetches the status of a configured waiting room. Response fields include: 1. &#x60;status&#x60;: String indicating the status of the waiting room. The possible status are:  - **not_queueing** indicates that the configured thresholds have not been met and all users are going through to the origin.  - **queueing** indicates that the thresholds have been met and some users are held in the waiting room.  - **event_prequeueing** indicates that an event is active and is currently prequeueing users before it starts. 2. &#x60;event_id&#x60;: String of the current event&#x27;s &#x60;id&#x60; if an event is active, otherwise an empty string. 3. &#x60;estimated_queued_users&#x60;: Integer of the estimated number of users currently waiting in the queue. 4. &#x60;estimated_total_active_users&#x60;: Integer of the estimated number of users currently active on the origin. 5. &#x60;max_estimated_time_minutes&#x60;: Integer of the maximum estimated time currently presented to the users.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomGetWaitingRoomStatusTest() throws Exception {
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        StatusResponse response = api.waitingRoomGetWaitingRoomStatus(waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List events
     *
     * Lists events for a waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomListEventsTest() throws Exception {
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        EventResponseCollection response = api.waitingRoomListEvents(waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List Waiting Room Rules
     *
     * Lists rules for a waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomListWaitingRoomRulesTest() throws Exception {
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        SchemasRulesResponseCollection response = api.waitingRoomListWaitingRoomRules(waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List waiting rooms
     *
     * Lists waiting rooms.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomListWaitingRoomsTest() throws Exception {
        String zoneIdentifier = null;
        WaitingroomComponentsSchemasResponseCollection response = api.waitingRoomListWaitingRooms(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Patch event
     *
     * Patches a configured event for a waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomPatchEventTest() throws Exception {
        QueryEvent body = null;
        EventId eventId = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        EventResponse response = api.waitingRoomPatchEvent(body, eventId, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Patch waiting room
     *
     * Patches a configured waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomPatchWaitingRoomTest() throws Exception {
        QueryWaitingroom body = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        WaitingroomComponentsSchemasSingleResponse response = api.waitingRoomPatchWaitingRoom(body, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Patch Waiting Room Rule
     *
     * Patches a rule for a waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomPatchWaitingRoomRuleTest() throws Exception {
        PatchRule body = null;
        String ruleId = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        SchemasRulesResponseCollection response = api.waitingRoomPatchWaitingRoomRule(body, ruleId, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Preview active event details
     *
     * Previews an event&#x27;s configuration as if it was active. Inherited fields from the waiting room will be displayed with their current values.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomPreviewActiveEventDetailsTest() throws Exception {
        EventId eventId = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        EventDetailsResponse response = api.waitingRoomPreviewActiveEventDetails(eventId, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Replace Waiting Room Rules
     *
     * Only available for the Waiting Room Advanced subscription. Replaces all rules for a waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomReplaceWaitingRoomRulesTest() throws Exception {
        List<CreateRule> body = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        SchemasRulesResponseCollection response = api.waitingRoomReplaceWaitingRoomRules(body, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update event
     *
     * Updates a configured event for a waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomUpdateEventTest() throws Exception {
        QueryEvent body = null;
        EventId eventId = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        EventResponse response = api.waitingRoomUpdateEvent(body, eventId, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update waiting room
     *
     * Updates a configured waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomUpdateWaitingRoomTest() throws Exception {
        QueryWaitingroom body = null;
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        WaitingroomComponentsSchemasSingleResponse response = api.waitingRoomUpdateWaitingRoom(body, waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Waiting room details
     *
     * Fetches a single configured waiting room.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void waitingRoomWaitingRoomDetailsTest() throws Exception {
        WaitingRoomId waitingRoomId = null;
        String zoneIdentifier = null;
        WaitingroomComponentsSchemasSingleResponse response = api.waitingRoomWaitingRoomDetails(waitingRoomId, zoneIdentifier);

        // TODO: test validations
    }
}
