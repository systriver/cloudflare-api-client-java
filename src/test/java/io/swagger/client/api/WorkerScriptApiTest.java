/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.InlineResponse4xx209;
import io.swagger.client.model.InlineResponse4xx210;
import io.swagger.client.model.InlineResponse4xx214;
import io.swagger.client.model.ScriptResponseCollection;
import io.swagger.client.model.UsageModelResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for WorkerScriptApi
 */
@Ignore
public class WorkerScriptApiTest {

    private final WorkerScriptApi api = new WorkerScriptApi();

    /**
     * Delete Worker
     *
     * Delete your worker. This call has no response body on a successful delete.  **Query paramaters**:  1.  &#x60;force&#x60;: boolean;   If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workerScriptDeleteWorkerTest() throws Exception {
        String scriptName = null;
        String accountIdentifier = null;
        api.workerScriptDeleteWorker(scriptName, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Download Worker
     *
     * Fetch raw script content for your worker. Note this is the original script content, not JSON encoded.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workerScriptDownloadWorkerTest() throws Exception {
        String scriptName = null;
        String accountIdentifier = null;
        Object response = api.workerScriptDownloadWorker(scriptName, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Fetch Usage Model
     *
     * Fetches the Usage Model for a given Worker.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workerScriptFetchUsageModelTest() throws Exception {
        String scriptName = null;
        String accountIdentifier = null;
        UsageModelResponse response = api.workerScriptFetchUsageModel(scriptName, accountIdentifier);

        // TODO: test validations
    }
    /**
     * List Workers
     *
     * Fetch a list of uploaded workers.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workerScriptListWorkersTest() throws Exception {
        String accountIdentifier = null;
        ScriptResponseCollection response = api.workerScriptListWorkers(accountIdentifier);

        // TODO: test validations
    }
    /**
     * Update Usage Model
     *
     * Updates the Usage Model for a given Worker. Requires a Workers Paid subscription.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workerScriptUpdateUsageModelTest() throws Exception {
        Object body = null;
        String scriptName = null;
        String accountIdentifier = null;
        UsageModelResponse response = api.workerScriptUpdateUsageModel(body, scriptName, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Upload Worker Module
     *
     * Upload a worker module.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workerScriptUploadWorkerModuleTest() throws Exception {
        String secondFileJs = null;
        String workerJs = null;
        String metadata = null;
        String scriptName = null;
        String accountIdentifier = null;
        Object response = api.workerScriptUploadWorkerModule(secondFileJs, workerJs, metadata, scriptName, accountIdentifier);

        // TODO: test validations
    }
}
