/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.IdentifierPreviewBody;
import io.swagger.client.model.InlineResponse4xx63;
import io.swagger.client.model.InlineResponse4xx64;
import io.swagger.client.model.InlineResponse4xx65;
import io.swagger.client.model.InlineResponse4xx66;
import io.swagger.client.model.InlineResponse4xx67;
import io.swagger.client.model.InlineResponse4xx73;
import io.swagger.client.model.LoadBalancersMonitorsBody;
import io.swagger.client.model.MonitorComponentsSchemasIdResponse;
import io.swagger.client.model.MonitorComponentsSchemasIdentifier;
import io.swagger.client.model.MonitorComponentsSchemasResponseCollection2;
import io.swagger.client.model.MonitorComponentsSchemasSingleResponse2;
import io.swagger.client.model.MonitorsIdentifierBody;
import io.swagger.client.model.MonitorsIdentifierBody1;
import io.swagger.client.model.PreviewResponse;
import io.swagger.client.model.PreviewResultResponse;
import io.swagger.client.model.ReferencesResponse;
import io.swagger.client.model.SchemasPreviewId;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for AccountLoadBalancerMonitorsApi
 */
@Ignore
public class AccountLoadBalancerMonitorsApiTest {

    private final AccountLoadBalancerMonitorsApi api = new AccountLoadBalancerMonitorsApi();

    /**
     * Create Monitor
     *
     * Create a configured monitor.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsCreateMonitorTest() throws Exception {
        LoadBalancersMonitorsBody body = null;
        String accountIdentifier = null;
        MonitorComponentsSchemasSingleResponse2 response = api.accountLoadBalancerMonitorsCreateMonitor(body, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Delete Monitor
     *
     * Delete a configured monitor.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsDeleteMonitorTest() throws Exception {
        MonitorComponentsSchemasIdentifier identifier = null;
        String accountIdentifier = null;
        MonitorComponentsSchemasIdResponse response = api.accountLoadBalancerMonitorsDeleteMonitor(identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * List Monitor References
     *
     * Get the list of resources that reference the provided monitor.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsListMonitorReferencesTest() throws Exception {
        MonitorComponentsSchemasIdentifier identifier = null;
        String accountIdentifier = null;
        ReferencesResponse response = api.accountLoadBalancerMonitorsListMonitorReferences(identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * List Monitors
     *
     * List configured monitors for an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsListMonitorsTest() throws Exception {
        String accountIdentifier = null;
        MonitorComponentsSchemasResponseCollection2 response = api.accountLoadBalancerMonitorsListMonitors(accountIdentifier);

        // TODO: test validations
    }
    /**
     * Monitor Details
     *
     * List a single configured monitor for an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsMonitorDetailsTest() throws Exception {
        MonitorComponentsSchemasIdentifier identifier = null;
        String accountIdentifier = null;
        MonitorComponentsSchemasSingleResponse2 response = api.accountLoadBalancerMonitorsMonitorDetails(identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Patch Monitor
     *
     * Apply changes to an existing monitor, overwriting the supplied properties.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsPatchMonitorTest() throws Exception {
        MonitorsIdentifierBody1 body = null;
        MonitorComponentsSchemasIdentifier identifier = null;
        String accountIdentifier = null;
        MonitorComponentsSchemasSingleResponse2 response = api.accountLoadBalancerMonitorsPatchMonitor(body, identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Preview Monitor
     *
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsPreviewMonitorTest() throws Exception {
        IdentifierPreviewBody body = null;
        MonitorComponentsSchemasIdentifier identifier = null;
        String accountIdentifier = null;
        PreviewResponse response = api.accountLoadBalancerMonitorsPreviewMonitor(body, identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Preview Result
     *
     * Get the result of a previous preview operation using the provided preview_id.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsPreviewResultTest() throws Exception {
        SchemasPreviewId previewId = null;
        String accountIdentifier = null;
        PreviewResultResponse response = api.accountLoadBalancerMonitorsPreviewResult(previewId, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Update Monitor
     *
     * Modify a configured monitor.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsUpdateMonitorTest() throws Exception {
        MonitorsIdentifierBody body = null;
        MonitorComponentsSchemasIdentifier identifier = null;
        String accountIdentifier = null;
        MonitorComponentsSchemasSingleResponse2 response = api.accountLoadBalancerMonitorsUpdateMonitor(body, identifier, accountIdentifier);

        // TODO: test validations
    }
}
