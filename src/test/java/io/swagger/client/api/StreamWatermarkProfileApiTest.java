/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import java.math.BigDecimal;
import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse4xx172;
import io.swagger.client.model.InlineResponse4xx173;
import io.swagger.client.model.InlineResponse4xx174;
import io.swagger.client.model.WatermarkResponseCollection;
import io.swagger.client.model.WatermarkResponseSingle;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for StreamWatermarkProfileApi
 */
@Ignore
public class StreamWatermarkProfileApiTest {

    private final StreamWatermarkProfileApi api = new StreamWatermarkProfileApi();

    /**
     * Create watermark profiles via basic upload
     *
     * Creates watermark profiles using a single &#x60;HTTP POST multipart/form-data&#x60; request.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadTest() throws Exception {
        String file = null;
        String name = null;
        BigDecimal opacity = null;
        BigDecimal padding = null;
        String position = null;
        BigDecimal scale = null;
        String accountIdentifier = null;
        WatermarkResponseSingle response = api.streamWatermarkProfileCreateWatermarkProfilesViaBasicUpload(file, name, opacity, padding, position, scale, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Delete watermark profiles
     *
     * Deletes a watermark profile.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void streamWatermarkProfileDeleteWatermarkProfilesTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        InlineResponse20012 response = api.streamWatermarkProfileDeleteWatermarkProfiles(identifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * List watermark profiles
     *
     * Lists all watermark profiles for an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void streamWatermarkProfileListWatermarkProfilesTest() throws Exception {
        String accountIdentifier = null;
        WatermarkResponseCollection response = api.streamWatermarkProfileListWatermarkProfiles(accountIdentifier);

        // TODO: test validations
    }
    /**
     * Watermark profile details
     *
     * Retrieves details for a single watermark profile.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void streamWatermarkProfileWatermarkProfileDetailsTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        WatermarkResponseSingle response = api.streamWatermarkProfileWatermarkProfileDetails(identifier, accountIdentifier);

        // TODO: test validations
    }
}
