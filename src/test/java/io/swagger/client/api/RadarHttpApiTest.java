/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.InlineResponse20058;
import io.swagger.client.model.InlineResponse20059;
import io.swagger.client.model.InlineResponse20065;
import io.swagger.client.model.InlineResponse20066;
import io.swagger.client.model.InlineResponse20067;
import io.swagger.client.model.InlineResponse20068;
import io.swagger.client.model.InlineResponse20069;
import io.swagger.client.model.InlineResponse20070;
import io.swagger.client.model.InlineResponse20071;
import io.swagger.client.model.InlineResponse20072;
import io.swagger.client.model.InlineResponse20073;
import io.swagger.client.model.InlineResponse20074;
import io.swagger.client.model.InlineResponse20075;
import io.swagger.client.model.InlineResponse20076;
import io.swagger.client.model.InlineResponse20077;
import io.swagger.client.model.InlineResponse20078;
import io.swagger.client.model.InlineResponse20079;
import io.swagger.client.model.InlineResponse20080;
import io.swagger.client.model.InlineResponse404;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for RadarHttpApi
 */
@Ignore
public class RadarHttpApiTest {

    private final RadarHttpApi api = new RadarHttpApi();

    /**
     * Get top autonomous systems by HTTP requests
     *
     * Get the top autonomous systems (AS) by HTTP traffic. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopASesTest() throws Exception {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20058 response = api.radarGetHttpTopASes(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top autonomous systems by bot class
     *
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#x27;s bot score - refer to [Bot Scores](https://developers.cloudflare.com/bots/concepts/bot-score) for more information. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopASesByBotClassTest() throws Exception {
        String botClass = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20058 response = api.radarGetHttpTopASesByBotClass(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top autonomous systems by device type
     *
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopASesByDeviceTypeTest() throws Exception {
        String deviceType = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20058 response = api.radarGetHttpTopASesByDeviceType(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top autonomous systems by HTTP protocol
     *
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopASesByHTTPProtocolTest() throws Exception {
        String httpProtocol = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20058 response = api.radarGetHttpTopASesByHTTPProtocol(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top autonomous systems by HTTP version
     *
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol version. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopASesByHTTPVersionTest() throws Exception {
        String httpVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20058 response = api.radarGetHttpTopASesByHTTPVersion(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top autonomous systems by IP version
     *
     * Get the top autonomous systems, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopASesByIpVersionTest() throws Exception {
        String ipVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20058 response = api.radarGetHttpTopASesByIpVersion(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top autonomous systems by operating system
     *
     * Get the top autonomous systems, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopASesByOSTest() throws Exception {
        String os = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20058 response = api.radarGetHttpTopASesByOS(os, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top autonomous systems by TLS version
     *
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopASesByTLSVersionTest() throws Exception {
        String tlsVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        String format = null;
        InlineResponse20058 response = api.radarGetHttpTopASesByTLSVersion(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);

        // TODO: test validations
    }
    /**
     * Get top user agents aggregated in families by HTTP requests
     *
     * Get the top user agents aggregated in families by HTTP traffic. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopBrowserFamiliesTest() throws Exception {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20080 response = api.radarGetHttpTopBrowserFamilies(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top user agents by HTTP requests
     *
     * Get the top user agents by HTTP traffic. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopBrowsersTest() throws Exception {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20080 response = api.radarGetHttpTopBrowsers(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top autonomous systems by HTTP requests
     *
     * Get the top locations by HTTP traffic. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsTest() throws Exception {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20059 response = api.radarGetHttpTopLocations(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top locations by bot class
     *
     * Get the top locations, by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#x27;s bot score - refer to [Bot scores])https://developers.cloudflare.com/bots/concepts/bot-score). Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByBotClassTest() throws Exception {
        String botClass = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20059 response = api.radarGetHttpTopLocationsByBotClass(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top locations by device type
     *
     * Get the top locations, by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByDeviceTypeTest() throws Exception {
        String deviceType = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20059 response = api.radarGetHttpTopLocationsByDeviceType(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top locations by HTTP protocol
     *
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByHTTPProtocolTest() throws Exception {
        String httpProtocol = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20059 response = api.radarGetHttpTopLocationsByHTTPProtocol(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top locations by HTTP version
     *
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByHTTPVersionTest() throws Exception {
        String httpVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20059 response = api.radarGetHttpTopLocationsByHTTPVersion(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top locations by IP version
     *
     * Get the top locations, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByIpVersionTest() throws Exception {
        String ipVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20059 response = api.radarGetHttpTopLocationsByIpVersion(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top locations by operating system
     *
     * Get the top locations, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByOSTest() throws Exception {
        String os = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20059 response = api.radarGetHttpTopLocationsByOS(os, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get top locations by TLS version
     *
     * Get the top locations, by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByTLSVersionTest() throws Exception {
        String tlsVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        String format = null;
        InlineResponse20059 response = api.radarGetHttpTopLocationsByTLSVersion(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);

        // TODO: test validations
    }
    /**
     * Get a summary of bot classes
     *
     * Percentage distribution of traffic classified as automated or human.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetSummaryBotClassTest() throws Exception {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20065 response = api.radarGetSummaryBotClass(name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get a summary of device types
     *
     * Percentage distribution of traffic per device type.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetSummaryDeviceTypeTest() throws Exception {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20066 response = api.radarGetSummaryDeviceType(name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get a summary of HTTP protocols
     *
     * Percentage distribution of traffic per HTTP protocol.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetSummaryHttpProtocolTest() throws Exception {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20067 response = api.radarGetSummaryHttpProtocol(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get a summary of HTTP versions
     *
     * Percentage distribution of traffic per HTTP protocol version.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetSummaryHttpVersionTest() throws Exception {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20068 response = api.radarGetSummaryHttpVersion(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get a summary of IP versions
     *
     * Percentage distribution of traffic per IP protocol version.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetSummaryIpVersionTest() throws Exception {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20069 response = api.radarGetSummaryIpVersion(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get a summary of operating systems
     *
     * Percentage distribution of traffic per operating system.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetSummaryOSTest() throws Exception {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20070 response = api.radarGetSummaryOS(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get a summary of TLS versions
     *
     * Percentage distribution of traffic per TLS protocol version.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetSummaryTLSVersionTest() throws Exception {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        String format = null;
        InlineResponse20071 response = api.radarGetSummaryTLSVersion(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);

        // TODO: test validations
    }
    /**
     * Get time series of bot classes
     *
     * Percentage distribution of traffic classified as automated or human over time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetTimeseriesBotClassTest() throws Exception {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20072 response = api.radarGetTimeseriesBotClass(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get time series of user agents aggregated in families
     *
     * Percentage distribution of traffic of the top user agents aggregated in families in the selected time range, over time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetTimeseriesBrowserFamiliesTest() throws Exception {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20073 response = api.radarGetTimeseriesBrowserFamilies(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get time series of user agents
     *
     * Percentage distribution of traffic of the top user agents in the selected time range, over time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetTimeseriesBrowsersTest() throws Exception {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        Integer limitPerGroup = null;
        String format = null;
        InlineResponse20073 response = api.radarGetTimeseriesBrowsers(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, limitPerGroup, format);

        // TODO: test validations
    }
    /**
     * Get time series of device types
     *
     * Percentage distribution of traffic per device type over time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetTimeseriesDeviceTypeTest() throws Exception {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20074 response = api.radarGetTimeseriesDeviceType(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get time series of HTTP protocols
     *
     * Percentage distribution of traffic per HTTP protocol over time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetTimeseriesHttpProtocolTest() throws Exception {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20075 response = api.radarGetTimeseriesHttpProtocol(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get time series of HTTP versions
     *
     * Percentage distribution of traffic per HTTP protocol version over time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetTimeseriesHttpVersionTest() throws Exception {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20076 response = api.radarGetTimeseriesHttpVersion(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get time series of IP versions
     *
     * Percentage distribution of traffic per IP protocol version over time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetTimeseriesIpVersionTest() throws Exception {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        InlineResponse20077 response = api.radarGetTimeseriesIpVersion(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);

        // TODO: test validations
    }
    /**
     * Get time series of operating systems
     *
     * Percentage distribution of traffic of the top operating systems in the selected time range, over time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetTimeseriesOSTest() throws Exception {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> tlsVersion = null;
        Integer limitPerGroup = null;
        String format = null;
        InlineResponse20078 response = api.radarGetTimeseriesOS(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, limitPerGroup, format);

        // TODO: test validations
    }
    /**
     * Get time series of TLS versions
     *
     * Percentage distribution of traffic per TLS protocol version over time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void radarGetTimeseriesTLSVersionTest() throws Exception {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        String format = null;
        InlineResponse20079 response = api.radarGetTimeseriesTLSVersion(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);

        // TODO: test validations
    }
}
