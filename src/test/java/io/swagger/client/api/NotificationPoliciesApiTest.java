/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ApiResponseCollection;
import io.swagger.client.model.InlineResponse4xx1;
import io.swagger.client.model.InlineResponse4xx259;
import io.swagger.client.model.InlineResponse4xx260;
import io.swagger.client.model.InlineResponse4xx261;
import io.swagger.client.model.PoliciesComponentsSchemasIdResponse2;
import io.swagger.client.model.PoliciesComponentsSchemasResponseCollection2;
import io.swagger.client.model.PoliciesComponentsSchemasSingleResponse2;
import io.swagger.client.model.PoliciesUuidBody1;
import io.swagger.client.model.V3PoliciesBody;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for NotificationPoliciesApi
 */
@Ignore
public class NotificationPoliciesApiTest {

    private final NotificationPoliciesApi api = new NotificationPoliciesApi();

    /**
     * Create a Notification policy
     *
     * Creates a new Notification policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void notificationPoliciesCreateANotificationPolicyTest() throws Exception {
        V3PoliciesBody body = null;
        String identifier = null;
        PoliciesComponentsSchemasIdResponse2 response = api.notificationPoliciesCreateANotificationPolicy(body, identifier);

        // TODO: test validations
    }
    /**
     * Delete a Notification policy
     *
     * Delete a Notification policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void notificationPoliciesDeleteANotificationPolicyTest() throws Exception {
        String uuid = null;
        String identifier = null;
        ApiResponseCollection response = api.notificationPoliciesDeleteANotificationPolicy(uuid, identifier);

        // TODO: test validations
    }
    /**
     * Get a Notification policy
     *
     * Get details for a single policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void notificationPoliciesGetANotificationPolicyTest() throws Exception {
        String uuid = null;
        String identifier = null;
        PoliciesComponentsSchemasSingleResponse2 response = api.notificationPoliciesGetANotificationPolicy(uuid, identifier);

        // TODO: test validations
    }
    /**
     * List Notification policies
     *
     * Get a list of all Notification policies.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void notificationPoliciesListNotificationPoliciesTest() throws Exception {
        String identifier = null;
        PoliciesComponentsSchemasResponseCollection2 response = api.notificationPoliciesListNotificationPolicies(identifier);

        // TODO: test validations
    }
    /**
     * Update a Notification policy
     *
     * Update a Notification policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void notificationPoliciesUpdateANotificationPolicyTest() throws Exception {
        PoliciesUuidBody1 body = null;
        String uuid = null;
        String identifier = null;
        PoliciesComponentsSchemasIdResponse2 response = api.notificationPoliciesUpdateANotificationPolicy(body, uuid, identifier);

        // TODO: test validations
    }
}
