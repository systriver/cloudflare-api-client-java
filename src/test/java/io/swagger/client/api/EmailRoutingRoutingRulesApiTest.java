/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CatchAllRuleResponseSingle;
import io.swagger.client.model.CreateRuleProperties;
import io.swagger.client.model.InlineResponse4xx381;
import io.swagger.client.model.InlineResponse4xx382;
import io.swagger.client.model.InlineResponse4xx383;
import io.swagger.client.model.RuleResponseSingle;
import io.swagger.client.model.RulesResponseCollection;
import io.swagger.client.model.UpdateCatchAllRuleProperties;
import io.swagger.client.model.UpdateRuleProperties;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for EmailRoutingRoutingRulesApi
 */
@Ignore
public class EmailRoutingRoutingRulesApiTest {

    private final EmailRoutingRoutingRulesApi api = new EmailRoutingRoutingRulesApi();

    /**
     * Create routing rule
     *
     * Rules consist of a set of criteria for matching emails (such as an email being sent to a specific custom email address) plus a set of actions to take on the email (like forwarding it to a specific destination address).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void emailRoutingRoutingRulesCreateRoutingRuleTest() throws Exception {
        CreateRuleProperties body = null;
        String zoneIdentifier = null;
        RuleResponseSingle response = api.emailRoutingRoutingRulesCreateRoutingRule(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Delete routing rule
     *
     * Delete a specific routing rule.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void emailRoutingRoutingRulesDeleteRoutingRuleTest() throws Exception {
        String ruleIdentifier = null;
        String zoneIdentifier = null;
        RuleResponseSingle response = api.emailRoutingRoutingRulesDeleteRoutingRule(ruleIdentifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get catch-all rule
     *
     * Get information on the default catch-all routing rule.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void emailRoutingRoutingRulesGetCatchAllRuleTest() throws Exception {
        String zoneIdentifier = null;
        CatchAllRuleResponseSingle response = api.emailRoutingRoutingRulesGetCatchAllRule(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get routing rule
     *
     * Get information for a specific routing rule already created.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void emailRoutingRoutingRulesGetRoutingRuleTest() throws Exception {
        String ruleIdentifier = null;
        String zoneIdentifier = null;
        RuleResponseSingle response = api.emailRoutingRoutingRulesGetRoutingRule(ruleIdentifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List routing rules
     *
     * Lists existing routing rules.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void emailRoutingRoutingRulesListRoutingRulesTest() throws Exception {
        String zoneIdentifier = null;
        RulesResponseCollection response = api.emailRoutingRoutingRulesListRoutingRules(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update catch-all rule
     *
     * Enable or disable catch-all routing rule, or change action to forward to specific destination address.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void emailRoutingRoutingRulesUpdateCatchAllRuleTest() throws Exception {
        UpdateCatchAllRuleProperties body = null;
        String zoneIdentifier = null;
        CatchAllRuleResponseSingle response = api.emailRoutingRoutingRulesUpdateCatchAllRule(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update routing rule
     *
     * Update actions and matches, or enable/disable specific routing rules.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void emailRoutingRoutingRulesUpdateRoutingRuleTest() throws Exception {
        UpdateRuleProperties body = null;
        String ruleIdentifier = null;
        String zoneIdentifier = null;
        RuleResponseSingle response = api.emailRoutingRoutingRulesUpdateRoutingRule(body, ruleIdentifier, zoneIdentifier);

        // TODO: test validations
    }
}
