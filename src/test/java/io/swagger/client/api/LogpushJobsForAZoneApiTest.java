/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.DestinationExistsBody1;
import io.swagger.client.model.DestinationExistsResponse;
import io.swagger.client.model.GetOwnershipResponse;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse4xx77;
import io.swagger.client.model.InlineResponse4xx78;
import io.swagger.client.model.InlineResponse4xx79;
import io.swagger.client.model.InlineResponse4xx80;
import io.swagger.client.model.InlineResponse4xx81;
import io.swagger.client.model.InlineResponse4xx82;
import io.swagger.client.model.InlineResponse4xx83;
import io.swagger.client.model.InlineResponse4xx84;
import io.swagger.client.model.JobsJobIdentifierBody1;
import io.swagger.client.model.LogpushFieldResponseCollection;
import io.swagger.client.model.LogpushJobResponseCollection;
import io.swagger.client.model.LogpushJobResponseSingle;
import io.swagger.client.model.LogpushJobsBody1;
import io.swagger.client.model.LogpushOwnershipBody1;
import io.swagger.client.model.OwnershipValidateBody1;
import io.swagger.client.model.ValidateOriginBody1;
import io.swagger.client.model.ValidateOwnershipResponse;
import io.swagger.client.model.ValidateResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for LogpushJobsForAZoneApi
 */
@Ignore
public class LogpushJobsForAZoneApiTest {

    private final LogpushJobsForAZoneApi api = new LogpushJobsForAZoneApi();

    /**
     * Delete Logpush job
     *
     * Deletes a Logpush job.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteZonesZoneIdentifierLogpushJobsJobIdentifierTest() throws Exception {
        Integer jobIdentifier = null;
        String zoneIdentifier = null;
        InlineResponse2004 response = api.deleteZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List fields
     *
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getZonesZoneIdentifierLogpushDatasetsDatasetFieldsTest() throws Exception {
        String dataset = null;
        String zoneIdentifier = null;
        LogpushFieldResponseCollection response = api.getZonesZoneIdentifierLogpushDatasetsDatasetFields(dataset, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List Logpush jobs for a dataset
     *
     * Lists Logpush jobs for a zone for a dataset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getZonesZoneIdentifierLogpushDatasetsDatasetJobsTest() throws Exception {
        String dataset = null;
        String zoneIdentifier = null;
        LogpushJobResponseCollection response = api.getZonesZoneIdentifierLogpushDatasetsDatasetJobs(dataset, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List Logpush jobs
     *
     * Lists Logpush jobs for a zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getZonesZoneIdentifierLogpushJobsTest() throws Exception {
        String zoneIdentifier = null;
        LogpushJobResponseCollection response = api.getZonesZoneIdentifierLogpushJobs(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Logpush job details
     *
     * Gets the details of a Logpush job.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getZonesZoneIdentifierLogpushJobsJobIdentifierTest() throws Exception {
        Integer jobIdentifier = null;
        String zoneIdentifier = null;
        LogpushJobResponseSingle response = api.getZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Create Logpush job
     *
     * Creates a new Logpush job for a zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postZonesZoneIdentifierLogpushJobsTest() throws Exception {
        LogpushJobsBody1 body = null;
        String zoneIdentifier = null;
        LogpushJobResponseSingle response = api.postZonesZoneIdentifierLogpushJobs(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get ownership challenge
     *
     * Gets a new ownership challenge sent to your destination.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postZonesZoneIdentifierLogpushOwnershipTest() throws Exception {
        LogpushOwnershipBody1 body = null;
        String zoneIdentifier = null;
        GetOwnershipResponse response = api.postZonesZoneIdentifierLogpushOwnership(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Validate ownership challenge
     *
     * Validates ownership challenge of the destination.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postZonesZoneIdentifierLogpushOwnershipValidateTest() throws Exception {
        OwnershipValidateBody1 body = null;
        String zoneIdentifier = null;
        ValidateOwnershipResponse response = api.postZonesZoneIdentifierLogpushOwnershipValidate(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Check destination exists
     *
     * Checks if there is an existing job with a destination.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postZonesZoneIdentifierLogpushValidateDestinationExistsTest() throws Exception {
        DestinationExistsBody1 body = null;
        String zoneIdentifier = null;
        DestinationExistsResponse response = api.postZonesZoneIdentifierLogpushValidateDestinationExists(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Validate origin
     *
     * Validates logpull origin with logpull_options.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postZonesZoneIdentifierLogpushValidateOriginTest() throws Exception {
        ValidateOriginBody1 body = null;
        String zoneIdentifier = null;
        ValidateResponse response = api.postZonesZoneIdentifierLogpushValidateOrigin(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update Logpush job
     *
     * Updates a Logpush job.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putZonesZoneIdentifierLogpushJobsJobIdentifierTest() throws Exception {
        JobsJobIdentifierBody1 body = null;
        Integer jobIdentifier = null;
        String zoneIdentifier = null;
        LogpushJobResponseSingle response = api.putZonesZoneIdentifierLogpushJobsJobIdentifier(body, jobIdentifier, zoneIdentifier);

        // TODO: test validations
    }
}
