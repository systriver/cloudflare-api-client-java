/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ApiResponseSingle;
import io.swagger.client.model.BulkWriteInner;
import io.swagger.client.model.CreateRenameNamespaceBody;
import io.swagger.client.model.InlineResponse20010;
import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.InlineResponse2009;
import io.swagger.client.model.InlineResponse4xx156;
import io.swagger.client.model.InlineResponse4xx157;
import io.swagger.client.model.InlineResponse4xx158;
import io.swagger.client.model.InlineResponse4xx159;
import io.swagger.client.model.InlineResponse4xx160;
import io.swagger.client.model.InlineResponse4xx33;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for WorkersKvNamespaceApi
 */
@Ignore
public class WorkersKvNamespaceApiTest {

    private final WorkersKvNamespaceApi api = new WorkersKvNamespaceApi();

    /**
     * Create a Namespace
     *
     * Creates a namespace under the given title. A 400 is returned if the account already owns a namespace with this title. A namespace must be explicitly deleted to be replaced.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workersKvNamespaceCreateANamespaceTest() throws Exception {
        CreateRenameNamespaceBody body = null;
        String accountIdentifier = null;
        InlineResponse2009 response = api.workersKvNamespaceCreateANamespace(body, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Delete key-value pair
     *
     * Remove a KV pair from the Namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workersKvNamespaceDeleteKeyValuePairTest() throws Exception {
        String keyName = null;
        String namespaceIdentifier = null;
        String accountIdentifier = null;
        ApiResponseSingle response = api.workersKvNamespaceDeleteKeyValuePair(keyName, namespaceIdentifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Delete multiple key-value pairs
     *
     * Remove multiple KV pairs from the Namespace. Body should be an array of up to 10,000 keys to be removed.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workersKvNamespaceDeleteMultipleKeyValuePairsTest() throws Exception {
        List<String> body = null;
        String namespaceIdentifier = null;
        String accountIdentifier = null;
        ApiResponseSingle response = api.workersKvNamespaceDeleteMultipleKeyValuePairs(body, namespaceIdentifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * List a Namespace&#x27;s Keys
     *
     * Lists a namespace&#x27;s keys.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workersKvNamespaceListANamespaceSKeysTest() throws Exception {
        String namespaceIdentifier = null;
        String accountIdentifier = null;
        InlineResponse20010 response = api.workersKvNamespaceListANamespaceSKeys(namespaceIdentifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * List Namespaces
     *
     * Returns the namespaces owned by an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workersKvNamespaceListNamespacesTest() throws Exception {
        String accountIdentifier = null;
        InlineResponse2008 response = api.workersKvNamespaceListNamespaces(accountIdentifier);

        // TODO: test validations
    }
    /**
     * Read key-value pair
     *
     * Returns the value associated with the given key in the given namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name. If the KV-pair is set to expire at some point, the expiration time as measured in seconds since the UNIX epoch will be returned in the \&quot;Expiration\&quot; response header.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workersKvNamespaceReadKeyValuePairTest() throws Exception {
        String keyName = null;
        String namespaceIdentifier = null;
        String accountIdentifier = null;
        String response = api.workersKvNamespaceReadKeyValuePair(keyName, namespaceIdentifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Read the metadata for a key
     *
     * Returns the metadata associated with the given key in the given namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workersKvNamespaceReadTheMetadataForAKeyTest() throws Exception {
        String keyName = null;
        String namespaceIdentifier = null;
        String accountIdentifier = null;
        InlineResponse20011 response = api.workersKvNamespaceReadTheMetadataForAKey(keyName, namespaceIdentifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Remove a Namespace
     *
     * Deletes the namespace corresponding to the given ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workersKvNamespaceRemoveANamespaceTest() throws Exception {
        String namespaceIdentifier = null;
        String accountIdentifier = null;
        ApiResponseSingle response = api.workersKvNamespaceRemoveANamespace(namespaceIdentifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Rename a Namespace
     *
     * Modifies a namespace&#x27;s title.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workersKvNamespaceRenameANamespaceTest() throws Exception {
        CreateRenameNamespaceBody body = null;
        String namespaceIdentifier = null;
        String accountIdentifier = null;
        ApiResponseSingle response = api.workersKvNamespaceRenameANamespace(body, namespaceIdentifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Write key-value pair with metadata
     *
     * Write a value identified by a key. Use URL-encoding to use special characters (e.g. :, !, %) in the key name. Body should be the value to be stored along with json metadata to be associated with the key/value pair. Existing values, expirations and metadata will be overwritten. If neither &#x60;expiration&#x60; nor &#x60;expiration_ttl&#x60; is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workersKvNamespaceWriteKeyValuePairWithMetadataTest() throws Exception {
        String metadata = null;
        String value = null;
        String keyName = null;
        String namespaceIdentifier = null;
        String accountIdentifier = null;
        ApiResponseSingle response = api.workersKvNamespaceWriteKeyValuePairWithMetadata(metadata, value, keyName, namespaceIdentifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Write multiple key-value pairs
     *
     * Write multiple keys and values at once. Body should be an array of up to 10,000 key-value pairs to be stored, along with optional expiration information. Existing values and expirations will be overwritten. If neither expiration nor expiration_ttl is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored. The entire request size must be 100 megabytes or less.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workersKvNamespaceWriteMultipleKeyValuePairsTest() throws Exception {
        List<BulkWriteInner> body = null;
        String namespaceIdentifier = null;
        String accountIdentifier = null;
        ApiResponseSingle response = api.workersKvNamespaceWriteMultipleKeyValuePairs(body, namespaceIdentifier, accountIdentifier);

        // TODO: test validations
    }
}
