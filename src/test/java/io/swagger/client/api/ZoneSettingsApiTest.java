/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.InlineResponse200107;
import io.swagger.client.model.InlineResponse200108;
import io.swagger.client.model.InlineResponse200109;
import io.swagger.client.model.InlineResponse200110;
import io.swagger.client.model.InlineResponse200111;
import io.swagger.client.model.InlineResponse200112;
import io.swagger.client.model.InlineResponse200113;
import io.swagger.client.model.InlineResponse200114;
import io.swagger.client.model.InlineResponse200115;
import io.swagger.client.model.InlineResponse200116;
import io.swagger.client.model.InlineResponse200117;
import io.swagger.client.model.InlineResponse200118;
import io.swagger.client.model.InlineResponse200119;
import io.swagger.client.model.InlineResponse200120;
import io.swagger.client.model.InlineResponse200121;
import io.swagger.client.model.InlineResponse200122;
import io.swagger.client.model.InlineResponse200123;
import io.swagger.client.model.InlineResponse200124;
import io.swagger.client.model.InlineResponse200125;
import io.swagger.client.model.InlineResponse200126;
import io.swagger.client.model.InlineResponse200127;
import io.swagger.client.model.InlineResponse200128;
import io.swagger.client.model.InlineResponse200129;
import io.swagger.client.model.InlineResponse200130;
import io.swagger.client.model.InlineResponse200131;
import io.swagger.client.model.InlineResponse200132;
import io.swagger.client.model.InlineResponse200133;
import io.swagger.client.model.InlineResponse200134;
import io.swagger.client.model.InlineResponse200135;
import io.swagger.client.model.InlineResponse200136;
import io.swagger.client.model.InlineResponse200137;
import io.swagger.client.model.InlineResponse200138;
import io.swagger.client.model.InlineResponse200139;
import io.swagger.client.model.InlineResponse200140;
import io.swagger.client.model.InlineResponse200141;
import io.swagger.client.model.InlineResponse200142;
import io.swagger.client.model.InlineResponse200143;
import io.swagger.client.model.InlineResponse200144;
import io.swagger.client.model.InlineResponse200145;
import io.swagger.client.model.InlineResponse200146;
import io.swagger.client.model.InlineResponse200147;
import io.swagger.client.model.InlineResponse200148;
import io.swagger.client.model.InlineResponse200149;
import io.swagger.client.model.InlineResponse200150;
import io.swagger.client.model.InlineResponse200151;
import io.swagger.client.model.InlineResponse200152;
import io.swagger.client.model.InlineResponse200153;
import io.swagger.client.model.InlineResponse200154;
import io.swagger.client.model.InlineResponse200155;
import io.swagger.client.model.InlineResponse200156;
import io.swagger.client.model.InlineResponse200157;
import io.swagger.client.model.InlineResponse4xx431;
import io.swagger.client.model.InlineResponse4xx432;
import io.swagger.client.model.InlineResponse4xx433;
import io.swagger.client.model.InlineResponse4xx434;
import io.swagger.client.model.InlineResponse4xx435;
import io.swagger.client.model.InlineResponse4xx436;
import io.swagger.client.model.InlineResponse4xx437;
import io.swagger.client.model.InlineResponse4xx438;
import io.swagger.client.model.InlineResponse4xx439;
import io.swagger.client.model.InlineResponse4xx440;
import io.swagger.client.model.InlineResponse4xx441;
import io.swagger.client.model.InlineResponse4xx442;
import io.swagger.client.model.InlineResponse4xx443;
import io.swagger.client.model.InlineResponse4xx444;
import io.swagger.client.model.InlineResponse4xx445;
import io.swagger.client.model.InlineResponse4xx446;
import io.swagger.client.model.InlineResponse4xx447;
import io.swagger.client.model.InlineResponse4xx448;
import io.swagger.client.model.InlineResponse4xx449;
import io.swagger.client.model.InlineResponse4xx450;
import io.swagger.client.model.InlineResponse4xx451;
import io.swagger.client.model.InlineResponse4xx452;
import io.swagger.client.model.InlineResponse4xx453;
import io.swagger.client.model.InlineResponse4xx454;
import io.swagger.client.model.InlineResponse4xx455;
import io.swagger.client.model.InlineResponse4xx456;
import io.swagger.client.model.InlineResponse4xx457;
import io.swagger.client.model.InlineResponse4xx458;
import io.swagger.client.model.InlineResponse4xx459;
import io.swagger.client.model.InlineResponse4xx460;
import io.swagger.client.model.InlineResponse4xx461;
import io.swagger.client.model.InlineResponse4xx462;
import io.swagger.client.model.InlineResponse4xx463;
import io.swagger.client.model.InlineResponse4xx464;
import io.swagger.client.model.InlineResponse4xx465;
import io.swagger.client.model.InlineResponse4xx466;
import io.swagger.client.model.InlineResponse4xx467;
import io.swagger.client.model.InlineResponse4xx468;
import io.swagger.client.model.InlineResponse4xx469;
import io.swagger.client.model.InlineResponse4xx470;
import io.swagger.client.model.InlineResponse4xx471;
import io.swagger.client.model.InlineResponse4xx472;
import io.swagger.client.model.InlineResponse4xx473;
import io.swagger.client.model.InlineResponse4xx474;
import io.swagger.client.model.InlineResponse4xx475;
import io.swagger.client.model.InlineResponse4xx476;
import io.swagger.client.model.InlineResponse4xx477;
import io.swagger.client.model.InlineResponse4xx478;
import io.swagger.client.model.InlineResponse4xx479;
import io.swagger.client.model.InlineResponse4xx480;
import io.swagger.client.model.InlineResponse4xx481;
import io.swagger.client.model.InlineResponse4xx482;
import io.swagger.client.model.Settings0rttBody;
import io.swagger.client.model.SettingsAlwaysOnlineBody;
import io.swagger.client.model.SettingsAlwaysUseHttpsBody;
import io.swagger.client.model.SettingsAutomaticHttpsRewritesBody;
import io.swagger.client.model.SettingsAutomaticPlatformOptimizationBody;
import io.swagger.client.model.SettingsBrotliBody;
import io.swagger.client.model.SettingsBrowserCacheTtlBody;
import io.swagger.client.model.SettingsBrowserCheckBody;
import io.swagger.client.model.SettingsCacheLevelBody;
import io.swagger.client.model.SettingsChallengeTtlBody;
import io.swagger.client.model.SettingsCiphersBody;
import io.swagger.client.model.SettingsDevelopmentModeBody;
import io.swagger.client.model.SettingsEarlyHintsBody;
import io.swagger.client.model.SettingsEmailObfuscationBody;
import io.swagger.client.model.SettingsH2PrioritizationBody;
import io.swagger.client.model.SettingsHotlinkProtectionBody;
import io.swagger.client.model.SettingsHttp2Body;
import io.swagger.client.model.SettingsHttp3Body;
import io.swagger.client.model.SettingsImageResizingBody;
import io.swagger.client.model.SettingsIpGeolocationBody;
import io.swagger.client.model.SettingsIpv6Body;
import io.swagger.client.model.SettingsMinTlsVersionBody;
import io.swagger.client.model.SettingsMinifyBody;
import io.swagger.client.model.SettingsMirageBody;
import io.swagger.client.model.SettingsMobileRedirectBody;
import io.swagger.client.model.SettingsNelBody;
import io.swagger.client.model.SettingsOpportunisticEncryptionBody;
import io.swagger.client.model.SettingsOpportunisticOnionBody;
import io.swagger.client.model.SettingsOrangeToOrangeBody;
import io.swagger.client.model.SettingsOriginErrorPagePassThruBody;
import io.swagger.client.model.SettingsOriginMaxHttpVersionBody;
import io.swagger.client.model.SettingsPolishBody;
import io.swagger.client.model.SettingsPrefetchPreloadBody;
import io.swagger.client.model.SettingsPrivacyPassBody;
import io.swagger.client.model.SettingsProxyReadTimeoutBody;
import io.swagger.client.model.SettingsPseudoIpv4Body;
import io.swagger.client.model.SettingsResponseBufferingBody;
import io.swagger.client.model.SettingsRocketLoaderBody;
import io.swagger.client.model.SettingsSecurityHeaderBody;
import io.swagger.client.model.SettingsSecurityLevelBody;
import io.swagger.client.model.SettingsServerSideExcludeBody;
import io.swagger.client.model.SettingsSortQueryStringForCacheBody;
import io.swagger.client.model.SettingsSslBody;
import io.swagger.client.model.SettingsSslRecommenderBody;
import io.swagger.client.model.SettingsTls13Body;
import io.swagger.client.model.SettingsTlsClientAuthBody;
import io.swagger.client.model.SettingsTrueClientIpHeaderBody;
import io.swagger.client.model.SettingsWafBody;
import io.swagger.client.model.SettingsWebpBody;
import io.swagger.client.model.SettingsWebsocketsBody;
import io.swagger.client.model.ZoneIdentifierSettingsBody;
import io.swagger.client.model.ZoneSettingsResponseCollection;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ZoneSettingsApi
 */
@Ignore
public class ZoneSettingsApiTest {

    private final ZoneSettingsApi api = new ZoneSettingsApi();

    /**
     * Change 0-RTT session resumption setting
     *
     * Changes the 0-RTT session resumption setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChange0RttSessionResumptionSettingTest() throws Exception {
        Settings0rttBody body = null;
        String zoneIdentifier = null;
        InlineResponse200107 response = api.zoneSettingsChange0RttSessionResumptionSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Always Online setting
     *
     * When enabled, Cloudflare serves limited copies of web pages available from the [Internet Archive&#x27;s Wayback Machine](https://archive.org/web/) if your server is offline. Refer to [Always Online](https://developers.cloudflare.com/cache/about/always-online) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeAlwaysOnlineSettingTest() throws Exception {
        SettingsAlwaysOnlineBody body = null;
        String zoneIdentifier = null;
        InlineResponse200109 response = api.zoneSettingsChangeAlwaysOnlineSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Always Use HTTPS setting
     *
     * Reply to all requests for URLs that use \&quot;http\&quot; with a 301 redirect to the equivalent \&quot;https\&quot; URL. If you only want to redirect for a subset of requests, consider creating an \&quot;Always use HTTPS\&quot; page rule.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeAlwaysUseHttpsSettingTest() throws Exception {
        SettingsAlwaysUseHttpsBody body = null;
        String zoneIdentifier = null;
        InlineResponse200110 response = api.zoneSettingsChangeAlwaysUseHttpsSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Automatic HTTPS Rewrites setting
     *
     * Enable the Automatic HTTPS Rewrites feature for this zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeAutomaticHttpsRewritesSettingTest() throws Exception {
        SettingsAutomaticHttpsRewritesBody body = null;
        String zoneIdentifier = null;
        InlineResponse200111 response = api.zoneSettingsChangeAutomaticHttpsRewritesSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Automatic Platform Optimization for WordPress settings
     *
     * [Automatic Platform Optimization for WordPress](https://developers.cloudflare.com/automatic-platform-optimization/) serves your WordPress site from Cloudflare&#x27;s edge network and caches third-party fonts.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeAutomaticPlatformOptimizationForWordPressSettingsTest() throws Exception {
        SettingsAutomaticPlatformOptimizationBody body = null;
        String zoneIdentifier = null;
        InlineResponse200112 response = api.zoneSettingsChangeAutomaticPlatformOptimizationForWordPressSettings(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Brotli setting
     *
     * When the client requesting an asset supports the Brotli compression algorithm, Cloudflare will serve a Brotli compressed version of the asset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeBrotliSettingTest() throws Exception {
        SettingsBrotliBody body = null;
        String zoneIdentifier = null;
        InlineResponse200113 response = api.zoneSettingsChangeBrotliSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Browser Cache TTL setting
     *
     * Browser Cache TTL (in seconds) specifies how long Cloudflare-cached resources will remain on your visitors&#x27; computers. Cloudflare will honor any larger times specified by your server. (https://support.cloudflare.com/hc/en-us/articles/200168276).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeBrowserCacheTtlSettingTest() throws Exception {
        SettingsBrowserCacheTtlBody body = null;
        String zoneIdentifier = null;
        InlineResponse200114 response = api.zoneSettingsChangeBrowserCacheTtlSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Browser Check setting
     *
     * Browser Integrity Check is similar to Bad Behavior and looks for common HTTP headers abused most commonly by spammers and denies access to your page.  It will also challenge visitors that do not have a user agent or a non standard user agent (also commonly used by abuse bots, crawlers or visitors). (https://support.cloudflare.com/hc/en-us/articles/200170086).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeBrowserCheckSettingTest() throws Exception {
        SettingsBrowserCheckBody body = null;
        String zoneIdentifier = null;
        InlineResponse200115 response = api.zoneSettingsChangeBrowserCheckSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Cache Level setting
     *
     * Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeCacheLevelSettingTest() throws Exception {
        SettingsCacheLevelBody body = null;
        String zoneIdentifier = null;
        InlineResponse200116 response = api.zoneSettingsChangeCacheLevelSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Challenge TTL setting
     *
     * Specify how long a visitor is allowed access to your site after successfully completing a challenge (such as a CAPTCHA). After the TTL has expired the visitor will have to complete a new challenge. We recommend a 15 - 45 minute setting and will attempt to honor any setting above 45 minutes. (https://support.cloudflare.com/hc/en-us/articles/200170136).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeChallengeTtlSettingTest() throws Exception {
        SettingsChallengeTtlBody body = null;
        String zoneIdentifier = null;
        InlineResponse200117 response = api.zoneSettingsChangeChallengeTtlSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change ciphers setting
     *
     * Changes ciphers setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeCiphersSettingTest() throws Exception {
        SettingsCiphersBody body = null;
        String zoneIdentifier = null;
        InlineResponse200118 response = api.zoneSettingsChangeCiphersSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Development Mode setting
     *
     * Development Mode temporarily allows you to enter development mode for your websites if you need to make changes to your site. This will bypass Cloudflare&#x27;s accelerated cache and slow down your site, but is useful if you are making changes to cacheable content (like images, css, or JavaScript) and would like to see those changes right away. Once entered, development mode will last for 3 hours and then automatically toggle off.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeDevelopmentModeSettingTest() throws Exception {
        SettingsDevelopmentModeBody body = null;
        String zoneIdentifier = null;
        InlineResponse200119 response = api.zoneSettingsChangeDevelopmentModeSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Early Hints setting
     *
     * When enabled, Cloudflare will attempt to speed up overall page loads by serving &#x60;103&#x60; responses with &#x60;Link&#x60; headers from the final response. Refer to [Early Hints](https://developers.cloudflare.com/cache/about/early-hints) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeEarlyHintsSettingTest() throws Exception {
        SettingsEarlyHintsBody body = null;
        String zoneIdentifier = null;
        InlineResponse200120 response = api.zoneSettingsChangeEarlyHintsSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Email Obfuscation setting
     *
     * Encrypt email adresses on your web page from bots, while keeping them visible to humans. (https://support.cloudflare.com/hc/en-us/articles/200170016).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeEmailObfuscationSettingTest() throws Exception {
        SettingsEmailObfuscationBody body = null;
        String zoneIdentifier = null;
        InlineResponse200121 response = api.zoneSettingsChangeEmailObfuscationSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Enable Error Pages On setting
     *
     * Cloudflare will proxy customer error pages on any 502,504 errors on origin server instead of showing a default Cloudflare error page. This does not apply to 522 errors and is limited to Enterprise Zones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeEnableErrorPagesOnSettingTest() throws Exception {
        SettingsOriginErrorPagePassThruBody body = null;
        String zoneIdentifier = null;
        InlineResponse200137 response = api.zoneSettingsChangeEnableErrorPagesOnSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Enable Query String Sort setting
     *
     * Cloudflare will treat files with the same query strings as the same file in cache, regardless of the order of the query strings. This is limited to Enterprise Zones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeEnableQueryStringSortSettingTest() throws Exception {
        SettingsSortQueryStringForCacheBody body = null;
        String zoneIdentifier = null;
        InlineResponse200149 response = api.zoneSettingsChangeEnableQueryStringSortSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change HTTP2 setting
     *
     * Value of the HTTP2 setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeHTTP2SettingTest() throws Exception {
        SettingsHttp2Body body = null;
        String zoneIdentifier = null;
        InlineResponse200124 response = api.zoneSettingsChangeHTTP2Setting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change HTTP3 setting
     *
     * Value of the HTTP3 setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeHTTP3SettingTest() throws Exception {
        SettingsHttp3Body body = null;
        String zoneIdentifier = null;
        InlineResponse200125 response = api.zoneSettingsChangeHTTP3Setting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Hotlink Protection setting
     *
     * When enabled, the Hotlink Protection option ensures that other sites cannot suck up your bandwidth by building pages that use images hosted on your site. Anytime a request for an image on your site hits Cloudflare, we check to ensure that it&#x27;s not another site requesting them. People will still be able to download and view images from your page, but other sites won&#x27;t be able to steal them for use on their own pages. (https://support.cloudflare.com/hc/en-us/articles/200170026).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeHotlinkProtectionSettingTest() throws Exception {
        SettingsHotlinkProtectionBody body = null;
        String zoneIdentifier = null;
        InlineResponse200123 response = api.zoneSettingsChangeHotlinkProtectionSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change HTTP/2 Edge Prioritization setting
     *
     * Changes HTTP/2 Edge Prioritization setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeHttp2EdgePrioritizationSettingTest() throws Exception {
        SettingsH2PrioritizationBody body = null;
        String zoneIdentifier = null;
        InlineResponse200122 response = api.zoneSettingsChangeHttp2EdgePrioritizationSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change IPv6 setting
     *
     * Enable IPv6 on all subdomains that are Cloudflare enabled.  (https://support.cloudflare.com/hc/en-us/articles/200168586).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeIPv6SettingTest() throws Exception {
        SettingsIpv6Body body = null;
        String zoneIdentifier = null;
        InlineResponse200128 response = api.zoneSettingsChangeIPv6Setting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Image Resizing setting
     *
     * Image Resizing provides on-demand resizing, conversion and optimisation for images served through Cloudflare&#x27;s network. Refer to the [Image Resizing documentation](https://developers.cloudflare.com/images/) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeImageResizingSettingTest() throws Exception {
        SettingsImageResizingBody body = null;
        String zoneIdentifier = null;
        InlineResponse200126 response = api.zoneSettingsChangeImageResizingSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change IP Geolocation setting
     *
     * Enable IP Geolocation to have Cloudflare geolocate visitors to your website and pass the country code to you. (https://support.cloudflare.com/hc/en-us/articles/200168236).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeIpGeolocationSettingTest() throws Exception {
        SettingsIpGeolocationBody body = null;
        String zoneIdentifier = null;
        InlineResponse200127 response = api.zoneSettingsChangeIpGeolocationSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Minify setting
     *
     * Automatically minify certain assets for your website. Refer to [Using Cloudflare Auto Minify](https://support.cloudflare.com/hc/en-us/articles/200168196) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeMinifySettingTest() throws Exception {
        SettingsMinifyBody body = null;
        String zoneIdentifier = null;
        InlineResponse200130 response = api.zoneSettingsChangeMinifySetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Minimum TLS Version setting
     *
     * Changes Minimum TLS Version setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeMinimumTlsVersionSettingTest() throws Exception {
        SettingsMinTlsVersionBody body = null;
        String zoneIdentifier = null;
        InlineResponse200129 response = api.zoneSettingsChangeMinimumTlsVersionSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Mirage setting
     *
     * Automatically optimize image loading for website visitors on mobile devices. Refer to [our blog post](http://blog.cloudflare.com/mirage2-solving-mobile-speed) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeMirageSettingTest() throws Exception {
        SettingsMirageBody body = null;
        String zoneIdentifier = null;
        InlineResponse200131 response = api.zoneSettingsChangeMirageSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Mobile Redirect setting
     *
     * Automatically redirect visitors on mobile devices to a mobile-optimized subdomain. Refer to [Understanding Cloudflare Mobile Redirect](https://support.cloudflare.com/hc/articles/200168336) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeMobileRedirectSettingTest() throws Exception {
        SettingsMobileRedirectBody body = null;
        String zoneIdentifier = null;
        InlineResponse200132 response = api.zoneSettingsChangeMobileRedirectSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Network Error Logging setting
     *
     * Enable Network Error Logging reporting on your zone. (Beta) 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeNetworkErrorLoggingSettingTest() throws Exception {
        SettingsNelBody body = null;
        String zoneIdentifier = null;
        InlineResponse200133 response = api.zoneSettingsChangeNetworkErrorLoggingSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Opportunistic Encryption setting
     *
     * Changes Opportunistic Encryption setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeOpportunisticEncryptionSettingTest() throws Exception {
        SettingsOpportunisticEncryptionBody body = null;
        String zoneIdentifier = null;
        InlineResponse200134 response = api.zoneSettingsChangeOpportunisticEncryptionSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Opportunistic Onion setting
     *
     * Add an Alt-Svc header to all legitimate requests from Tor, allowing the connection to use our onion services instead of exit nodes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeOpportunisticOnionSettingTest() throws Exception {
        SettingsOpportunisticOnionBody body = null;
        String zoneIdentifier = null;
        InlineResponse200135 response = api.zoneSettingsChangeOpportunisticOnionSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Orange to Orange (O2O)
     *
     * Orange to Orange (O2O) allows zones on Cloudflare to CNAME to other zones also on Cloudflare.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeOrangeToOrangeO2OTest() throws Exception {
        SettingsOrangeToOrangeBody body = null;
        String zoneIdentifier = null;
        InlineResponse200136 response = api.zoneSettingsChangeOrangeToOrangeO2O(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Origin Max HTTP version setting
     *
     * The highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeOriginMaxHttpVersionSettingTest() throws Exception {
        SettingsOriginMaxHttpVersionBody body = null;
        String zoneIdentifier = null;
        InlineResponse200138 response = api.zoneSettingsChangeOriginMaxHttpVersionSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Polish setting
     *
     * Removes metadata and compresses your images for faster page load times. Basic (Lossless): Reduce the size of PNG, JPEG, and GIF files - no impact on visual quality. Basic + JPEG (Lossy): Further reduce the size of JPEG files for faster image loading. Larger JPEGs are converted to progressive images, loading a lower-resolution image first and ending in a higher-resolution version. Not recommended for hi-res photography sites.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangePolishSettingTest() throws Exception {
        SettingsPolishBody body = null;
        String zoneIdentifier = null;
        InlineResponse200139 response = api.zoneSettingsChangePolishSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change prefetch preload setting
     *
     * Cloudflare will prefetch any URLs that are included in the response headers. This is limited to Enterprise Zones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangePrefetchPreloadSettingTest() throws Exception {
        SettingsPrefetchPreloadBody body = null;
        String zoneIdentifier = null;
        InlineResponse200140 response = api.zoneSettingsChangePrefetchPreloadSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Privacy Pass setting
     *
     * Privacy Pass is a browser extension developed by the Privacy Pass Team to improve the browsing experience for your visitors. Enabling Privacy Pass will reduce the number of CAPTCHAs shown to your visitors. (https://support.cloudflare.com/hc/en-us/articles/115001992652-Privacy-Pass).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangePrivacyPassSettingTest() throws Exception {
        SettingsPrivacyPassBody body = null;
        String zoneIdentifier = null;
        InlineResponse200141 response = api.zoneSettingsChangePrivacyPassSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Proxy Read Timeout setting
     *
     * Maximum time between two read operations from origin.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeProxyReadTimeoutSettingTest() throws Exception {
        SettingsProxyReadTimeoutBody body = null;
        String zoneIdentifier = null;
        InlineResponse200142 response = api.zoneSettingsChangeProxyReadTimeoutSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Pseudo IPv4 setting
     *
     * Value of the Pseudo IPv4 setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangePseudoIPv4SettingTest() throws Exception {
        SettingsPseudoIpv4Body body = null;
        String zoneIdentifier = null;
        InlineResponse200143 response = api.zoneSettingsChangePseudoIPv4Setting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Response Buffering setting
     *
     * Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeResponseBufferingSettingTest() throws Exception {
        SettingsResponseBufferingBody body = null;
        String zoneIdentifier = null;
        InlineResponse200144 response = api.zoneSettingsChangeResponseBufferingSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Rocket Loader setting
     *
     * Rocket Loader is a general-purpose asynchronous JavaScript optimisation that prioritises rendering your content while loading your site&#x27;s Javascript asynchronously. Turning on Rocket Loader will immediately improve a web page&#x27;s rendering time sometimes measured as Time to First Paint (TTFP), and also the &#x60;window.onload&#x60; time (assuming there is JavaScript on the page). This can have a positive impact on your Google search ranking. When turned on, Rocket Loader will automatically defer the loading of all Javascript referenced in your HTML, with no configuration required. Refer to [Understanding Rocket Loader](https://support.cloudflare.com/hc/articles/200168056) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeRocketLoaderSettingTest() throws Exception {
        SettingsRocketLoaderBody body = null;
        String zoneIdentifier = null;
        InlineResponse200145 response = api.zoneSettingsChangeRocketLoaderSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Security Header (HSTS) setting
     *
     * Cloudflare security header for a zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeSecurityHeaderHstsSettingTest() throws Exception {
        SettingsSecurityHeaderBody body = null;
        String zoneIdentifier = null;
        InlineResponse200146 response = api.zoneSettingsChangeSecurityHeaderHstsSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Security Level setting
     *
     * Choose the appropriate security profile for your website, which will automatically adjust each of the security settings. If you choose to customize an individual security setting, the profile will become Custom. (https://support.cloudflare.com/hc/en-us/articles/200170056).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeSecurityLevelSettingTest() throws Exception {
        SettingsSecurityLevelBody body = null;
        String zoneIdentifier = null;
        InlineResponse200147 response = api.zoneSettingsChangeSecurityLevelSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Server Side Exclude setting
     *
     * If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: &lt;!--sse--&gt;&lt;!--/sse--&gt;. For example: &lt;!--sse--&gt;  Bad visitors won&#x27;t see my phone number, 555-555-5555 &lt;!--/sse--&gt;. Note: SSE only will work with HTML. If you have HTML minification enabled, you won&#x27;t see the SSE tags in your HTML source when it&#x27;s served through Cloudflare. SSE will still function in this case, as Cloudflare&#x27;s HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor&#x27;s computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeServerSideExcludeSettingTest() throws Exception {
        SettingsServerSideExcludeBody body = null;
        String zoneIdentifier = null;
        InlineResponse200148 response = api.zoneSettingsChangeServerSideExcludeSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change SSL setting
     *
     * SSL encrypts your visitor&#x27;s connection and safeguards credit card numbers and other personal data to and from your website. SSL can take up to 5 minutes to fully activate. Requires Cloudflare active on your root domain or www domain. Off: no SSL between the visitor and Cloudflare, and no SSL between Cloudflare and your web server  (all HTTP traffic). Flexible: SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, but no SSL between Cloudflare and your web server. You don&#x27;t need to have an SSL cert on your web server, but your vistors will still see the site as being HTTPS enabled. Full:  SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#x27;ll need to have your own SSL cert or self-signed cert at the very least. Full (Strict): SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#x27;ll need to have a valid SSL certificate installed on your web server. This certificate must be signed by a certificate authority, have an expiration date in the future, and respond for the request domain name (hostname). (https://support.cloudflare.com/hc/en-us/articles/200170416).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeSslSettingTest() throws Exception {
        SettingsSslBody body = null;
        String zoneIdentifier = null;
        InlineResponse200150 response = api.zoneSettingsChangeSslSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change SSL/TLS Recommender enrollment
     *
     * Enrollment in the SSL/TLS Recommender service which tries to detect and recommend (by sending periodic emails) the most secure SSL/TLS setting your origin servers support.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeSslTlsRecommenderEnrollmentTest() throws Exception {
        SettingsSslRecommenderBody body = null;
        String zoneIdentifier = null;
        InlineResponse200151 response = api.zoneSettingsChangeSslTlsRecommenderEnrollment(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change TLS 1.3 setting
     *
     * Changes TLS 1.3 setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeTls13SettingTest() throws Exception {
        SettingsTls13Body body = null;
        String zoneIdentifier = null;
        InlineResponse200152 response = api.zoneSettingsChangeTls13Setting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change TLS Client Auth setting
     *
     * TLS Client Auth requires Cloudflare to connect to your origin server using a client certificate (Enterprise Only).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeTlsClientAuthSettingTest() throws Exception {
        SettingsTlsClientAuthBody body = null;
        String zoneIdentifier = null;
        InlineResponse200153 response = api.zoneSettingsChangeTlsClientAuthSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change True Client IP setting
     *
     * Allows customer to continue to use True Client IP (Akamai feature) in the headers we send to the origin. This is limited to Enterprise Zones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeTrueClientIpSettingTest() throws Exception {
        SettingsTrueClientIpHeaderBody body = null;
        String zoneIdentifier = null;
        InlineResponse200154 response = api.zoneSettingsChangeTrueClientIpSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change Web Application Firewall (WAF) setting
     *
     * The WAF examines HTTP requests to your website.  It inspects both GET and POST requests and applies rules to help filter out illegitimate traffic from legitimate website visitors. The Cloudflare WAF inspects website addresses or URLs to detect anything out of the ordinary. If the Cloudflare WAF determines suspicious user behavior, then the WAF will &#x27;challenge&#x27; the web visitor with a page that asks them to submit a CAPTCHA successfully  to continue their action. If the challenge is failed, the action will be stopped. What this means is that Cloudflare&#x27;s WAF will block any traffic identified as illegitimate before it reaches your origin web server. (https://support.cloudflare.com/hc/en-us/articles/200172016).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeWebApplicationFirewallWafSettingTest() throws Exception {
        SettingsWafBody body = null;
        String zoneIdentifier = null;
        InlineResponse200155 response = api.zoneSettingsChangeWebApplicationFirewallWafSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change WebP setting
     *
     * When the client requesting the image supports the WebP image codec, and WebP offers a performance advantage over the original image format, Cloudflare will serve a WebP version of the original image.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeWebPSettingTest() throws Exception {
        SettingsWebpBody body = null;
        String zoneIdentifier = null;
        InlineResponse200156 response = api.zoneSettingsChangeWebPSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Change WebSockets setting
     *
     * Changes Websockets setting. For more information about Websockets, please refer to [Using Cloudflare with WebSockets](https://support.cloudflare.com/hc/en-us/articles/200169466-Using-Cloudflare-with-WebSockets).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsChangeWebSocketsSettingTest() throws Exception {
        SettingsWebsocketsBody body = null;
        String zoneIdentifier = null;
        InlineResponse200157 response = api.zoneSettingsChangeWebSocketsSetting(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Edit zone settings info
     *
     * Edit settings for a zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsEditZoneSettingsInfoTest() throws Exception {
        ZoneIdentifierSettingsBody body = null;
        String zoneIdentifier = null;
        ZoneSettingsResponseCollection response = api.zoneSettingsEditZoneSettingsInfo(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get 0-RTT session resumption setting
     *
     * Gets 0-RTT session resumption setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGet0RttSessionResumptionSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200107 response = api.zoneSettingsGet0RttSessionResumptionSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Advanced DDOS setting
     *
     * Advanced protection from Distributed Denial of Service (DDoS) attacks on your website. This is an uneditable value that is &#x27;on&#x27; in the case of Business and Enterprise zones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetAdvancedDdosSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200108 response = api.zoneSettingsGetAdvancedDdosSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get all Zone settings
     *
     * Available settings for your user in relation to a zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetAllZoneSettingsTest() throws Exception {
        String zoneIdentifier = null;
        ZoneSettingsResponseCollection response = api.zoneSettingsGetAllZoneSettings(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Always Online setting
     *
     * When enabled, Cloudflare serves limited copies of web pages available from the [Internet Archive&#x27;s Wayback Machine](https://archive.org/web/) if your server is offline. Refer to [Always Online](https://developers.cloudflare.com/cache/about/always-online) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetAlwaysOnlineSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200109 response = api.zoneSettingsGetAlwaysOnlineSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Always Use HTTPS setting
     *
     * Reply to all requests for URLs that use \&quot;http\&quot; with a 301 redirect to the equivalent \&quot;https\&quot; URL. If you only want to redirect for a subset of requests, consider creating an \&quot;Always use HTTPS\&quot; page rule.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetAlwaysUseHttpsSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200110 response = api.zoneSettingsGetAlwaysUseHttpsSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Automatic HTTPS Rewrites setting
     *
     * Enable the Automatic HTTPS Rewrites feature for this zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetAutomaticHttpsRewritesSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200111 response = api.zoneSettingsGetAutomaticHttpsRewritesSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Automatic Platform Optimization for WordPress settings
     *
     * [Automatic Platform Optimization for WordPress](https://developers.cloudflare.com/automatic-platform-optimization/) serves your WordPress site from Cloudflare&#x27;s edge network and caches third-party fonts.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetAutomaticPlatformOptimizationForWordPressSettingsTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200112 response = api.zoneSettingsGetAutomaticPlatformOptimizationForWordPressSettings(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Brotli setting
     *
     * When the client requesting an asset supports the Brotli compression algorithm, Cloudflare will serve a Brotli compressed version of the asset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetBrotliSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200113 response = api.zoneSettingsGetBrotliSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Browser Cache TTL setting
     *
     * Browser Cache TTL (in seconds) specifies how long Cloudflare-cached resources will remain on your visitors&#x27; computers. Cloudflare will honor any larger times specified by your server. (https://support.cloudflare.com/hc/en-us/articles/200168276).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetBrowserCacheTtlSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200114 response = api.zoneSettingsGetBrowserCacheTtlSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Browser Check setting
     *
     * Browser Integrity Check is similar to Bad Behavior and looks for common HTTP headers abused most commonly by spammers and denies access to your page.  It will also challenge visitors that do not have a user agent or a non standard user agent (also commonly used by abuse bots, crawlers or visitors). (https://support.cloudflare.com/hc/en-us/articles/200170086).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetBrowserCheckSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200115 response = api.zoneSettingsGetBrowserCheckSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Cache Level setting
     *
     * Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetCacheLevelSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200116 response = api.zoneSettingsGetCacheLevelSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Challenge TTL setting
     *
     * Specify how long a visitor is allowed access to your site after successfully completing a challenge (such as a CAPTCHA). After the TTL has expired the visitor will have to complete a new challenge. We recommend a 15 - 45 minute setting and will attempt to honor any setting above 45 minutes. (https://support.cloudflare.com/hc/en-us/articles/200170136).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetChallengeTtlSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200117 response = api.zoneSettingsGetChallengeTtlSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get ciphers setting
     *
     * Gets ciphers setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetCiphersSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200118 response = api.zoneSettingsGetCiphersSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Development Mode setting
     *
     * Development Mode temporarily allows you to enter development mode for your websites if you need to make changes to your site. This will bypass Cloudflare&#x27;s accelerated cache and slow down your site, but is useful if you are making changes to cacheable content (like images, css, or JavaScript) and would like to see those changes right away. Once entered, development mode will last for 3 hours and then automatically toggle off.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetDevelopmentModeSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200119 response = api.zoneSettingsGetDevelopmentModeSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Early Hints setting
     *
     * When enabled, Cloudflare will attempt to speed up overall page loads by serving &#x60;103&#x60; responses with &#x60;Link&#x60; headers from the final response. Refer to [Early Hints](https://developers.cloudflare.com/cache/about/early-hints) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetEarlyHintsSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200120 response = api.zoneSettingsGetEarlyHintsSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Email Obfuscation setting
     *
     * Encrypt email adresses on your web page from bots, while keeping them visible to humans. (https://support.cloudflare.com/hc/en-us/articles/200170016).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetEmailObfuscationSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200121 response = api.zoneSettingsGetEmailObfuscationSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Enable Error Pages On setting
     *
     * Cloudflare will proxy customer error pages on any 502,504 errors on origin server instead of showing a default Cloudflare error page. This does not apply to 522 errors and is limited to Enterprise Zones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetEnableErrorPagesOnSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200137 response = api.zoneSettingsGetEnableErrorPagesOnSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Enable Query String Sort setting
     *
     * Cloudflare will treat files with the same query strings as the same file in cache, regardless of the order of the query strings. This is limited to Enterprise Zones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetEnableQueryStringSortSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200149 response = api.zoneSettingsGetEnableQueryStringSortSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get HTTP2 setting
     *
     * Value of the HTTP2 setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetHTTP2SettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200124 response = api.zoneSettingsGetHTTP2Setting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get HTTP3 setting
     *
     * Value of the HTTP3 setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetHTTP3SettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200125 response = api.zoneSettingsGetHTTP3Setting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Hotlink Protection setting
     *
     * When enabled, the Hotlink Protection option ensures that other sites cannot suck up your bandwidth by building pages that use images hosted on your site. Anytime a request for an image on your site hits Cloudflare, we check to ensure that it&#x27;s not another site requesting them. People will still be able to download and view images from your page, but other sites won&#x27;t be able to steal them for use on their own pages. (https://support.cloudflare.com/hc/en-us/articles/200170026).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetHotlinkProtectionSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200123 response = api.zoneSettingsGetHotlinkProtectionSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get HTTP/2 Edge Prioritization setting
     *
     * Gets HTTP/2 Edge Prioritization setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetHttp2EdgePrioritizationSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200122 response = api.zoneSettingsGetHttp2EdgePrioritizationSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get IPv6 setting
     *
     * Enable IPv6 on all subdomains that are Cloudflare enabled.  (https://support.cloudflare.com/hc/en-us/articles/200168586).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetIPv6SettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200128 response = api.zoneSettingsGetIPv6Setting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Image Resizing setting
     *
     * Image Resizing provides on-demand resizing, conversion and optimisation for images served through Cloudflare&#x27;s network. Refer to the [Image Resizing documentation](https://developers.cloudflare.com/images/) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetImageResizingSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200126 response = api.zoneSettingsGetImageResizingSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get IP Geolocation setting
     *
     * Enable IP Geolocation to have Cloudflare geolocate visitors to your website and pass the country code to you. (https://support.cloudflare.com/hc/en-us/articles/200168236).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetIpGeolocationSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200127 response = api.zoneSettingsGetIpGeolocationSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Minify setting
     *
     * Automatically minify certain assets for your website. Refer to [Using Cloudflare Auto Minify](https://support.cloudflare.com/hc/en-us/articles/200168196) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetMinifySettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200130 response = api.zoneSettingsGetMinifySetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Minimum TLS Version setting
     *
     * Gets Minimum TLS Version setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetMinimumTlsVersionSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200129 response = api.zoneSettingsGetMinimumTlsVersionSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Mirage setting
     *
     * Automatically optimize image loading for website visitors on mobile devices. Refer to [our blog post](http://blog.cloudflare.com/mirage2-solving-mobile-speed) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetMirageSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200131 response = api.zoneSettingsGetMirageSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Mobile Redirect setting
     *
     * Automatically redirect visitors on mobile devices to a mobile-optimized subdomain. Refer to [Understanding Cloudflare Mobile Redirect](https://support.cloudflare.com/hc/articles/200168336) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetMobileRedirectSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200132 response = api.zoneSettingsGetMobileRedirectSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Network Error Logging setting
     *
     * Enable Network Error Logging reporting on your zone. (Beta) 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetNetworkErrorLoggingSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200133 response = api.zoneSettingsGetNetworkErrorLoggingSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Opportunistic Encryption setting
     *
     * Gets Opportunistic Encryption setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetOpportunisticEncryptionSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200134 response = api.zoneSettingsGetOpportunisticEncryptionSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Opportunistic Onion setting
     *
     * Add an Alt-Svc header to all legitimate requests from Tor, allowing the connection to use our onion services instead of exit nodes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetOpportunisticOnionSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200135 response = api.zoneSettingsGetOpportunisticOnionSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Orange to Orange (O2O)
     *
     * Orange to Orange (O2O) allows zones on Cloudflare to CNAME to other zones also on Cloudflare.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetOrangeToOrangeO2OTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200136 response = api.zoneSettingsGetOrangeToOrangeO2O(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Origin Max HTTP version setting
     *
     * Value of the Origin Max HTTP version setting (Note that the default value for Enterprise is \&quot;1\&quot;).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetOriginMaxHttpVersionSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200138 response = api.zoneSettingsGetOriginMaxHttpVersionSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Polish setting
     *
     * Removes metadata and compresses your images for faster page load times. Basic (Lossless): Reduce the size of PNG, JPEG, and GIF files - no impact on visual quality. Basic + JPEG (Lossy): Further reduce the size of JPEG files for faster image loading. Larger JPEGs are converted to progressive images, loading a lower-resolution image first and ending in a higher-resolution version. Not recommended for hi-res photography sites.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetPolishSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200139 response = api.zoneSettingsGetPolishSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get prefetch preload setting
     *
     * Cloudflare will prefetch any URLs that are included in the response headers. This is limited to Enterprise Zones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetPrefetchPreloadSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200140 response = api.zoneSettingsGetPrefetchPreloadSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Privacy Pass setting
     *
     * Privacy Pass is a browser extension developed by the Privacy Pass Team to improve the browsing experience for your visitors. Enabling Privacy Pass will reduce the number of CAPTCHAs shown to your visitors. (https://support.cloudflare.com/hc/en-us/articles/115001992652-Privacy-Pass).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetPrivacyPassSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200141 response = api.zoneSettingsGetPrivacyPassSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Proxy Read Timeout setting
     *
     * Maximum time between two read operations from origin.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetProxyReadTimeoutSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200142 response = api.zoneSettingsGetProxyReadTimeoutSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Pseudo IPv4 setting
     *
     * Value of the Pseudo IPv4 setting.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetPseudoIPv4SettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200143 response = api.zoneSettingsGetPseudoIPv4Setting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Response Buffering setting
     *
     * Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetResponseBufferingSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200144 response = api.zoneSettingsGetResponseBufferingSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Rocket Loader setting
     *
     * Rocket Loader is a general-purpose asynchronous JavaScript optimisation that prioritises rendering your content while loading your site&#x27;s Javascript asynchronously. Turning on Rocket Loader will immediately improve a web page&#x27;s rendering time sometimes measured as Time to First Paint (TTFP), and also the &#x60;window.onload&#x60; time (assuming there is JavaScript on the page). This can have a positive impact on your Google search ranking. When turned on, Rocket Loader will automatically defer the loading of all Javascript referenced in your HTML, with no configuration required. Refer to [Understanding Rocket Loader](https://support.cloudflare.com/hc/articles/200168056) for more information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetRocketLoaderSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200145 response = api.zoneSettingsGetRocketLoaderSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Security Header (HSTS) setting
     *
     * Cloudflare security header for a zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetSecurityHeaderHstsSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200146 response = api.zoneSettingsGetSecurityHeaderHstsSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Security Level setting
     *
     * Choose the appropriate security profile for your website, which will automatically adjust each of the security settings. If you choose to customize an individual security setting, the profile will become Custom. (https://support.cloudflare.com/hc/en-us/articles/200170056).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetSecurityLevelSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200147 response = api.zoneSettingsGetSecurityLevelSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Server Side Exclude setting
     *
     * If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: &lt;!--sse--&gt;&lt;!--/sse--&gt;. For example: &lt;!--sse--&gt;  Bad visitors won&#x27;t see my phone number, 555-555-5555 &lt;!--/sse--&gt;. Note: SSE only will work with HTML. If you have HTML minification enabled, you won&#x27;t see the SSE tags in your HTML source when it&#x27;s served through Cloudflare. SSE will still function in this case, as Cloudflare&#x27;s HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor&#x27;s computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetServerSideExcludeSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200148 response = api.zoneSettingsGetServerSideExcludeSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get SSL setting
     *
     * SSL encrypts your visitor&#x27;s connection and safeguards credit card numbers and other personal data to and from your website. SSL can take up to 5 minutes to fully activate. Requires Cloudflare active on your root domain or www domain. Off: no SSL between the visitor and Cloudflare, and no SSL between Cloudflare and your web server  (all HTTP traffic). Flexible: SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, but no SSL between Cloudflare and your web server. You don&#x27;t need to have an SSL cert on your web server, but your vistors will still see the site as being HTTPS enabled. Full:  SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#x27;ll need to have your own SSL cert or self-signed cert at the very least. Full (Strict): SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#x27;ll need to have a valid SSL certificate installed on your web server. This certificate must be signed by a certificate authority, have an expiration date in the future, and respond for the request domain name (hostname). (https://support.cloudflare.com/hc/en-us/articles/200170416).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetSslSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200150 response = api.zoneSettingsGetSslSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get SSL/TLS Recommender enrollment
     *
     * Enrollment in the SSL/TLS Recommender service which tries to detect and recommend (by sending periodic emails) the most secure SSL/TLS setting your origin servers support.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetSslTlsRecommenderEnrollmentTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200151 response = api.zoneSettingsGetSslTlsRecommenderEnrollment(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get TLS 1.3 setting enabled for a zone
     *
     * Gets TLS 1.3 setting enabled for a zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetTls13SettingEnabledForAZoneTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200152 response = api.zoneSettingsGetTls13SettingEnabledForAZone(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get TLS Client Auth setting
     *
     * TLS Client Auth requires Cloudflare to connect to your origin server using a client certificate (Enterprise Only).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetTlsClientAuthSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200153 response = api.zoneSettingsGetTlsClientAuthSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get True Client IP setting
     *
     * Allows customer to continue to use True Client IP (Akamai feature) in the headers we send to the origin. This is limited to Enterprise Zones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetTrueClientIpSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200154 response = api.zoneSettingsGetTrueClientIpSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Web Application Firewall (WAF) setting
     *
     * The WAF examines HTTP requests to your website.  It inspects both GET and POST requests and applies rules to help filter out illegitimate traffic from legitimate website visitors. The Cloudflare WAF inspects website addresses or URLs to detect anything out of the ordinary. If the Cloudflare WAF determines suspicious user behavior, then the WAF will &#x27;challenge&#x27; the web visitor with a page that asks them to submit a CAPTCHA successfully  to continue their action. If the challenge is failed, the action will be stopped. What this means is that Cloudflare&#x27;s WAF will block any traffic identified as illegitimate before it reaches your origin web server. (https://support.cloudflare.com/hc/en-us/articles/200172016).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetWebApplicationFirewallWafSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200155 response = api.zoneSettingsGetWebApplicationFirewallWafSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get WebP setting
     *
     * When the client requesting the image supports the WebP image codec, and WebP offers a performance advantage over the original image format, Cloudflare will serve a WebP version of the original image.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetWebPSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200156 response = api.zoneSettingsGetWebPSetting(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get WebSockets setting
     *
     * Gets Websockets setting. For more information about Websockets, please refer to [Using Cloudflare with WebSockets](https://support.cloudflare.com/hc/en-us/articles/200169466-Using-Cloudflare-with-WebSockets).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneSettingsGetWebSocketsSettingTest() throws Exception {
        String zoneIdentifier = null;
        InlineResponse200157 response = api.zoneSettingsGetWebSocketsSetting(zoneIdentifier);

        // TODO: test validations
    }
}
