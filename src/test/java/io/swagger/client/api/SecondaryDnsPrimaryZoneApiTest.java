/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CloudflareClientAPISchemasIdResponse;
import io.swagger.client.model.DisableTransferResponse;
import io.swagger.client.model.DnsSecondaryPrimaryZoneComponentsSchemasIdentifier;
import io.swagger.client.model.EnableTransferResponse;
import io.swagger.client.model.InlineResponse4xx348;
import io.swagger.client.model.InlineResponse4xx349;
import io.swagger.client.model.InlineResponse4xx350;
import io.swagger.client.model.InlineResponse4xx351;
import io.swagger.client.model.InlineResponse4xx352;
import io.swagger.client.model.SchemasForceResponse;
import io.swagger.client.model.SingleRequestOutgoing;
import io.swagger.client.model.SingleResponseOutgoing;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for SecondaryDnsPrimaryZoneApi
 */
@Ignore
public class SecondaryDnsPrimaryZoneApiTest {

    private final SecondaryDnsPrimaryZoneApi api = new SecondaryDnsPrimaryZoneApi();

    /**
     * Create Primary Zone Configuration
     *
     * Create primary zone configuration for outgoing zone transfers.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationTest() throws Exception {
        SingleRequestOutgoing body = null;
        DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier = null;
        SingleResponseOutgoing response = api.secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(body, identifier);

        // TODO: test validations
    }
    /**
     * Delete Primary Zone Configuration
     *
     * Delete primary zone configuration for outgoing zone transfers.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationTest() throws Exception {
        DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier = null;
        CloudflareClientAPISchemasIdResponse response = api.secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(identifier);

        // TODO: test validations
    }
    /**
     * Disable Outgoing Zone Transfers
     *
     * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersTest() throws Exception {
        DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier = null;
        DisableTransferResponse response = api.secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(identifier);

        // TODO: test validations
    }
    /**
     * Enable Outgoing Zone Transfers
     *
     * Enable outgoing zone transfers for primary zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersTest() throws Exception {
        DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier = null;
        EnableTransferResponse response = api.secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(identifier);

        // TODO: test validations
    }
    /**
     * Force DNS NOTIFY
     *
     * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneForceDnsNotifyTest() throws Exception {
        DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier = null;
        SchemasForceResponse response = api.secondaryDnsPrimaryZoneForceDnsNotify(identifier);

        // TODO: test validations
    }
    /**
     * Get Outgoing Zone Transfer Status
     *
     * Get primary zone transfer status.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusTest() throws Exception {
        DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier = null;
        EnableTransferResponse response = api.secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(identifier);

        // TODO: test validations
    }
    /**
     * Primary Zone Configuration Details
     *
     * Get primary zone configuration for outgoing zone transfers.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsTest() throws Exception {
        DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier = null;
        SingleResponseOutgoing response = api.secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(identifier);

        // TODO: test validations
    }
    /**
     * Update Primary Zone Configuration
     *
     * Update primary zone configuration for outgoing zone transfers.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationTest() throws Exception {
        SingleRequestOutgoing body = null;
        DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier = null;
        SingleResponseOutgoing response = api.secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(body, identifier);

        // TODO: test validations
    }
}
