/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.FieldsResponse;
import io.swagger.client.model.FlagResponse;
import io.swagger.client.model.InlineResponse4xx414;
import io.swagger.client.model.InlineResponse4xx415;
import io.swagger.client.model.InlineResponse4xx416;
import io.swagger.client.model.Logs;
import io.swagger.client.model.RetentionFlagBody;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for LogsReceivedApi
 */
@Ignore
public class LogsReceivedApiTest {

    private final LogsReceivedApi api = new LogsReceivedApi();

    /**
     * Get log retention flag
     *
     * Gets log retention flag for Logpull API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void logsReceivedGetLogRetentionFlagTest() throws Exception {
        String zoneIdentifier = null;
        FlagResponse response = api.logsReceivedGetLogRetentionFlag(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get logs RayIDs
     *
     * The &#x60;/rayids&#x60; api route allows lookups by specific rayid. The rayids route will return zero, one, or more records (ray ids are not unique).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void logsReceivedGetLogsRayIDsTest() throws Exception {
        String rayIdentifier = null;
        String zoneIdentifier = null;
        Logs response = api.logsReceivedGetLogsRayIDs(rayIdentifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get logs received
     *
     * The &#x60;/received&#x60; api route allows customers to retrieve their edge HTTP logs. The basic access pattern is \&quot;give me all the logs for zone Z for minute M\&quot;, where the minute M refers to the time records were received at Cloudflare&#x27;s central data center. &#x60;start&#x60; is inclusive, and &#x60;end&#x60; is exclusive. Because of that, to get all data, at minutely cadence, starting at 10AM, the proper values are: &#x60;start&#x3D;2018-05-20T10:00:00Z&amp;end&#x3D;2018-05-20T10:01:00Z&#x60;, then &#x60;start&#x3D;2018-05-20T10:01:00Z&amp;end&#x3D;2018-05-20T10:02:00Z&#x60; and so on; the overlap will be handled properly.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void logsReceivedGetLogsReceivedTest() throws Exception {
        String zoneIdentifier = null;
        Logs response = api.logsReceivedGetLogsReceived(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List fields
     *
     * Lists all fields available. The response is json object with key-value pairs, where keys are field names, and values are descriptions.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void logsReceivedListFieldsTest() throws Exception {
        String zoneIdentifier = null;
        FieldsResponse response = api.logsReceivedListFields(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update log retention flag
     *
     * Updates log retention flag for Logpull API.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void logsReceivedUpdateLogRetentionFlagTest() throws Exception {
        RetentionFlagBody body = null;
        String zoneIdentifier = null;
        FlagResponse response = api.logsReceivedUpdateLogRetentionFlag(body, zoneIdentifier);

        // TODO: test validations
    }
}
