/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CertificateResponseSingle;
import io.swagger.client.model.ComponentsSchemasCertificateResponseCollection;
import io.swagger.client.model.EnabledResponse;
import io.swagger.client.model.InlineResponse4xx366;
import io.swagger.client.model.InlineResponse4xx417;
import io.swagger.client.model.InlineResponse4xx422;
import io.swagger.client.model.OriginTlsClientAuthSettingsBody;
import io.swagger.client.model.ZoneIdentifierOriginTlsClientAuthBody;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ZoneLevelAuthenticatedOriginPullsApi
 */
@Ignore
public class ZoneLevelAuthenticatedOriginPullsApiTest {

    private final ZoneLevelAuthenticatedOriginPullsApi api = new ZoneLevelAuthenticatedOriginPullsApi();

    /**
     * Delete Certificate
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneLevelAuthenticatedOriginPullsDeleteCertificateTest() throws Exception {
        String identifier = null;
        String zoneIdentifier = null;
        CertificateResponseSingle response = api.zoneLevelAuthenticatedOriginPullsDeleteCertificate(identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Certificate Details
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneLevelAuthenticatedOriginPullsGetCertificateDetailsTest() throws Exception {
        String identifier = null;
        String zoneIdentifier = null;
        CertificateResponseSingle response = api.zoneLevelAuthenticatedOriginPullsGetCertificateDetails(identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Get Enablement Setting for Zone
     *
     * Get whether zone-level authenticated origin pulls is enabled or not. It is false by default.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZoneTest() throws Exception {
        String zoneIdentifier = null;
        EnabledResponse response = api.zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZone(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List Certificates
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneLevelAuthenticatedOriginPullsListCertificatesTest() throws Exception {
        String zoneIdentifier = null;
        ComponentsSchemasCertificateResponseCollection response = api.zoneLevelAuthenticatedOriginPullsListCertificates(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Set Enablement for Zone
     *
     * Enable or disable zone-level authenticated origin pulls. &#x27;enabled&#x27; should be set true either before/after the certificate is uploaded to see the certificate in use.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneLevelAuthenticatedOriginPullsSetEnablementForZoneTest() throws Exception {
        OriginTlsClientAuthSettingsBody body = null;
        String zoneIdentifier = null;
        EnabledResponse response = api.zoneLevelAuthenticatedOriginPullsSetEnablementForZone(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Upload Certificate
     *
     * Upload your own certificate you want Cloudflare to use for edge-to-origin communication to override the shared certificate. Please note that it is important to keep only one certificate active. Also, make sure to enable zone-level authenticated origin pulls by making a PUT call to settings endpoint to see the uploaded certificate in use.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneLevelAuthenticatedOriginPullsUploadCertificateTest() throws Exception {
        ZoneIdentifierOriginTlsClientAuthBody body = null;
        String zoneIdentifier = null;
        CertificateResponseSingle response = api.zoneLevelAuthenticatedOriginPullsUploadCertificate(body, zoneIdentifier);

        // TODO: test validations
    }
}
