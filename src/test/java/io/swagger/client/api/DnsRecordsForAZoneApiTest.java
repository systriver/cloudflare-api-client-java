/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.DnsRecordsIdentifierBody;
import io.swagger.client.model.DnsRecordsIdentifierBody1;
import io.swagger.client.model.DnsResponseCollection;
import io.swagger.client.model.DnsResponseImportScan;
import io.swagger.client.model.DnsResponseSingle;
import io.swagger.client.model.InlineResponse200101;
import io.swagger.client.model.InlineResponse4xx373;
import io.swagger.client.model.InlineResponse4xx374;
import io.swagger.client.model.InlineResponse4xx375;
import io.swagger.client.model.InlineResponse4xx376;
import io.swagger.client.model.InlineResponse4xx6;
import io.swagger.client.model.ZoneIdentifierDnsRecordsBody;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DnsRecordsForAZoneApi
 */
@Ignore
public class DnsRecordsForAZoneApiTest {

    private final DnsRecordsForAZoneApi api = new DnsRecordsForAZoneApi();

    /**
     * Create DNS Record
     *
     * Create a new DNS record for a zone. See the record object definitions for required attributes for each record type.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneCreateDnsRecordTest() throws Exception {
        ZoneIdentifierDnsRecordsBody body = null;
        String zoneIdentifier = null;
        DnsResponseSingle response = api.dnsRecordsForAZoneCreateDnsRecord(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Delete DNS Record
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneDeleteDnsRecordTest() throws Exception {
        String identifier = null;
        String zoneIdentifier = null;
        InlineResponse200101 response = api.dnsRecordsForAZoneDeleteDnsRecord(identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * DNS Record Details
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneDnsRecordDetailsTest() throws Exception {
        String identifier = null;
        String zoneIdentifier = null;
        DnsResponseSingle response = api.dnsRecordsForAZoneDnsRecordDetails(identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Export DNS Records
     *
     * You can export your [BIND config](https://en.wikipedia.org/wiki/Zone_file \&quot;Zone file\&quot;) through this endpoint.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneExportDnsRecordsTest() throws Exception {
        String zoneIdentifier = null;
        Object response = api.dnsRecordsForAZoneExportDnsRecords(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Import DNS Records
     *
     * You can upload your [BIND config](https://en.wikipedia.org/wiki/Zone_file \&quot;Zone file\&quot;) through this endpoint. It assumes that cURL is called from a location with bind_config.txt (valid BIND config) present.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneImportDnsRecordsTest() throws Exception {
        String file = null;
        Boolean proxied = null;
        String zoneIdentifier = null;
        DnsResponseImportScan response = api.dnsRecordsForAZoneImportDnsRecords(file, proxied, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List DNS Records
     *
     * List, search, sort, and filter a zones&#x27; DNS records.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneListDnsRecordsTest() throws Exception {
        String zoneIdentifier = null;
        DnsResponseCollection response = api.dnsRecordsForAZoneListDnsRecords(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Patch DNS Record
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void dnsRecordsForAZonePatchDnsRecordTest() throws Exception {
        DnsRecordsIdentifierBody1 body = null;
        String identifier = null;
        String zoneIdentifier = null;
        DnsResponseSingle response = api.dnsRecordsForAZonePatchDnsRecord(body, identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Scan DNS Records
     *
     * Scan for common DNS records on your domain and automatically add them to your zone. Useful if you haven&#x27;t updated your nameservers yet.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneScanDnsRecordsTest() throws Exception {
        String zoneIdentifier = null;
        DnsResponseImportScan response = api.dnsRecordsForAZoneScanDnsRecords(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update DNS Record
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneUpdateDnsRecordTest() throws Exception {
        DnsRecordsIdentifierBody body = null;
        String identifier = null;
        String zoneIdentifier = null;
        DnsResponseSingle response = api.dnsRecordsForAZoneUpdateDnsRecord(body, identifier, zoneIdentifier);

        // TODO: test validations
    }
}
