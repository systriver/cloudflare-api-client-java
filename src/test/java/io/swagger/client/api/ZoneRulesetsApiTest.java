/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CreateRuleset;
import io.swagger.client.model.CreateUpdateRule;
import io.swagger.client.model.InlineResponse4xx217;
import io.swagger.client.model.InlineResponse4xx218;
import io.swagger.client.model.RulesetResponse;
import io.swagger.client.model.RulesetsResponse;
import io.swagger.client.model.UpdateRuleset;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ZoneRulesetsApi
 */
@Ignore
public class ZoneRulesetsApiTest {

    private final ZoneRulesetsApi api = new ZoneRulesetsApi();

    /**
     * Create a zone ruleset
     *
     * Creates a ruleset at the zone level.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsCreateAZoneRulesetTest() throws Exception {
        CreateRuleset body = null;
        String zoneId = null;
        RulesetResponse response = api.zoneRulesetsCreateAZoneRuleset(body, zoneId);

        // TODO: test validations
    }
    /**
     * Create a zone ruleset rule
     *
     * Adds a new rule to a zone ruleset. The rule will be added to the end of the existing list of rules in the ruleset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsCreateAZoneRulesetRuleTest() throws Exception {
        CreateUpdateRule body = null;
        String rulesetId = null;
        String zoneId = null;
        RulesetResponse response = api.zoneRulesetsCreateAZoneRulesetRule(body, rulesetId, zoneId);

        // TODO: test validations
    }
    /**
     * Delete a zone ruleset
     *
     * Deletes all versions of an existing zone ruleset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsDeleteAZoneRulesetTest() throws Exception {
        String rulesetId = null;
        String zoneId = null;
        api.zoneRulesetsDeleteAZoneRuleset(rulesetId, zoneId);

        // TODO: test validations
    }
    /**
     * Delete a zone ruleset rule
     *
     * Deletes an existing rule from a zone ruleset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsDeleteAZoneRulesetRuleTest() throws Exception {
        String ruleId = null;
        String rulesetId = null;
        String zoneId = null;
        RulesetResponse response = api.zoneRulesetsDeleteAZoneRulesetRule(ruleId, rulesetId, zoneId);

        // TODO: test validations
    }
    /**
     * Delete a zone ruleset version
     *
     * Deletes an existing version of a zone ruleset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsDeleteAZoneRulesetVersionTest() throws Exception {
        String rulesetVersion = null;
        String rulesetId = null;
        String zoneId = null;
        api.zoneRulesetsDeleteAZoneRulesetVersion(rulesetVersion, rulesetId, zoneId);

        // TODO: test validations
    }
    /**
     * Get a zone entry point ruleset
     *
     * Fetches the latest version of the zone entry point ruleset for a given phase.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsGetAZoneEntryPointRulesetTest() throws Exception {
        String rulesetPhase = null;
        String zoneId = null;
        RulesetResponse response = api.zoneRulesetsGetAZoneEntryPointRuleset(rulesetPhase, zoneId);

        // TODO: test validations
    }
    /**
     * Get a zone entry point ruleset version
     *
     * Fetches a specific version of a zone entry point ruleset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsGetAZoneEntryPointRulesetVersionTest() throws Exception {
        String rulesetVersion = null;
        String rulesetPhase = null;
        String zoneId = null;
        RulesetResponse response = api.zoneRulesetsGetAZoneEntryPointRulesetVersion(rulesetVersion, rulesetPhase, zoneId);

        // TODO: test validations
    }
    /**
     * Get a zone ruleset
     *
     * Fetches the latest version of a zone ruleset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsGetAZoneRulesetTest() throws Exception {
        String rulesetId = null;
        String zoneId = null;
        RulesetResponse response = api.zoneRulesetsGetAZoneRuleset(rulesetId, zoneId);

        // TODO: test validations
    }
    /**
     * Get a zone ruleset version
     *
     * Fetches a specific version of a zone ruleset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsGetAZoneRulesetVersionTest() throws Exception {
        String rulesetVersion = null;
        String rulesetId = null;
        String zoneId = null;
        RulesetResponse response = api.zoneRulesetsGetAZoneRulesetVersion(rulesetVersion, rulesetId, zoneId);

        // TODO: test validations
    }
    /**
     * List a zone entry point ruleset&#x27;s versions
     *
     * Fetches the versions of a zone entry point ruleset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsListAZoneEntryPointRulesetSVersionsTest() throws Exception {
        String rulesetPhase = null;
        String zoneId = null;
        RulesetsResponse response = api.zoneRulesetsListAZoneEntryPointRulesetSVersions(rulesetPhase, zoneId);

        // TODO: test validations
    }
    /**
     * List a zone ruleset&#x27;s versions
     *
     * Fetches the versions of a zone ruleset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsListAZoneRulesetSVersionsTest() throws Exception {
        String rulesetId = null;
        String zoneId = null;
        RulesetsResponse response = api.zoneRulesetsListAZoneRulesetSVersions(rulesetId, zoneId);

        // TODO: test validations
    }
    /**
     * List zone rulesets
     *
     * Fetches all rulesets at the zone level.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsListZoneRulesetsTest() throws Exception {
        String zoneId = null;
        RulesetsResponse response = api.zoneRulesetsListZoneRulesets(zoneId);

        // TODO: test validations
    }
    /**
     * Update a zone entry point ruleset
     *
     * Updates a zone entry point ruleset, creating a new version.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsUpdateAZoneEntryPointRulesetTest() throws Exception {
        UpdateRuleset body = null;
        String rulesetPhase = null;
        String zoneId = null;
        RulesetResponse response = api.zoneRulesetsUpdateAZoneEntryPointRuleset(body, rulesetPhase, zoneId);

        // TODO: test validations
    }
    /**
     * Update a zone ruleset
     *
     * Updates a zone ruleset, creating a new version.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsUpdateAZoneRulesetTest() throws Exception {
        UpdateRuleset body = null;
        String rulesetId = null;
        String zoneId = null;
        RulesetResponse response = api.zoneRulesetsUpdateAZoneRuleset(body, rulesetId, zoneId);

        // TODO: test validations
    }
    /**
     * Update a zone ruleset rule
     *
     * Updates an existing rule in a zone ruleset.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void zoneRulesetsUpdateAZoneRulesetRuleTest() throws Exception {
        CreateUpdateRule body = null;
        String ruleId = null;
        String rulesetId = null;
        String zoneId = null;
        RulesetResponse response = api.zoneRulesetsUpdateAZoneRulesetRule(body, ruleId, rulesetId, zoneId);

        // TODO: test validations
    }
}
