/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CloudflareClientAPIApiResponseSingleId;
import io.swagger.client.model.ComponentsSchemasCollectionResponse;
import io.swagger.client.model.ContentListDetailsResponse;
import io.swagger.client.model.ContentListEntryCollectionResponse;
import io.swagger.client.model.ContentListEntryCreateRequest;
import io.swagger.client.model.ContentListEntrySingleResponse;
import io.swagger.client.model.ContentListUpdateRequest;
import io.swagger.client.model.CreateRequest;
import io.swagger.client.model.InlineResponse4xx44;
import io.swagger.client.model.InlineResponse4xx502;
import io.swagger.client.model.InlineResponse4xx503;
import io.swagger.client.model.InlineResponse4xx504;
import io.swagger.client.model.InlineResponse4xx505;
import io.swagger.client.model.InlineResponse4xx506;
import io.swagger.client.model.ModifyRequest;
import io.swagger.client.model.Web3HostnameComponentsSchemasSingleResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for Web3HostnameApi
 */
@Ignore
public class Web3HostnameApiTest {

    private final Web3HostnameApi api = new Web3HostnameApi();

    /**
     * Create IPFS Universal Path Gateway Content List Entry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameCreateIpfsUniversalPathGatewayContentListEntryTest() throws Exception {
        ContentListEntryCreateRequest body = null;
        String identifier = null;
        String zoneIdentifier = null;
        ContentListEntrySingleResponse response = api.web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(body, identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Create Web3 Hostname
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameCreateWeb3HostnameTest() throws Exception {
        CreateRequest body = null;
        String zoneIdentifier = null;
        Web3HostnameComponentsSchemasSingleResponse response = api.web3HostnameCreateWeb3Hostname(body, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Delete IPFS Universal Path Gateway Content List Entry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryTest() throws Exception {
        String contentListEntryIdentifier = null;
        String identifier = null;
        String zoneIdentifier = null;
        CloudflareClientAPIApiResponseSingleId response = api.web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(contentListEntryIdentifier, identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Delete Web3 Hostname
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameDeleteWeb3HostnameTest() throws Exception {
        String identifier = null;
        String zoneIdentifier = null;
        CloudflareClientAPIApiResponseSingleId response = api.web3HostnameDeleteWeb3Hostname(identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Edit IPFS Universal Path Gateway Content List Entry
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameEditIpfsUniversalPathGatewayContentListEntryTest() throws Exception {
        ContentListEntryCreateRequest body = null;
        String contentListEntryIdentifier = null;
        String identifier = null;
        String zoneIdentifier = null;
        ContentListEntrySingleResponse response = api.web3HostnameEditIpfsUniversalPathGatewayContentListEntry(body, contentListEntryIdentifier, identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Edit Web3 Hostname
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameEditWeb3HostnameTest() throws Exception {
        ModifyRequest body = null;
        String identifier = null;
        String zoneIdentifier = null;
        Web3HostnameComponentsSchemasSingleResponse response = api.web3HostnameEditWeb3Hostname(body, identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * IPFS Universal Path Gateway Content List Details
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameIpfsUniversalPathGatewayContentListDetailsTest() throws Exception {
        String identifier = null;
        String zoneIdentifier = null;
        ContentListDetailsResponse response = api.web3HostnameIpfsUniversalPathGatewayContentListDetails(identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * IPFS Universal Path Gateway Content List Entry Details
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsTest() throws Exception {
        String contentListEntryIdentifier = null;
        String identifier = null;
        String zoneIdentifier = null;
        ContentListEntrySingleResponse response = api.web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(contentListEntryIdentifier, identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List IPFS Universal Path Gateway Content List Entries
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameListIpfsUniversalPathGatewayContentListEntriesTest() throws Exception {
        String identifier = null;
        String zoneIdentifier = null;
        ContentListEntryCollectionResponse response = api.web3HostnameListIpfsUniversalPathGatewayContentListEntries(identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * List Web3 Hostnames
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameListWeb3HostnamesTest() throws Exception {
        String zoneIdentifier = null;
        ComponentsSchemasCollectionResponse response = api.web3HostnameListWeb3Hostnames(zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Update IPFS Universal Path Gateway Content List
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameUpdateIpfsUniversalPathGatewayContentListTest() throws Exception {
        ContentListUpdateRequest body = null;
        String identifier = null;
        String zoneIdentifier = null;
        ContentListDetailsResponse response = api.web3HostnameUpdateIpfsUniversalPathGatewayContentList(body, identifier, zoneIdentifier);

        // TODO: test validations
    }
    /**
     * Web3 Hostname Details
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void web3HostnameWeb3HostnameDetailsTest() throws Exception {
        String identifier = null;
        String zoneIdentifier = null;
        Web3HostnameComponentsSchemasSingleResponse response = api.web3HostnameWeb3HostnameDetails(identifier, zoneIdentifier);

        // TODO: test validations
    }
}
