/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.DeviceDexTestSchemasHttp;
import io.swagger.client.model.DexResponseCollection;
import io.swagger.client.model.DexSingleResponse;
import io.swagger.client.model.InlineResponse4xx246;
import io.swagger.client.model.InlineResponse4xx247;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DeviceDexTestsApi
 */
@Ignore
public class DeviceDexTestsApiTest {

    private final DeviceDexTestsApi api = new DeviceDexTestsApi();

    /**
     * Create Device DEX test
     *
     * Create a DEX test.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deviceDexTestCreateDeviceDexTestTest() throws Exception {
        DeviceDexTestSchemasHttp body = null;
        String identifier = null;
        DexSingleResponse response = api.deviceDexTestCreateDeviceDexTest(body, identifier);

        // TODO: test validations
    }
    /**
     * Delete Device DEX test
     *
     * Delete a Device DEX test. Returns the remaining device dex tests for the account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deviceDexTestDeleteDeviceDexTestTest() throws Exception {
        String identifier = null;
        String uuid = null;
        DexResponseCollection response = api.deviceDexTestDeleteDeviceDexTest(identifier, uuid);

        // TODO: test validations
    }
    /**
     * List Device DEX tests
     *
     * Fetch all DEX tests.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deviceDexTestDetailsTest() throws Exception {
        String identifier = null;
        DexResponseCollection response = api.deviceDexTestDetails(identifier);

        // TODO: test validations
    }
    /**
     * Get Device DEX test
     *
     * Fetch a single DEX test.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deviceDexTestGetDeviceDexTestTest() throws Exception {
        String identifier = null;
        String uuid = null;
        DexSingleResponse response = api.deviceDexTestGetDeviceDexTest(identifier, uuid);

        // TODO: test validations
    }
    /**
     * Update Device DEX test
     *
     * Update a DEX test.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deviceDexTestUpdateDeviceDexTestTest() throws Exception {
        DeviceDexTestSchemasHttp body = null;
        String identifier = null;
        String uuid = null;
        DexSingleResponse response = api.deviceDexTestUpdateDeviceDexTest(body, identifier, uuid);

        // TODO: test validations
    }
}
