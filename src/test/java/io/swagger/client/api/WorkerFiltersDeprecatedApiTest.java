/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CloudflareClientAPIApiResponseSingleId;
import io.swagger.client.model.FilterNoId;
import io.swagger.client.model.FilterResponseCollection;
import io.swagger.client.model.FilterResponseSingle;
import io.swagger.client.model.InlineResponse4xx44;
import io.swagger.client.model.InlineResponse4xx533;
import io.swagger.client.model.InlineResponse4xx534;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for WorkerFiltersDeprecatedApi
 */
@Ignore
public class WorkerFiltersDeprecatedApiTest {

    private final WorkerFiltersDeprecatedApi api = new WorkerFiltersDeprecatedApi();

    /**
     * Create Filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workerFiltersDeprecatedCreateFilterTest() throws Exception {
        FilterNoId body = null;
        String zoneId = null;
        CloudflareClientAPIApiResponseSingleId response = api.workerFiltersDeprecatedCreateFilter(body, zoneId);

        // TODO: test validations
    }
    /**
     * Delete Filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workerFiltersDeprecatedDeleteFilterTest() throws Exception {
        String filterId = null;
        String zoneId = null;
        CloudflareClientAPIApiResponseSingleId response = api.workerFiltersDeprecatedDeleteFilter(filterId, zoneId);

        // TODO: test validations
    }
    /**
     * List Filters
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workerFiltersDeprecatedListFiltersTest() throws Exception {
        String zoneId = null;
        FilterResponseCollection response = api.workerFiltersDeprecatedListFilters(zoneId);

        // TODO: test validations
    }
    /**
     * Update Filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workerFiltersDeprecatedUpdateFilterTest() throws Exception {
        FilterNoId body = null;
        String filterId = null;
        String zoneId = null;
        FilterResponseSingle response = api.workerFiltersDeprecatedUpdateFilter(body, filterId, zoneId);

        // TODO: test validations
    }
}
