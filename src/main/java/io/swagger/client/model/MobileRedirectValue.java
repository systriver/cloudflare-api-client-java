/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Value of the zone setting.
 */
@Schema(description = "Value of the zone setting.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class MobileRedirectValue {
  @SerializedName("mobile_subdomain")
  private String mobileSubdomain = null;

  @SerializedName("status")
  private String status = off;

  @SerializedName("strip_uri")
  private Boolean stripUri = false;

  public MobileRedirectValue mobileSubdomain(String mobileSubdomain) {
    this.mobileSubdomain = mobileSubdomain;
    return this;
  }

   /**
   * Which subdomain prefix you wish to redirect visitors on mobile devices to (subdomain must already exist).
   * @return mobileSubdomain
  **/
  @Schema(example = "m", description = "Which subdomain prefix you wish to redirect visitors on mobile devices to (subdomain must already exist).")
  public String getMobileSubdomain() {
    return mobileSubdomain;
  }

  public void setMobileSubdomain(String mobileSubdomain) {
    this.mobileSubdomain = mobileSubdomain;
  }

  public MobileRedirectValue status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Whether or not mobile redirect is enabled.
   * @return status
  **/
  @Schema(description = "Whether or not mobile redirect is enabled.")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public MobileRedirectValue stripUri(Boolean stripUri) {
    this.stripUri = stripUri;
    return this;
  }

   /**
   * Whether to drop the current page path and redirect to the mobile subdomain URL root, or keep the path and redirect to the same page on the mobile subdomain.
   * @return stripUri
  **/
  @Schema(example = "false", description = "Whether to drop the current page path and redirect to the mobile subdomain URL root, or keep the path and redirect to the same page on the mobile subdomain.")
  public Boolean isStripUri() {
    return stripUri;
  }

  public void setStripUri(Boolean stripUri) {
    this.stripUri = stripUri;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MobileRedirectValue mobileRedirectValue = (MobileRedirectValue) o;
    return Objects.equals(this.mobileSubdomain, mobileRedirectValue.mobileSubdomain) &&
        Objects.equals(this.status, mobileRedirectValue.status) &&
        Objects.equals(this.stripUri, mobileRedirectValue.stripUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mobileSubdomain, status, stripUri);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MobileRedirectValue {\n");
    
    sb.append("    mobileSubdomain: ").append(toIndentedString(mobileSubdomain)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stripUri: ").append(toIndentedString(stripUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
