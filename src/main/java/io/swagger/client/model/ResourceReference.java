/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A reference to a load balancer resource.
 */
@Schema(description = "A reference to a load balancer resource.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class ResourceReference {
  /**
   * When listed as a reference, the type (direction) of the reference.
   */
  @JsonAdapter(ReferenceTypeEnum.Adapter.class)
  public enum ReferenceTypeEnum {
    REFERRAL("referral"),
    REFERRER("referrer");

    private String value;

    ReferenceTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ReferenceTypeEnum fromValue(String input) {
      for (ReferenceTypeEnum b : ReferenceTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ReferenceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReferenceTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ReferenceTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ReferenceTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("reference_type")
  private ReferenceTypeEnum referenceType = null;

  @SerializedName("references")
  private List<Object> references = null;

  @SerializedName("resource_id")
  private Object resourceId = null;

  @SerializedName("resource_name")
  private String resourceName = null;

  /**
   * The type of the resource.
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    LOAD_BALANCER("load_balancer"),
    MONITOR("monitor"),
    POOL("pool");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResourceTypeEnum fromValue(String input) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ResourceTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("resource_type")
  private ResourceTypeEnum resourceType = null;

  public ResourceReference referenceType(ReferenceTypeEnum referenceType) {
    this.referenceType = referenceType;
    return this;
  }

   /**
   * When listed as a reference, the type (direction) of the reference.
   * @return referenceType
  **/
  @Schema(description = "When listed as a reference, the type (direction) of the reference.")
  public ReferenceTypeEnum getReferenceType() {
    return referenceType;
  }

  public void setReferenceType(ReferenceTypeEnum referenceType) {
    this.referenceType = referenceType;
  }

  public ResourceReference references(List<Object> references) {
    this.references = references;
    return this;
  }

  public ResourceReference addReferencesItem(Object referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<Object>();
    }
    this.references.add(referencesItem);
    return this;
  }

   /**
   * A list of references to (referrer) or from (referral) this resource.
   * @return references
  **/
  @Schema(example = "[{\"reference_type\":\"referrer\",\"resource_id\":\"699d98642c564d2e855e9661899b7252\",\"resource_name\":\"www.example.com\",\"resource_type\":\"load_balancer\"},{\"reference_type\":\"referral\",\"resource_id\":\"f1aba936b94213e5b8dca0c0dbf1f9cc\",\"resource_name\":\"Login page monitor\",\"resource_type\":\"monitor\"}]", description = "A list of references to (referrer) or from (referral) this resource.")
  public List<Object> getReferences() {
    return references;
  }

  public void setReferences(List<Object> references) {
    this.references = references;
  }

  public ResourceReference resourceId(Object resourceId) {
    this.resourceId = resourceId;
    return this;
  }

   /**
   * Get resourceId
   * @return resourceId
  **/
  @Schema(example = "17b5962d775c646f3f9725cbc7a53df4", description = "")
  public Object getResourceId() {
    return resourceId;
  }

  public void setResourceId(Object resourceId) {
    this.resourceId = resourceId;
  }

  public ResourceReference resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

   /**
   * The human-identifiable name of the resource.
   * @return resourceName
  **/
  @Schema(example = "primary-dc-1", description = "The human-identifiable name of the resource.")
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }

  public ResourceReference resourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
    return this;
  }

   /**
   * The type of the resource.
   * @return resourceType
  **/
  @Schema(example = "pool", description = "The type of the resource.")
  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceReference resourceReference = (ResourceReference) o;
    return Objects.equals(this.referenceType, resourceReference.referenceType) &&
        Objects.equals(this.references, resourceReference.references) &&
        Objects.equals(this.resourceId, resourceReference.resourceId) &&
        Objects.equals(this.resourceName, resourceReference.resourceName) &&
        Objects.equals(this.resourceType, resourceReference.resourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceType, references, resourceId, resourceName, resourceType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceReference {\n");
    
    sb.append("    referenceType: ").append(toIndentedString(referenceType)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
