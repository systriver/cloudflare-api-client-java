/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Statuses for domain transfers into Cloudflare Registrar.
 */
@Schema(description = "Statuses for domain transfers into Cloudflare Registrar.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class TransferIn {
  @SerializedName("accept_foa")
  private Object acceptFoa = null;

  @SerializedName("approve_transfer")
  private Object approveTransfer = null;

  @SerializedName("can_cancel_transfer")
  private Boolean canCancelTransfer = null;

  @SerializedName("disable_privacy")
  private Object disablePrivacy = null;

  @SerializedName("enter_auth_code")
  private Object enterAuthCode = null;

  @SerializedName("unlock_domain")
  private Object unlockDomain = null;

  public TransferIn acceptFoa(Object acceptFoa) {
    this.acceptFoa = acceptFoa;
    return this;
  }

   /**
   * Form of authorization has been accepted by the registrant.
   * @return acceptFoa
  **/
  @Schema(example = "needed", description = "Form of authorization has been accepted by the registrant.")
  public Object getAcceptFoa() {
    return acceptFoa;
  }

  public void setAcceptFoa(Object acceptFoa) {
    this.acceptFoa = acceptFoa;
  }

  public TransferIn approveTransfer(Object approveTransfer) {
    this.approveTransfer = approveTransfer;
    return this;
  }

   /**
   * Shows transfer status with the registry.
   * @return approveTransfer
  **/
  @Schema(example = "unknown", description = "Shows transfer status with the registry.")
  public Object getApproveTransfer() {
    return approveTransfer;
  }

  public void setApproveTransfer(Object approveTransfer) {
    this.approveTransfer = approveTransfer;
  }

  public TransferIn canCancelTransfer(Boolean canCancelTransfer) {
    this.canCancelTransfer = canCancelTransfer;
    return this;
  }

   /**
   * Indicates if cancellation is still possible.
   * @return canCancelTransfer
  **/
  @Schema(example = "true", description = "Indicates if cancellation is still possible.")
  public Boolean isCanCancelTransfer() {
    return canCancelTransfer;
  }

  public void setCanCancelTransfer(Boolean canCancelTransfer) {
    this.canCancelTransfer = canCancelTransfer;
  }

  public TransferIn disablePrivacy(Object disablePrivacy) {
    this.disablePrivacy = disablePrivacy;
    return this;
  }

   /**
   * Privacy guards are disabled at the foreign registrar.
   * @return disablePrivacy
  **/
  @Schema(description = "Privacy guards are disabled at the foreign registrar.")
  public Object getDisablePrivacy() {
    return disablePrivacy;
  }

  public void setDisablePrivacy(Object disablePrivacy) {
    this.disablePrivacy = disablePrivacy;
  }

  public TransferIn enterAuthCode(Object enterAuthCode) {
    this.enterAuthCode = enterAuthCode;
    return this;
  }

   /**
   * Auth code has been entered and verified.
   * @return enterAuthCode
  **/
  @Schema(example = "needed", description = "Auth code has been entered and verified.")
  public Object getEnterAuthCode() {
    return enterAuthCode;
  }

  public void setEnterAuthCode(Object enterAuthCode) {
    this.enterAuthCode = enterAuthCode;
  }

  public TransferIn unlockDomain(Object unlockDomain) {
    this.unlockDomain = unlockDomain;
    return this;
  }

   /**
   * Domain is unlocked at the foreign registrar.
   * @return unlockDomain
  **/
  @Schema(description = "Domain is unlocked at the foreign registrar.")
  public Object getUnlockDomain() {
    return unlockDomain;
  }

  public void setUnlockDomain(Object unlockDomain) {
    this.unlockDomain = unlockDomain;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferIn transferIn = (TransferIn) o;
    return Objects.equals(this.acceptFoa, transferIn.acceptFoa) &&
        Objects.equals(this.approveTransfer, transferIn.approveTransfer) &&
        Objects.equals(this.canCancelTransfer, transferIn.canCancelTransfer) &&
        Objects.equals(this.disablePrivacy, transferIn.disablePrivacy) &&
        Objects.equals(this.enterAuthCode, transferIn.enterAuthCode) &&
        Objects.equals(this.unlockDomain, transferIn.unlockDomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptFoa, approveTransfer, canCancelTransfer, disablePrivacy, enterAuthCode, unlockDomain);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferIn {\n");
    
    sb.append("    acceptFoa: ").append(toIndentedString(acceptFoa)).append("\n");
    sb.append("    approveTransfer: ").append(toIndentedString(approveTransfer)).append("\n");
    sb.append("    canCancelTransfer: ").append(toIndentedString(canCancelTransfer)).append("\n");
    sb.append("    disablePrivacy: ").append(toIndentedString(disablePrivacy)).append("\n");
    sb.append("    enterAuthCode: ").append(toIndentedString(enterAuthCode)).append("\n");
    sb.append("    unlockDomain: ").append(toIndentedString(unlockDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
