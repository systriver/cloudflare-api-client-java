/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * InlineResponse20047ResultSummary0
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class InlineResponse20047ResultSummary0 {
  @SerializedName("gre")
  private String gre = null;

  @SerializedName("icmp")
  private String icmp = null;

  @SerializedName("tcp")
  private String tcp = null;

  @SerializedName("udp")
  private String udp = null;

  public InlineResponse20047ResultSummary0 gre(String gre) {
    this.gre = gre;
    return this;
  }

   /**
   * Get gre
   * @return gre
  **/
  @Schema(example = "0.9", required = true, description = "")
  public String getGre() {
    return gre;
  }

  public void setGre(String gre) {
    this.gre = gre;
  }

  public InlineResponse20047ResultSummary0 icmp(String icmp) {
    this.icmp = icmp;
    return this;
  }

   /**
   * Get icmp
   * @return icmp
  **/
  @Schema(example = "0.1", required = true, description = "")
  public String getIcmp() {
    return icmp;
  }

  public void setIcmp(String icmp) {
    this.icmp = icmp;
  }

  public InlineResponse20047ResultSummary0 tcp(String tcp) {
    this.tcp = tcp;
    return this;
  }

   /**
   * Get tcp
   * @return tcp
  **/
  @Schema(example = "60", required = true, description = "")
  public String getTcp() {
    return tcp;
  }

  public void setTcp(String tcp) {
    this.tcp = tcp;
  }

  public InlineResponse20047ResultSummary0 udp(String udp) {
    this.udp = udp;
    return this;
  }

   /**
   * Get udp
   * @return udp
  **/
  @Schema(example = "39", required = true, description = "")
  public String getUdp() {
    return udp;
  }

  public void setUdp(String udp) {
    this.udp = udp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20047ResultSummary0 inlineResponse20047ResultSummary0 = (InlineResponse20047ResultSummary0) o;
    return Objects.equals(this.gre, inlineResponse20047ResultSummary0.gre) &&
        Objects.equals(this.icmp, inlineResponse20047ResultSummary0.icmp) &&
        Objects.equals(this.tcp, inlineResponse20047ResultSummary0.tcp) &&
        Objects.equals(this.udp, inlineResponse20047ResultSummary0.udp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gre, icmp, tcp, udp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20047ResultSummary0 {\n");
    
    sb.append("    gre: ").append(toIndentedString(gre)).append("\n");
    sb.append("    icmp: ").append(toIndentedString(icmp)).append("\n");
    sb.append("    tcp: ").append(toIndentedString(tcp)).append("\n");
    sb.append("    udp: ").append(toIndentedString(udp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
