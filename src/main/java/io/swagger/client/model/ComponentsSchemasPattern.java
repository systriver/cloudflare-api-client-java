/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * A pattern that matches an entry
 */
@Schema(description = "A pattern that matches an entry")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class ComponentsSchemasPattern {
  @SerializedName("regex")
  private String regex = null;

  /**
   * Validation algorithm for the pattern. This algorithm will get run on potential matches, and if it returns false, the entry will not be matched.
   */
  @JsonAdapter(ValidationEnum.Adapter.class)
  public enum ValidationEnum {
    LUHN("luhn");

    private String value;

    ValidationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ValidationEnum fromValue(String input) {
      for (ValidationEnum b : ValidationEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ValidationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidationEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ValidationEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ValidationEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("validation")
  private ValidationEnum validation = null;

  public ComponentsSchemasPattern regex(String regex) {
    this.regex = regex;
    return this;
  }

   /**
   * The regex pattern.
   * @return regex
  **/
  @Schema(example = "^4[0-9]{6,14}$", required = true, description = "The regex pattern.")
  public String getRegex() {
    return regex;
  }

  public void setRegex(String regex) {
    this.regex = regex;
  }

  public ComponentsSchemasPattern validation(ValidationEnum validation) {
    this.validation = validation;
    return this;
  }

   /**
   * Validation algorithm for the pattern. This algorithm will get run on potential matches, and if it returns false, the entry will not be matched.
   * @return validation
  **/
  @Schema(example = "luhn", description = "Validation algorithm for the pattern. This algorithm will get run on potential matches, and if it returns false, the entry will not be matched.")
  public ValidationEnum getValidation() {
    return validation;
  }

  public void setValidation(ValidationEnum validation) {
    this.validation = validation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentsSchemasPattern componentsSchemasPattern = (ComponentsSchemasPattern) o;
    return Objects.equals(this.regex, componentsSchemasPattern.regex) &&
        Objects.equals(this.validation, componentsSchemasPattern.validation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(regex, validation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentsSchemasPattern {\n");
    
    sb.append("    regex: ").append(toIndentedString(regex)).append("\n");
    sb.append("    validation: ").append(toIndentedString(validation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
