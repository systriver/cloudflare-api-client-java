/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AccountsaccountIdentifierrequesttracertraceContextGeoloc;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Additional request parameters
 */
@Schema(description = "Additional request parameters")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class AccountsaccountIdentifierrequesttracertraceContext {
  @SerializedName("bot_score")
  private Integer botScore = null;

  @SerializedName("geoloc")
  private AccountsaccountIdentifierrequesttracertraceContextGeoloc geoloc = null;

  @SerializedName("skip_challenge")
  private Boolean skipChallenge = null;

  @SerializedName("threat_score")
  private Integer threatScore = null;

  public AccountsaccountIdentifierrequesttracertraceContext botScore(Integer botScore) {
    this.botScore = botScore;
    return this;
  }

   /**
   * Bot score used for evaluating tracing request processing
   * @return botScore
  **/
  @Schema(description = "Bot score used for evaluating tracing request processing")
  public Integer getBotScore() {
    return botScore;
  }

  public void setBotScore(Integer botScore) {
    this.botScore = botScore;
  }

  public AccountsaccountIdentifierrequesttracertraceContext geoloc(AccountsaccountIdentifierrequesttracertraceContextGeoloc geoloc) {
    this.geoloc = geoloc;
    return this;
  }

   /**
   * Get geoloc
   * @return geoloc
  **/
  @Schema(description = "")
  public AccountsaccountIdentifierrequesttracertraceContextGeoloc getGeoloc() {
    return geoloc;
  }

  public void setGeoloc(AccountsaccountIdentifierrequesttracertraceContextGeoloc geoloc) {
    this.geoloc = geoloc;
  }

  public AccountsaccountIdentifierrequesttracertraceContext skipChallenge(Boolean skipChallenge) {
    this.skipChallenge = skipChallenge;
    return this;
  }

   /**
   * Whether to skip any challenges for tracing request (e.g.: captcha)
   * @return skipChallenge
  **/
  @Schema(example = "true", description = "Whether to skip any challenges for tracing request (e.g.: captcha)")
  public Boolean isSkipChallenge() {
    return skipChallenge;
  }

  public void setSkipChallenge(Boolean skipChallenge) {
    this.skipChallenge = skipChallenge;
  }

  public AccountsaccountIdentifierrequesttracertraceContext threatScore(Integer threatScore) {
    this.threatScore = threatScore;
    return this;
  }

   /**
   * Threat score used for evaluating tracing request processing
   * @return threatScore
  **/
  @Schema(description = "Threat score used for evaluating tracing request processing")
  public Integer getThreatScore() {
    return threatScore;
  }

  public void setThreatScore(Integer threatScore) {
    this.threatScore = threatScore;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountsaccountIdentifierrequesttracertraceContext accountsaccountIdentifierrequesttracertraceContext = (AccountsaccountIdentifierrequesttracertraceContext) o;
    return Objects.equals(this.botScore, accountsaccountIdentifierrequesttracertraceContext.botScore) &&
        Objects.equals(this.geoloc, accountsaccountIdentifierrequesttracertraceContext.geoloc) &&
        Objects.equals(this.skipChallenge, accountsaccountIdentifierrequesttracertraceContext.skipChallenge) &&
        Objects.equals(this.threatScore, accountsaccountIdentifierrequesttracertraceContext.threatScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(botScore, geoloc, skipChallenge, threatScore);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountsaccountIdentifierrequesttracertraceContext {\n");
    
    sb.append("    botScore: ").append(toIndentedString(botScore)).append("\n");
    sb.append("    geoloc: ").append(toIndentedString(geoloc)).append("\n");
    sb.append("    skipChallenge: ").append(toIndentedString(skipChallenge)).append("\n");
    sb.append("    threatScore: ").append(toIndentedString(threatScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
