/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PhishingurlinfoCategorizations;
import io.swagger.client.model.PhishingurlinfoModelResults;
import io.swagger.client.model.PhishingurlinfoRuleMatches;
import io.swagger.client.model.PhishingurlinfoScanStatus;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * PhishingUrlInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class PhishingUrlInfo {
  @SerializedName("categorizations")
  private List<PhishingurlinfoCategorizations> categorizations = null;

  @SerializedName("model_results")
  private List<PhishingurlinfoModelResults> modelResults = null;

  @SerializedName("rule_matches")
  private List<PhishingurlinfoRuleMatches> ruleMatches = null;

  @SerializedName("scan_status")
  private PhishingurlinfoScanStatus scanStatus = null;

  @SerializedName("screenshot_download_signature")
  private String screenshotDownloadSignature = null;

  @SerializedName("screenshot_path")
  private String screenshotPath = null;

  @SerializedName("url")
  private String url = null;

  public PhishingUrlInfo categorizations(List<PhishingurlinfoCategorizations> categorizations) {
    this.categorizations = categorizations;
    return this;
  }

  public PhishingUrlInfo addCategorizationsItem(PhishingurlinfoCategorizations categorizationsItem) {
    if (this.categorizations == null) {
      this.categorizations = new ArrayList<PhishingurlinfoCategorizations>();
    }
    this.categorizations.add(categorizationsItem);
    return this;
  }

   /**
   * List of categorizations applied to this submission.
   * @return categorizations
  **/
  @Schema(description = "List of categorizations applied to this submission.")
  public List<PhishingurlinfoCategorizations> getCategorizations() {
    return categorizations;
  }

  public void setCategorizations(List<PhishingurlinfoCategorizations> categorizations) {
    this.categorizations = categorizations;
  }

  public PhishingUrlInfo modelResults(List<PhishingurlinfoModelResults> modelResults) {
    this.modelResults = modelResults;
    return this;
  }

  public PhishingUrlInfo addModelResultsItem(PhishingurlinfoModelResults modelResultsItem) {
    if (this.modelResults == null) {
      this.modelResults = new ArrayList<PhishingurlinfoModelResults>();
    }
    this.modelResults.add(modelResultsItem);
    return this;
  }

   /**
   * List of model results for completed scans.
   * @return modelResults
  **/
  @Schema(description = "List of model results for completed scans.")
  public List<PhishingurlinfoModelResults> getModelResults() {
    return modelResults;
  }

  public void setModelResults(List<PhishingurlinfoModelResults> modelResults) {
    this.modelResults = modelResults;
  }

  public PhishingUrlInfo ruleMatches(List<PhishingurlinfoRuleMatches> ruleMatches) {
    this.ruleMatches = ruleMatches;
    return this;
  }

  public PhishingUrlInfo addRuleMatchesItem(PhishingurlinfoRuleMatches ruleMatchesItem) {
    if (this.ruleMatches == null) {
      this.ruleMatches = new ArrayList<PhishingurlinfoRuleMatches>();
    }
    this.ruleMatches.add(ruleMatchesItem);
    return this;
  }

   /**
   * List of signatures that matched against site content found when crawling the URL.
   * @return ruleMatches
  **/
  @Schema(description = "List of signatures that matched against site content found when crawling the URL.")
  public List<PhishingurlinfoRuleMatches> getRuleMatches() {
    return ruleMatches;
  }

  public void setRuleMatches(List<PhishingurlinfoRuleMatches> ruleMatches) {
    this.ruleMatches = ruleMatches;
  }

  public PhishingUrlInfo scanStatus(PhishingurlinfoScanStatus scanStatus) {
    this.scanStatus = scanStatus;
    return this;
  }

   /**
   * Get scanStatus
   * @return scanStatus
  **/
  @Schema(description = "")
  public PhishingurlinfoScanStatus getScanStatus() {
    return scanStatus;
  }

  public void setScanStatus(PhishingurlinfoScanStatus scanStatus) {
    this.scanStatus = scanStatus;
  }

  public PhishingUrlInfo screenshotDownloadSignature(String screenshotDownloadSignature) {
    this.screenshotDownloadSignature = screenshotDownloadSignature;
    return this;
  }

   /**
   * For internal use.
   * @return screenshotDownloadSignature
  **/
  @Schema(description = "For internal use.")
  public String getScreenshotDownloadSignature() {
    return screenshotDownloadSignature;
  }

  public void setScreenshotDownloadSignature(String screenshotDownloadSignature) {
    this.screenshotDownloadSignature = screenshotDownloadSignature;
  }

  public PhishingUrlInfo screenshotPath(String screenshotPath) {
    this.screenshotPath = screenshotPath;
    return this;
  }

   /**
   * For internal use.
   * @return screenshotPath
  **/
  @Schema(description = "For internal use.")
  public String getScreenshotPath() {
    return screenshotPath;
  }

  public void setScreenshotPath(String screenshotPath) {
    this.screenshotPath = screenshotPath;
  }

  public PhishingUrlInfo url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL that was submitted.
   * @return url
  **/
  @Schema(example = "https://www.cloudflare.com", description = "URL that was submitted.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhishingUrlInfo phishingUrlInfo = (PhishingUrlInfo) o;
    return Objects.equals(this.categorizations, phishingUrlInfo.categorizations) &&
        Objects.equals(this.modelResults, phishingUrlInfo.modelResults) &&
        Objects.equals(this.ruleMatches, phishingUrlInfo.ruleMatches) &&
        Objects.equals(this.scanStatus, phishingUrlInfo.scanStatus) &&
        Objects.equals(this.screenshotDownloadSignature, phishingUrlInfo.screenshotDownloadSignature) &&
        Objects.equals(this.screenshotPath, phishingUrlInfo.screenshotPath) &&
        Objects.equals(this.url, phishingUrlInfo.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categorizations, modelResults, ruleMatches, scanStatus, screenshotDownloadSignature, screenshotPath, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhishingUrlInfo {\n");
    
    sb.append("    categorizations: ").append(toIndentedString(categorizations)).append("\n");
    sb.append("    modelResults: ").append(toIndentedString(modelResults)).append("\n");
    sb.append("    ruleMatches: ").append(toIndentedString(ruleMatches)).append("\n");
    sb.append("    scanStatus: ").append(toIndentedString(scanStatus)).append("\n");
    sb.append("    screenshotDownloadSignature: ").append(toIndentedString(screenshotDownloadSignature)).append("\n");
    sb.append("    screenshotPath: ").append(toIndentedString(screenshotPath)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
