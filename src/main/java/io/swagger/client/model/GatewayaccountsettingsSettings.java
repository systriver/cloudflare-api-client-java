/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ActivityLogSettings;
import io.swagger.client.model.AntiVirusSettings;
import io.swagger.client.model.BlockPageSettings;
import io.swagger.client.model.BrowserIsolationSettings;
import io.swagger.client.model.CustomCertificateSettings;
import io.swagger.client.model.FipsSettings;
import io.swagger.client.model.TlsSettings;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * account settings.
 */
@Schema(description = "account settings.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class GatewayaccountsettingsSettings {
  @SerializedName("activity_log")
  private ActivityLogSettings activityLog = null;

  @SerializedName("antivirus")
  private AntiVirusSettings antivirus = null;

  @SerializedName("block_page")
  private BlockPageSettings blockPage = null;

  @SerializedName("browser_isolation")
  private BrowserIsolationSettings browserIsolation = null;

  @SerializedName("custom_certificate")
  private CustomCertificateSettings customCertificate = null;

  @SerializedName("fips")
  private FipsSettings fips = null;

  @SerializedName("tls_decrypt")
  private TlsSettings tlsDecrypt = null;

  public GatewayaccountsettingsSettings activityLog(ActivityLogSettings activityLog) {
    this.activityLog = activityLog;
    return this;
  }

   /**
   * Get activityLog
   * @return activityLog
  **/
  @Schema(description = "")
  public ActivityLogSettings getActivityLog() {
    return activityLog;
  }

  public void setActivityLog(ActivityLogSettings activityLog) {
    this.activityLog = activityLog;
  }

  public GatewayaccountsettingsSettings antivirus(AntiVirusSettings antivirus) {
    this.antivirus = antivirus;
    return this;
  }

   /**
   * Get antivirus
   * @return antivirus
  **/
  @Schema(description = "")
  public AntiVirusSettings getAntivirus() {
    return antivirus;
  }

  public void setAntivirus(AntiVirusSettings antivirus) {
    this.antivirus = antivirus;
  }

  public GatewayaccountsettingsSettings blockPage(BlockPageSettings blockPage) {
    this.blockPage = blockPage;
    return this;
  }

   /**
   * Get blockPage
   * @return blockPage
  **/
  @Schema(description = "")
  public BlockPageSettings getBlockPage() {
    return blockPage;
  }

  public void setBlockPage(BlockPageSettings blockPage) {
    this.blockPage = blockPage;
  }

  public GatewayaccountsettingsSettings browserIsolation(BrowserIsolationSettings browserIsolation) {
    this.browserIsolation = browserIsolation;
    return this;
  }

   /**
   * Get browserIsolation
   * @return browserIsolation
  **/
  @Schema(description = "")
  public BrowserIsolationSettings getBrowserIsolation() {
    return browserIsolation;
  }

  public void setBrowserIsolation(BrowserIsolationSettings browserIsolation) {
    this.browserIsolation = browserIsolation;
  }

  public GatewayaccountsettingsSettings customCertificate(CustomCertificateSettings customCertificate) {
    this.customCertificate = customCertificate;
    return this;
  }

   /**
   * Get customCertificate
   * @return customCertificate
  **/
  @Schema(description = "")
  public CustomCertificateSettings getCustomCertificate() {
    return customCertificate;
  }

  public void setCustomCertificate(CustomCertificateSettings customCertificate) {
    this.customCertificate = customCertificate;
  }

  public GatewayaccountsettingsSettings fips(FipsSettings fips) {
    this.fips = fips;
    return this;
  }

   /**
   * Get fips
   * @return fips
  **/
  @Schema(description = "")
  public FipsSettings getFips() {
    return fips;
  }

  public void setFips(FipsSettings fips) {
    this.fips = fips;
  }

  public GatewayaccountsettingsSettings tlsDecrypt(TlsSettings tlsDecrypt) {
    this.tlsDecrypt = tlsDecrypt;
    return this;
  }

   /**
   * Get tlsDecrypt
   * @return tlsDecrypt
  **/
  @Schema(description = "")
  public TlsSettings getTlsDecrypt() {
    return tlsDecrypt;
  }

  public void setTlsDecrypt(TlsSettings tlsDecrypt) {
    this.tlsDecrypt = tlsDecrypt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayaccountsettingsSettings gatewayaccountsettingsSettings = (GatewayaccountsettingsSettings) o;
    return Objects.equals(this.activityLog, gatewayaccountsettingsSettings.activityLog) &&
        Objects.equals(this.antivirus, gatewayaccountsettingsSettings.antivirus) &&
        Objects.equals(this.blockPage, gatewayaccountsettingsSettings.blockPage) &&
        Objects.equals(this.browserIsolation, gatewayaccountsettingsSettings.browserIsolation) &&
        Objects.equals(this.customCertificate, gatewayaccountsettingsSettings.customCertificate) &&
        Objects.equals(this.fips, gatewayaccountsettingsSettings.fips) &&
        Objects.equals(this.tlsDecrypt, gatewayaccountsettingsSettings.tlsDecrypt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityLog, antivirus, blockPage, browserIsolation, customCertificate, fips, tlsDecrypt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayaccountsettingsSettings {\n");
    
    sb.append("    activityLog: ").append(toIndentedString(activityLog)).append("\n");
    sb.append("    antivirus: ").append(toIndentedString(antivirus)).append("\n");
    sb.append("    blockPage: ").append(toIndentedString(blockPage)).append("\n");
    sb.append("    browserIsolation: ").append(toIndentedString(browserIsolation)).append("\n");
    sb.append("    customCertificate: ").append(toIndentedString(customCertificate)).append("\n");
    sb.append("    fips: ").append(toIndentedString(fips)).append("\n");
    sb.append("    tlsDecrypt: ").append(toIndentedString(tlsDecrypt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
