/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PhishingurlsubmitExcludedUrls;
import io.swagger.client.model.PhishingurlsubmitSkippedUrls;
import io.swagger.client.model.PhishingurlsubmitSubmittedUrls;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * PhishingUrlSubmit
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class PhishingUrlSubmit {
  @SerializedName("excluded_urls")
  private List<PhishingurlsubmitExcludedUrls> excludedUrls = null;

  @SerializedName("skipped_urls")
  private List<PhishingurlsubmitSkippedUrls> skippedUrls = null;

  @SerializedName("submitted_urls")
  private List<PhishingurlsubmitSubmittedUrls> submittedUrls = null;

  public PhishingUrlSubmit excludedUrls(List<PhishingurlsubmitExcludedUrls> excludedUrls) {
    this.excludedUrls = excludedUrls;
    return this;
  }

  public PhishingUrlSubmit addExcludedUrlsItem(PhishingurlsubmitExcludedUrls excludedUrlsItem) {
    if (this.excludedUrls == null) {
      this.excludedUrls = new ArrayList<PhishingurlsubmitExcludedUrls>();
    }
    this.excludedUrls.add(excludedUrlsItem);
    return this;
  }

   /**
   * URLs that were excluded from scanning because their domain is in our no-scan list.
   * @return excludedUrls
  **/
  @Schema(description = "URLs that were excluded from scanning because their domain is in our no-scan list.")
  public List<PhishingurlsubmitExcludedUrls> getExcludedUrls() {
    return excludedUrls;
  }

  public void setExcludedUrls(List<PhishingurlsubmitExcludedUrls> excludedUrls) {
    this.excludedUrls = excludedUrls;
  }

  public PhishingUrlSubmit skippedUrls(List<PhishingurlsubmitSkippedUrls> skippedUrls) {
    this.skippedUrls = skippedUrls;
    return this;
  }

  public PhishingUrlSubmit addSkippedUrlsItem(PhishingurlsubmitSkippedUrls skippedUrlsItem) {
    if (this.skippedUrls == null) {
      this.skippedUrls = new ArrayList<PhishingurlsubmitSkippedUrls>();
    }
    this.skippedUrls.add(skippedUrlsItem);
    return this;
  }

   /**
   * URLs that were skipped because the same URL is currently being scanned
   * @return skippedUrls
  **/
  @Schema(description = "URLs that were skipped because the same URL is currently being scanned")
  public List<PhishingurlsubmitSkippedUrls> getSkippedUrls() {
    return skippedUrls;
  }

  public void setSkippedUrls(List<PhishingurlsubmitSkippedUrls> skippedUrls) {
    this.skippedUrls = skippedUrls;
  }

  public PhishingUrlSubmit submittedUrls(List<PhishingurlsubmitSubmittedUrls> submittedUrls) {
    this.submittedUrls = submittedUrls;
    return this;
  }

  public PhishingUrlSubmit addSubmittedUrlsItem(PhishingurlsubmitSubmittedUrls submittedUrlsItem) {
    if (this.submittedUrls == null) {
      this.submittedUrls = new ArrayList<PhishingurlsubmitSubmittedUrls>();
    }
    this.submittedUrls.add(submittedUrlsItem);
    return this;
  }

   /**
   * URLs that were successfully submitted for scanning.
   * @return submittedUrls
  **/
  @Schema(description = "URLs that were successfully submitted for scanning.")
  public List<PhishingurlsubmitSubmittedUrls> getSubmittedUrls() {
    return submittedUrls;
  }

  public void setSubmittedUrls(List<PhishingurlsubmitSubmittedUrls> submittedUrls) {
    this.submittedUrls = submittedUrls;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhishingUrlSubmit phishingUrlSubmit = (PhishingUrlSubmit) o;
    return Objects.equals(this.excludedUrls, phishingUrlSubmit.excludedUrls) &&
        Objects.equals(this.skippedUrls, phishingUrlSubmit.skippedUrls) &&
        Objects.equals(this.submittedUrls, phishingUrlSubmit.submittedUrls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludedUrls, skippedUrls, submittedUrls);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhishingUrlSubmit {\n");
    
    sb.append("    excludedUrls: ").append(toIndentedString(excludedUrls)).append("\n");
    sb.append("    skippedUrls: ").append(toIndentedString(skippedUrls)).append("\n");
    sb.append("    submittedUrls: ").append(toIndentedString(submittedUrls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
