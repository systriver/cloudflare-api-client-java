/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.MinTlsVersionValue;
import io.swagger.client.model.SchemasBase;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Only accepts HTTPS requests that use at least the TLS protocol version specified. For example, if TLS 1.1 is selected, TLS 1.0 connections will be rejected, while 1.1, 1.2, and 1.3 (if enabled) will be permitted.
 */
@Schema(description = "Only accepts HTTPS requests that use at least the TLS protocol version specified. For example, if TLS 1.1 is selected, TLS 1.0 connections will be rejected, while 1.1, 1.2, and 1.3 (if enabled) will be permitted.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class MinTlsVersion extends SchemasBase implements Setting {
  @SerializedName("id")
  private String minTlsVersionId = null;

  @SerializedName("value")
  private MinTlsVersionValue minTlsVersionValue = null;

  public MinTlsVersion minTlsVersionId(String minTlsVersionId) {
    this.minTlsVersionId = minTlsVersionId;
    return this;
  }

   /**
   * ID of the zone setting.
   * @return minTlsVersionId
  **/
  @Schema(example = "min_tls_version", description = "ID of the zone setting.")
  public String getMinTlsVersionId() {
    return minTlsVersionId;
  }

  public void setMinTlsVersionId(String minTlsVersionId) {
    this.minTlsVersionId = minTlsVersionId;
  }

  public MinTlsVersion minTlsVersionValue(MinTlsVersionValue minTlsVersionValue) {
    this.minTlsVersionValue = minTlsVersionValue;
    return this;
  }

   /**
   * Get minTlsVersionValue
   * @return minTlsVersionValue
  **/
  @Schema(description = "")
  public MinTlsVersionValue getMinTlsVersionValue() {
    return minTlsVersionValue;
  }

  public void setMinTlsVersionValue(MinTlsVersionValue minTlsVersionValue) {
    this.minTlsVersionValue = minTlsVersionValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MinTlsVersion minTlsVersion = (MinTlsVersion) o;
    return Objects.equals(this.minTlsVersionId, minTlsVersion.minTlsVersionId) &&
        Objects.equals(this.minTlsVersionValue, minTlsVersion.minTlsVersionValue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minTlsVersionId, minTlsVersionValue, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MinTlsVersion {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    minTlsVersionId: ").append(toIndentedString(minTlsVersionId)).append("\n");
    sb.append("    minTlsVersionValue: ").append(toIndentedString(minTlsVersionValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
