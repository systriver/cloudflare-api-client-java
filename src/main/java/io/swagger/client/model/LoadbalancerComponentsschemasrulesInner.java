/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * A rule object containing conditions and overrides for this load balancer to evaluate.
 */
@Schema(description = "A rule object containing conditions and overrides for this load balancer to evaluate.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class LoadbalancerComponentsschemasrulesInner {
  @SerializedName("condition")
  private String condition = null;

  @SerializedName("disabled")
  private Boolean disabled = false;

  @SerializedName("fixed_response")
  private Object fixedResponse = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("overrides")
  private Object overrides = null;

  @SerializedName("priority")
  private Integer priority = 0;

  @SerializedName("terminates")
  private Boolean terminates = false;

  public LoadbalancerComponentsschemasrulesInner condition(String condition) {
    this.condition = condition;
    return this;
  }

   /**
   * The condition expressions to evaluate. If the condition evaluates to true, the overrides or fixed_response in this rule will be applied. An empty condition is always true. For more details on condition expressions, please see https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules/expressions.
   * @return condition
  **/
  @Schema(example = "http.request.uri.path contains \"/testing\"", description = "The condition expressions to evaluate. If the condition evaluates to true, the overrides or fixed_response in this rule will be applied. An empty condition is always true. For more details on condition expressions, please see https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules/expressions.")
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }

  public LoadbalancerComponentsschemasrulesInner disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * Disable this specific rule. It will no longer be evaluated by this load balancer.
   * @return disabled
  **/
  @Schema(description = "Disable this specific rule. It will no longer be evaluated by this load balancer.")
  public Boolean isDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }

  public LoadbalancerComponentsschemasrulesInner fixedResponse(Object fixedResponse) {
    this.fixedResponse = fixedResponse;
    return this;
  }

   /**
   * A collection of fields used to directly respond to the eyeball instead of routing to a pool. If a fixed_response is supplied the rule will be marked as terminates.
   * @return fixedResponse
  **/
  @Schema(description = "A collection of fields used to directly respond to the eyeball instead of routing to a pool. If a fixed_response is supplied the rule will be marked as terminates.")
  public Object getFixedResponse() {
    return fixedResponse;
  }

  public void setFixedResponse(Object fixedResponse) {
    this.fixedResponse = fixedResponse;
  }

  public LoadbalancerComponentsschemasrulesInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of this rule. Only used for human readability.
   * @return name
  **/
  @Schema(example = "route the path /testing to testing datacenter.", description = "Name of this rule. Only used for human readability.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public LoadbalancerComponentsschemasrulesInner overrides(Object overrides) {
    this.overrides = overrides;
    return this;
  }

   /**
   * A collection of overrides to apply to the load balancer when this rule&#x27;s condition is true. All fields are optional.
   * @return overrides
  **/
  @Schema(description = "A collection of overrides to apply to the load balancer when this rule's condition is true. All fields are optional.")
  public Object getOverrides() {
    return overrides;
  }

  public void setOverrides(Object overrides) {
    this.overrides = overrides;
  }

  public LoadbalancerComponentsschemasrulesInner priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
   * @return priority
  **/
  @Schema(description = "The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public LoadbalancerComponentsschemasrulesInner terminates(Boolean terminates) {
    this.terminates = terminates;
    return this;
  }

   /**
   * If this rule&#x27;s condition is true, this causes rule evaluation to stop after processing this rule.
   * @return terminates
  **/
  @Schema(description = "If this rule's condition is true, this causes rule evaluation to stop after processing this rule.")
  public Boolean isTerminates() {
    return terminates;
  }

  public void setTerminates(Boolean terminates) {
    this.terminates = terminates;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadbalancerComponentsschemasrulesInner loadbalancerComponentsschemasrulesInner = (LoadbalancerComponentsschemasrulesInner) o;
    return Objects.equals(this.condition, loadbalancerComponentsschemasrulesInner.condition) &&
        Objects.equals(this.disabled, loadbalancerComponentsschemasrulesInner.disabled) &&
        Objects.equals(this.fixedResponse, loadbalancerComponentsschemasrulesInner.fixedResponse) &&
        Objects.equals(this.name, loadbalancerComponentsschemasrulesInner.name) &&
        Objects.equals(this.overrides, loadbalancerComponentsschemasrulesInner.overrides) &&
        Objects.equals(this.priority, loadbalancerComponentsschemasrulesInner.priority) &&
        Objects.equals(this.terminates, loadbalancerComponentsschemasrulesInner.terminates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, disabled, fixedResponse, name, overrides, priority, terminates);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadbalancerComponentsschemasrulesInner {\n");
    
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    fixedResponse: ").append(toIndentedString(fixedResponse)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    terminates: ").append(toIndentedString(terminates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
