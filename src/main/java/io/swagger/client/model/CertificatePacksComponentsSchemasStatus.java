/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.v3.oas.annotations.media.Schema;
import com.google.gson.annotations.SerializedName;
import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Status of certificate pack.
 */
@JsonAdapter(CertificatePacksComponentsSchemasStatus.Adapter.class)
public enum CertificatePacksComponentsSchemasStatus {
  INITIALIZING("initializing"),
  PENDING_VALIDATION("pending_validation"),
  DELETED("deleted"),
  PENDING_ISSUANCE("pending_issuance"),
  PENDING_DEPLOYMENT("pending_deployment"),
  PENDING_DELETION("pending_deletion"),
  PENDING_EXPIRATION("pending_expiration"),
  EXPIRED("expired"),
  ACTIVE("active"),
  INITIALIZING_TIMED_OUT("initializing_timed_out"),
  VALIDATION_TIMED_OUT("validation_timed_out"),
  ISSUANCE_TIMED_OUT("issuance_timed_out"),
  DEPLOYMENT_TIMED_OUT("deployment_timed_out"),
  DELETION_TIMED_OUT("deletion_timed_out"),
  PENDING_CLEANUP("pending_cleanup"),
  STAGING_DEPLOYMENT("staging_deployment"),
  STAGING_ACTIVE("staging_active"),
  DEACTIVATING("deactivating"),
  INACTIVE("inactive"),
  BACKUP_ISSUED("backup_issued"),
  HOLDING_DEPLOYMENT("holding_deployment");

  private String value;

  CertificatePacksComponentsSchemasStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CertificatePacksComponentsSchemasStatus fromValue(String input) {
    for (CertificatePacksComponentsSchemasStatus b : CertificatePacksComponentsSchemasStatus.values()) {
      if (b.value.equals(input)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<CertificatePacksComponentsSchemasStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final CertificatePacksComponentsSchemasStatus enumeration) throws IOException {
      jsonWriter.value(String.valueOf(enumeration.getValue()));
    }

    @Override
    public CertificatePacksComponentsSchemasStatus read(final JsonReader jsonReader) throws IOException {
      Object value = jsonReader.nextString();
      return CertificatePacksComponentsSchemasStatus.fromValue((String)(value));
    }
  }
}
