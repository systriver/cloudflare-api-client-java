/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CheckRegions;
import io.swagger.client.model.HttpConfig;
import io.swagger.client.model.Status;
import io.swagger.client.model.TcpConfig;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Healthchecks
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class Healthchecks {
  @SerializedName("address")
  private String address = null;

  @SerializedName("check_regions")
  private CheckRegions checkRegions = null;

  @SerializedName("consecutive_fails")
  private Integer consecutiveFails = null;

  @SerializedName("consecutive_successes")
  private Integer consecutiveSuccesses = null;

  @SerializedName("created_on")
  private OffsetDateTime createdOn = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("failure_reason")
  private String failureReason = null;

  @SerializedName("http_config")
  private HttpConfig httpConfig = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("interval")
  private Integer interval = null;

  @SerializedName("modified_on")
  private OffsetDateTime modifiedOn = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("retries")
  private Integer retries = null;

  @SerializedName("status")
  private Status status = null;

  @SerializedName("suspended")
  private Boolean suspended = null;

  @SerializedName("tcp_config")
  private TcpConfig tcpConfig = null;

  @SerializedName("timeout")
  private Integer timeout = null;

  @SerializedName("type")
  private String type = null;

  public Healthchecks address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(description = "")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public Healthchecks checkRegions(CheckRegions checkRegions) {
    this.checkRegions = checkRegions;
    return this;
  }

   /**
   * Get checkRegions
   * @return checkRegions
  **/
  @Schema(description = "")
  public CheckRegions getCheckRegions() {
    return checkRegions;
  }

  public void setCheckRegions(CheckRegions checkRegions) {
    this.checkRegions = checkRegions;
  }

  public Healthchecks consecutiveFails(Integer consecutiveFails) {
    this.consecutiveFails = consecutiveFails;
    return this;
  }

   /**
   * Get consecutiveFails
   * @return consecutiveFails
  **/
  @Schema(description = "")
  public Integer getConsecutiveFails() {
    return consecutiveFails;
  }

  public void setConsecutiveFails(Integer consecutiveFails) {
    this.consecutiveFails = consecutiveFails;
  }

  public Healthchecks consecutiveSuccesses(Integer consecutiveSuccesses) {
    this.consecutiveSuccesses = consecutiveSuccesses;
    return this;
  }

   /**
   * Get consecutiveSuccesses
   * @return consecutiveSuccesses
  **/
  @Schema(description = "")
  public Integer getConsecutiveSuccesses() {
    return consecutiveSuccesses;
  }

  public void setConsecutiveSuccesses(Integer consecutiveSuccesses) {
    this.consecutiveSuccesses = consecutiveSuccesses;
  }

  public Healthchecks createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

   /**
   * Get createdOn
   * @return createdOn
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }

  public Healthchecks description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Healthchecks failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

   /**
   * Get failureReason
   * @return failureReason
  **/
  @Schema(description = "")
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }

  public Healthchecks httpConfig(HttpConfig httpConfig) {
    this.httpConfig = httpConfig;
    return this;
  }

   /**
   * Get httpConfig
   * @return httpConfig
  **/
  @Schema(description = "")
  public HttpConfig getHttpConfig() {
    return httpConfig;
  }

  public void setHttpConfig(HttpConfig httpConfig) {
    this.httpConfig = httpConfig;
  }

  public Healthchecks id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Healthchecks interval(Integer interval) {
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @Schema(description = "")
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }

  public Healthchecks modifiedOn(OffsetDateTime modifiedOn) {
    this.modifiedOn = modifiedOn;
    return this;
  }

   /**
   * Get modifiedOn
   * @return modifiedOn
  **/
  @Schema(description = "")
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }

  public void setModifiedOn(OffsetDateTime modifiedOn) {
    this.modifiedOn = modifiedOn;
  }

  public Healthchecks name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Healthchecks retries(Integer retries) {
    this.retries = retries;
    return this;
  }

   /**
   * Get retries
   * @return retries
  **/
  @Schema(description = "")
  public Integer getRetries() {
    return retries;
  }

  public void setRetries(Integer retries) {
    this.retries = retries;
  }

  public Healthchecks status(Status status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }

  public Healthchecks suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

   /**
   * Get suspended
   * @return suspended
  **/
  @Schema(description = "")
  public Boolean getSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }

  public Healthchecks tcpConfig(TcpConfig tcpConfig) {
    this.tcpConfig = tcpConfig;
    return this;
  }

   /**
   * Get tcpConfig
   * @return tcpConfig
  **/
  @Schema(description = "")
  public TcpConfig getTcpConfig() {
    return tcpConfig;
  }

  public void setTcpConfig(TcpConfig tcpConfig) {
    this.tcpConfig = tcpConfig;
  }

  public Healthchecks timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Get timeout
   * @return timeout
  **/
  @Schema(description = "")
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }

  public Healthchecks type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Healthchecks healthchecks = (Healthchecks) o;
    return Objects.equals(this.address, healthchecks.address) &&
        Objects.equals(this.checkRegions, healthchecks.checkRegions) &&
        Objects.equals(this.consecutiveFails, healthchecks.consecutiveFails) &&
        Objects.equals(this.consecutiveSuccesses, healthchecks.consecutiveSuccesses) &&
        Objects.equals(this.createdOn, healthchecks.createdOn) &&
        Objects.equals(this.description, healthchecks.description) &&
        Objects.equals(this.failureReason, healthchecks.failureReason) &&
        Objects.equals(this.httpConfig, healthchecks.httpConfig) &&
        Objects.equals(this.id, healthchecks.id) &&
        Objects.equals(this.interval, healthchecks.interval) &&
        Objects.equals(this.modifiedOn, healthchecks.modifiedOn) &&
        Objects.equals(this.name, healthchecks.name) &&
        Objects.equals(this.retries, healthchecks.retries) &&
        Objects.equals(this.status, healthchecks.status) &&
        Objects.equals(this.suspended, healthchecks.suspended) &&
        Objects.equals(this.tcpConfig, healthchecks.tcpConfig) &&
        Objects.equals(this.timeout, healthchecks.timeout) &&
        Objects.equals(this.type, healthchecks.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, checkRegions, consecutiveFails, consecutiveSuccesses, createdOn, description, failureReason, httpConfig, id, interval, modifiedOn, name, retries, status, suspended, tcpConfig, timeout, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Healthchecks {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    checkRegions: ").append(toIndentedString(checkRegions)).append("\n");
    sb.append("    consecutiveFails: ").append(toIndentedString(consecutiveFails)).append("\n");
    sb.append("    consecutiveSuccesses: ").append(toIndentedString(consecutiveSuccesses)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    httpConfig: ").append(toIndentedString(httpConfig)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    tcpConfig: ").append(toIndentedString(tcpConfig)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
