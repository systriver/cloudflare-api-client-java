/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs
 */
@Schema(description = "Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class RulesettingsEgress {
  @SerializedName("ipv4")
  private String ipv4 = null;

  @SerializedName("ipv4_fallback")
  private String ipv4Fallback = null;

  @SerializedName("ipv6")
  private String ipv6 = null;

  public RulesettingsEgress ipv4(String ipv4) {
    this.ipv4 = ipv4;
    return this;
  }

   /**
   * The IPv4 address to be used for egress.
   * @return ipv4
  **/
  @Schema(example = "192.0.2.2", description = "The IPv4 address to be used for egress.")
  public String getIpv4() {
    return ipv4;
  }

  public void setIpv4(String ipv4) {
    this.ipv4 = ipv4;
  }

  public RulesettingsEgress ipv4Fallback(String ipv4Fallback) {
    this.ipv4Fallback = ipv4Fallback;
    return this;
  }

   /**
   * The IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be &#x27;0.0.0.0&#x27; to indicate local egreass via Warp IPs.
   * @return ipv4Fallback
  **/
  @Schema(example = "192.0.2.3", description = "The IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egreass via Warp IPs.")
  public String getIpv4Fallback() {
    return ipv4Fallback;
  }

  public void setIpv4Fallback(String ipv4Fallback) {
    this.ipv4Fallback = ipv4Fallback;
  }

  public RulesettingsEgress ipv6(String ipv6) {
    this.ipv6 = ipv6;
    return this;
  }

   /**
   * The IPv6 range to be used for egress.
   * @return ipv6
  **/
  @Schema(example = "2001:DB8::/64", description = "The IPv6 range to be used for egress.")
  public String getIpv6() {
    return ipv6;
  }

  public void setIpv6(String ipv6) {
    this.ipv6 = ipv6;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RulesettingsEgress rulesettingsEgress = (RulesettingsEgress) o;
    return Objects.equals(this.ipv4, rulesettingsEgress.ipv4) &&
        Objects.equals(this.ipv4Fallback, rulesettingsEgress.ipv4Fallback) &&
        Objects.equals(this.ipv6, rulesettingsEgress.ipv6);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipv4, ipv4Fallback, ipv6);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RulesettingsEgress {\n");
    
    sb.append("    ipv4: ").append(toIndentedString(ipv4)).append("\n");
    sb.append("    ipv4Fallback: ").append(toIndentedString(ipv4Fallback)).append("\n");
    sb.append("    ipv6: ").append(toIndentedString(ipv6)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
