/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.LoginDesign;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Organizations
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class Organizations {
  @SerializedName("auth_domain")
  private String authDomain = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("is_ui_read_only")
  private Boolean isUiReadOnly = null;

  @SerializedName("login_design")
  private LoginDesign loginDesign = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("ui_read_only_toggle_reason")
  private String uiReadOnlyToggleReason = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  @SerializedName("user_seat_expiration_inactive_time")
  private String userSeatExpirationInactiveTime = null;

  public Organizations authDomain(String authDomain) {
    this.authDomain = authDomain;
    return this;
  }

   /**
   * Get authDomain
   * @return authDomain
  **/
  @Schema(description = "")
  public String getAuthDomain() {
    return authDomain;
  }

  public void setAuthDomain(String authDomain) {
    this.authDomain = authDomain;
  }

  public Organizations createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Organizations isUiReadOnly(Boolean isUiReadOnly) {
    this.isUiReadOnly = isUiReadOnly;
    return this;
  }

   /**
   * Get isUiReadOnly
   * @return isUiReadOnly
  **/
  @Schema(description = "")
  public Boolean getIsUiReadOnly() {
    return isUiReadOnly;
  }

  public void setIsUiReadOnly(Boolean isUiReadOnly) {
    this.isUiReadOnly = isUiReadOnly;
  }

  public Organizations loginDesign(LoginDesign loginDesign) {
    this.loginDesign = loginDesign;
    return this;
  }

   /**
   * Get loginDesign
   * @return loginDesign
  **/
  @Schema(description = "")
  public LoginDesign getLoginDesign() {
    return loginDesign;
  }

  public void setLoginDesign(LoginDesign loginDesign) {
    this.loginDesign = loginDesign;
  }

  public Organizations name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Organizations uiReadOnlyToggleReason(String uiReadOnlyToggleReason) {
    this.uiReadOnlyToggleReason = uiReadOnlyToggleReason;
    return this;
  }

   /**
   * Get uiReadOnlyToggleReason
   * @return uiReadOnlyToggleReason
  **/
  @Schema(description = "")
  public String getUiReadOnlyToggleReason() {
    return uiReadOnlyToggleReason;
  }

  public void setUiReadOnlyToggleReason(String uiReadOnlyToggleReason) {
    this.uiReadOnlyToggleReason = uiReadOnlyToggleReason;
  }

  public Organizations updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Organizations userSeatExpirationInactiveTime(String userSeatExpirationInactiveTime) {
    this.userSeatExpirationInactiveTime = userSeatExpirationInactiveTime;
    return this;
  }

   /**
   * Get userSeatExpirationInactiveTime
   * @return userSeatExpirationInactiveTime
  **/
  @Schema(description = "")
  public String getUserSeatExpirationInactiveTime() {
    return userSeatExpirationInactiveTime;
  }

  public void setUserSeatExpirationInactiveTime(String userSeatExpirationInactiveTime) {
    this.userSeatExpirationInactiveTime = userSeatExpirationInactiveTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Organizations organizations = (Organizations) o;
    return Objects.equals(this.authDomain, organizations.authDomain) &&
        Objects.equals(this.createdAt, organizations.createdAt) &&
        Objects.equals(this.isUiReadOnly, organizations.isUiReadOnly) &&
        Objects.equals(this.loginDesign, organizations.loginDesign) &&
        Objects.equals(this.name, organizations.name) &&
        Objects.equals(this.uiReadOnlyToggleReason, organizations.uiReadOnlyToggleReason) &&
        Objects.equals(this.updatedAt, organizations.updatedAt) &&
        Objects.equals(this.userSeatExpirationInactiveTime, organizations.userSeatExpirationInactiveTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authDomain, createdAt, isUiReadOnly, loginDesign, name, uiReadOnlyToggleReason, updatedAt, userSeatExpirationInactiveTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Organizations {\n");
    
    sb.append("    authDomain: ").append(toIndentedString(authDomain)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    isUiReadOnly: ").append(toIndentedString(isUiReadOnly)).append("\n");
    sb.append("    loginDesign: ").append(toIndentedString(loginDesign)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uiReadOnlyToggleReason: ").append(toIndentedString(uiReadOnlyToggleReason)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userSeatExpirationInactiveTime: ").append(toIndentedString(userSeatExpirationInactiveTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
