/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * TlsConfigRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class TlsConfigRequest implements SchemasConfigRequest {
  @SerializedName("sha256")
  private String sha256 = null;

  @SerializedName("tls_sockaddr")
  private String tlsSockaddr = null;

  public TlsConfigRequest sha256(String sha256) {
    this.sha256 = sha256;
    return this;
  }

   /**
   * The SHA-256 hash of the TLS certificate presented by the host found at tls_sockaddr. If absent, regular certificate verification (trusted roots, valid timestamp, etc) will be used to validate the certificate.
   * @return sha256
  **/
  @Schema(example = "b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c", description = "The SHA-256 hash of the TLS certificate presented by the host found at tls_sockaddr. If absent, regular certificate verification (trusted roots, valid timestamp, etc) will be used to validate the certificate.")
  public String getSha256() {
    return sha256;
  }

  public void setSha256(String sha256) {
    this.sha256 = sha256;
  }

  public TlsConfigRequest tlsSockaddr(String tlsSockaddr) {
    this.tlsSockaddr = tlsSockaddr;
    return this;
  }

   /**
   * A network address of the form \&quot;host:port\&quot; that the WARP client will use to detect the presence of a TLS host.
   * @return tlsSockaddr
  **/
  @Schema(example = "foobar:1234", required = true, description = "A network address of the form \"host:port\" that the WARP client will use to detect the presence of a TLS host.")
  public String getTlsSockaddr() {
    return tlsSockaddr;
  }

  public void setTlsSockaddr(String tlsSockaddr) {
    this.tlsSockaddr = tlsSockaddr;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsConfigRequest tlsConfigRequest = (TlsConfigRequest) o;
    return Objects.equals(this.sha256, tlsConfigRequest.sha256) &&
        Objects.equals(this.tlsSockaddr, tlsConfigRequest.tlsSockaddr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sha256, tlsSockaddr);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsConfigRequest {\n");
    
    sb.append("    sha256: ").append(toIndentedString(sha256)).append("\n");
    sb.append("    tlsSockaddr: ").append(toIndentedString(tlsSockaddr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
