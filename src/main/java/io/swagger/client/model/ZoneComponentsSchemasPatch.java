/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.VanityNameServers;
import io.swagger.client.model.ZoneComponentsschemaspatchPlan;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ZoneComponentsSchemasPatch
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class ZoneComponentsSchemasPatch {
  @SerializedName("paused")
  private Boolean paused = null;

  @SerializedName("plan")
  private ZoneComponentsschemaspatchPlan plan = null;

  /**
   * A full zone implies that DNS is hosted with Cloudflare. A partial zone is typically a partner-hosted zone or a CNAME setup. This parameter is only available to Enterprise customers or if it has been explicitly enabled on a zone.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FULL("full"),
    PARTIAL("partial");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("vanity_name_servers")
  private VanityNameServers vanityNameServers = null;

  public ZoneComponentsSchemasPatch paused(Boolean paused) {
    this.paused = paused;
    return this;
  }

   /**
   * Get paused
   * @return paused
  **/
  @Schema(description = "")
  public Boolean getPaused() {
    return paused;
  }

  public void setPaused(Boolean paused) {
    this.paused = paused;
  }

  public ZoneComponentsSchemasPatch plan(ZoneComponentsschemaspatchPlan plan) {
    this.plan = plan;
    return this;
  }

   /**
   * Get plan
   * @return plan
  **/
  @Schema(description = "")
  public ZoneComponentsschemaspatchPlan getPlan() {
    return plan;
  }

  public void setPlan(ZoneComponentsschemaspatchPlan plan) {
    this.plan = plan;
  }

  public ZoneComponentsSchemasPatch type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * A full zone implies that DNS is hosted with Cloudflare. A partial zone is typically a partner-hosted zone or a CNAME setup. This parameter is only available to Enterprise customers or if it has been explicitly enabled on a zone.
   * @return type
  **/
  @Schema(example = "full", description = "A full zone implies that DNS is hosted with Cloudflare. A partial zone is typically a partner-hosted zone or a CNAME setup. This parameter is only available to Enterprise customers or if it has been explicitly enabled on a zone.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ZoneComponentsSchemasPatch vanityNameServers(VanityNameServers vanityNameServers) {
    this.vanityNameServers = vanityNameServers;
    return this;
  }

   /**
   * Get vanityNameServers
   * @return vanityNameServers
  **/
  @Schema(description = "")
  public VanityNameServers getVanityNameServers() {
    return vanityNameServers;
  }

  public void setVanityNameServers(VanityNameServers vanityNameServers) {
    this.vanityNameServers = vanityNameServers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZoneComponentsSchemasPatch zoneComponentsSchemasPatch = (ZoneComponentsSchemasPatch) o;
    return Objects.equals(this.paused, zoneComponentsSchemasPatch.paused) &&
        Objects.equals(this.plan, zoneComponentsSchemasPatch.plan) &&
        Objects.equals(this.type, zoneComponentsSchemasPatch.type) &&
        Objects.equals(this.vanityNameServers, zoneComponentsSchemasPatch.vanityNameServers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paused, plan, type, vanityNameServers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZoneComponentsSchemasPatch {\n");
    
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vanityNameServers: ").append(toIndentedString(vanityNameServers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
