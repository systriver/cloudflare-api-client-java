/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * Configures cookie attributes for session affinity cookie.
 */
@Schema(description = "Configures cookie attributes for session affinity cookie.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class SessionAffinityAttributes {
  @SerializedName("drain_duration")
  private BigDecimal drainDuration = null;

  /**
   * Configures the SameSite attribute on session affinity cookie. Value \&quot;Auto\&quot; will be translated to \&quot;Lax\&quot; or \&quot;None\&quot; depending if Always Use HTTPS is enabled. Note: when using value \&quot;None\&quot;, the secure attribute can not be set to \&quot;Never\&quot;.
   */
  @JsonAdapter(SamesiteEnum.Adapter.class)
  public enum SamesiteEnum {
    AUTO("Auto"),
    LAX("Lax"),
    NONE("None"),
    STRICT("Strict");

    private String value;

    SamesiteEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SamesiteEnum fromValue(String input) {
      for (SamesiteEnum b : SamesiteEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SamesiteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SamesiteEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SamesiteEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SamesiteEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("samesite")
  private SamesiteEnum samesite = SamesiteEnum.AUTO;

  /**
   * Configures the Secure attribute on session affinity cookie. Value \&quot;Always\&quot; indicates the Secure attribute will be set in the Set-Cookie header, \&quot;Never\&quot; indicates the Secure attribute will not be set, and \&quot;Auto\&quot; will set the Secure attribute depending if Always Use HTTPS is enabled.
   */
  @JsonAdapter(SecureEnum.Adapter.class)
  public enum SecureEnum {
    AUTO("Auto"),
    ALWAYS("Always"),
    NEVER("Never");

    private String value;

    SecureEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SecureEnum fromValue(String input) {
      for (SecureEnum b : SecureEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SecureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecureEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SecureEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SecureEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("secure")
  private SecureEnum secure = SecureEnum.AUTO;

  /**
   * Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value \&quot;none\&quot; means no failover takes place for sessions pinned to the origin (default). Value \&quot;temporary\&quot; means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value \&quot;sticky\&quot; means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance.
   */
  @JsonAdapter(ZeroDowntimeFailoverEnum.Adapter.class)
  public enum ZeroDowntimeFailoverEnum {
    NONE("none"),
    TEMPORARY("temporary"),
    STICKY("sticky");

    private String value;

    ZeroDowntimeFailoverEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ZeroDowntimeFailoverEnum fromValue(String input) {
      for (ZeroDowntimeFailoverEnum b : ZeroDowntimeFailoverEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ZeroDowntimeFailoverEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ZeroDowntimeFailoverEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ZeroDowntimeFailoverEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ZeroDowntimeFailoverEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("zero_downtime_failover")
  private ZeroDowntimeFailoverEnum zeroDowntimeFailover = ZeroDowntimeFailoverEnum.NONE;

  public SessionAffinityAttributes drainDuration(BigDecimal drainDuration) {
    this.drainDuration = drainDuration;
    return this;
  }

   /**
   * Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
   * @return drainDuration
  **/
  @Schema(example = "100", description = "Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.")
  public BigDecimal getDrainDuration() {
    return drainDuration;
  }

  public void setDrainDuration(BigDecimal drainDuration) {
    this.drainDuration = drainDuration;
  }

  public SessionAffinityAttributes samesite(SamesiteEnum samesite) {
    this.samesite = samesite;
    return this;
  }

   /**
   * Configures the SameSite attribute on session affinity cookie. Value \&quot;Auto\&quot; will be translated to \&quot;Lax\&quot; or \&quot;None\&quot; depending if Always Use HTTPS is enabled. Note: when using value \&quot;None\&quot;, the secure attribute can not be set to \&quot;Never\&quot;.
   * @return samesite
  **/
  @Schema(example = "Auto", description = "Configures the SameSite attribute on session affinity cookie. Value \"Auto\" will be translated to \"Lax\" or \"None\" depending if Always Use HTTPS is enabled. Note: when using value \"None\", the secure attribute can not be set to \"Never\".")
  public SamesiteEnum getSamesite() {
    return samesite;
  }

  public void setSamesite(SamesiteEnum samesite) {
    this.samesite = samesite;
  }

  public SessionAffinityAttributes secure(SecureEnum secure) {
    this.secure = secure;
    return this;
  }

   /**
   * Configures the Secure attribute on session affinity cookie. Value \&quot;Always\&quot; indicates the Secure attribute will be set in the Set-Cookie header, \&quot;Never\&quot; indicates the Secure attribute will not be set, and \&quot;Auto\&quot; will set the Secure attribute depending if Always Use HTTPS is enabled.
   * @return secure
  **/
  @Schema(example = "Auto", description = "Configures the Secure attribute on session affinity cookie. Value \"Always\" indicates the Secure attribute will be set in the Set-Cookie header, \"Never\" indicates the Secure attribute will not be set, and \"Auto\" will set the Secure attribute depending if Always Use HTTPS is enabled.")
  public SecureEnum getSecure() {
    return secure;
  }

  public void setSecure(SecureEnum secure) {
    this.secure = secure;
  }

  public SessionAffinityAttributes zeroDowntimeFailover(ZeroDowntimeFailoverEnum zeroDowntimeFailover) {
    this.zeroDowntimeFailover = zeroDowntimeFailover;
    return this;
  }

   /**
   * Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value \&quot;none\&quot; means no failover takes place for sessions pinned to the origin (default). Value \&quot;temporary\&quot; means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value \&quot;sticky\&quot; means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance.
   * @return zeroDowntimeFailover
  **/
  @Schema(example = "sticky", description = "Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value \"none\" means no failover takes place for sessions pinned to the origin (default). Value \"temporary\" means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value \"sticky\" means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance.")
  public ZeroDowntimeFailoverEnum getZeroDowntimeFailover() {
    return zeroDowntimeFailover;
  }

  public void setZeroDowntimeFailover(ZeroDowntimeFailoverEnum zeroDowntimeFailover) {
    this.zeroDowntimeFailover = zeroDowntimeFailover;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionAffinityAttributes sessionAffinityAttributes = (SessionAffinityAttributes) o;
    return Objects.equals(this.drainDuration, sessionAffinityAttributes.drainDuration) &&
        Objects.equals(this.samesite, sessionAffinityAttributes.samesite) &&
        Objects.equals(this.secure, sessionAffinityAttributes.secure) &&
        Objects.equals(this.zeroDowntimeFailover, sessionAffinityAttributes.zeroDowntimeFailover);
  }

  @Override
  public int hashCode() {
    return Objects.hash(drainDuration, samesite, secure, zeroDowntimeFailover);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionAffinityAttributes {\n");
    
    sb.append("    drainDuration: ").append(toIndentedString(drainDuration)).append("\n");
    sb.append("    samesite: ").append(toIndentedString(samesite)).append("\n");
    sb.append("    secure: ").append(toIndentedString(secure)).append("\n");
    sb.append("    zeroDowntimeFailover: ").append(toIndentedString(zeroDowntimeFailover)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
