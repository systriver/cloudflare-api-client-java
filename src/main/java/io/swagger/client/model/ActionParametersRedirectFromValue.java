/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The parameters that control the redirect.
 */
@Schema(description = "The parameters that control the redirect.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class ActionParametersRedirectFromValue {
  @SerializedName("preserve_query_string")
  private Boolean preserveQueryString = null;

  @SerializedName("status_code")
  private Integer statusCode = null;

  @SerializedName("target_url")
  private OneOfactionParametersRedirectFromValueTargetUrl targetUrl = null;

  public ActionParametersRedirectFromValue preserveQueryString(Boolean preserveQueryString) {
    this.preserveQueryString = preserveQueryString;
    return this;
  }

   /**
   * Whether the query string for the request should be carried to the redirect&#x27;s target url.
   * @return preserveQueryString
  **/
  @Schema(example = "true", description = "Whether the query string for the request should be carried to the redirect's target url.")
  public Boolean isPreserveQueryString() {
    return preserveQueryString;
  }

  public void setPreserveQueryString(Boolean preserveQueryString) {
    this.preserveQueryString = preserveQueryString;
  }

  public ActionParametersRedirectFromValue statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * The status code to use for the redirect.
   * @return statusCode
  **/
  @Schema(description = "The status code to use for the redirect.")
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }

  public ActionParametersRedirectFromValue targetUrl(OneOfactionParametersRedirectFromValueTargetUrl targetUrl) {
    this.targetUrl = targetUrl;
    return this;
  }

   /**
   * Get targetUrl
   * @return targetUrl
  **/
  @Schema(description = "")
  public OneOfactionParametersRedirectFromValueTargetUrl getTargetUrl() {
    return targetUrl;
  }

  public void setTargetUrl(OneOfactionParametersRedirectFromValueTargetUrl targetUrl) {
    this.targetUrl = targetUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionParametersRedirectFromValue actionParametersRedirectFromValue = (ActionParametersRedirectFromValue) o;
    return Objects.equals(this.preserveQueryString, actionParametersRedirectFromValue.preserveQueryString) &&
        Objects.equals(this.statusCode, actionParametersRedirectFromValue.statusCode) &&
        Objects.equals(this.targetUrl, actionParametersRedirectFromValue.targetUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(preserveQueryString, statusCode, targetUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionParametersRedirectFromValue {\n");
    
    sb.append("    preserveQueryString: ").append(toIndentedString(preserveQueryString)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    targetUrl: ").append(toIndentedString(targetUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
