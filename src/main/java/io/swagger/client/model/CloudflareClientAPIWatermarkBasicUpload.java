/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * CloudflareClientAPIWatermarkBasicUpload
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T13:40:27.702461541+09:00[Asia/Tokyo]")
public class CloudflareClientAPIWatermarkBasicUpload {
  @SerializedName("file")
  private String file = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("opacity")
  private BigDecimal opacity = null;

  @SerializedName("padding")
  private BigDecimal padding = null;

  @SerializedName("position")
  private String position = null;

  @SerializedName("scale")
  private BigDecimal scale = null;

  public CloudflareClientAPIWatermarkBasicUpload file(String file) {
    this.file = file;
    return this;
  }

   /**
   * The image file to upload.
   * @return file
  **/
  @Schema(example = "@/Users/rchen/Downloads/watermark.png", required = true, description = "The image file to upload.")
  public String getFile() {
    return file;
  }

  public void setFile(String file) {
    this.file = file;
  }

  public CloudflareClientAPIWatermarkBasicUpload name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CloudflareClientAPIWatermarkBasicUpload opacity(BigDecimal opacity) {
    this.opacity = opacity;
    return this;
  }

   /**
   * Get opacity
   * @return opacity
  **/
  @Schema(description = "")
  public BigDecimal getOpacity() {
    return opacity;
  }

  public void setOpacity(BigDecimal opacity) {
    this.opacity = opacity;
  }

  public CloudflareClientAPIWatermarkBasicUpload padding(BigDecimal padding) {
    this.padding = padding;
    return this;
  }

   /**
   * Get padding
   * @return padding
  **/
  @Schema(description = "")
  public BigDecimal getPadding() {
    return padding;
  }

  public void setPadding(BigDecimal padding) {
    this.padding = padding;
  }

  public CloudflareClientAPIWatermarkBasicUpload position(String position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(description = "")
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }

  public CloudflareClientAPIWatermarkBasicUpload scale(BigDecimal scale) {
    this.scale = scale;
    return this;
  }

   /**
   * Get scale
   * @return scale
  **/
  @Schema(description = "")
  public BigDecimal getScale() {
    return scale;
  }

  public void setScale(BigDecimal scale) {
    this.scale = scale;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudflareClientAPIWatermarkBasicUpload cloudflareClientAPIWatermarkBasicUpload = (CloudflareClientAPIWatermarkBasicUpload) o;
    return Objects.equals(this.file, cloudflareClientAPIWatermarkBasicUpload.file) &&
        Objects.equals(this.name, cloudflareClientAPIWatermarkBasicUpload.name) &&
        Objects.equals(this.opacity, cloudflareClientAPIWatermarkBasicUpload.opacity) &&
        Objects.equals(this.padding, cloudflareClientAPIWatermarkBasicUpload.padding) &&
        Objects.equals(this.position, cloudflareClientAPIWatermarkBasicUpload.position) &&
        Objects.equals(this.scale, cloudflareClientAPIWatermarkBasicUpload.scale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(file, name, opacity, padding, position, scale);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudflareClientAPIWatermarkBasicUpload {\n");
    
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    opacity: ").append(toIndentedString(opacity)).append("\n");
    sb.append("    padding: ").append(toIndentedString(padding)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
