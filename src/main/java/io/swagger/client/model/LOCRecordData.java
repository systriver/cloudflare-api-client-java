/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * Components of a LOC record.
 */
@Schema(description = "Components of a LOC record.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T13:40:27.702461541+09:00[Asia/Tokyo]")
public class LOCRecordData {
  @SerializedName("altitude")
  private BigDecimal altitude = null;

  @SerializedName("lat_degrees")
  private BigDecimal latDegrees = null;

  @SerializedName("lat_direction")
  private String latDirection = null;

  @SerializedName("lat_minutes")
  private BigDecimal latMinutes = new BigDecimal(0);

  @SerializedName("lat_seconds")
  private BigDecimal latSeconds = new BigDecimal(0);

  @SerializedName("long_degrees")
  private BigDecimal longDegrees = null;

  @SerializedName("long_direction")
  private String longDirection = null;

  @SerializedName("long_minutes")
  private BigDecimal longMinutes = new BigDecimal(0);

  @SerializedName("long_seconds")
  private BigDecimal longSeconds = new BigDecimal(0);

  @SerializedName("precision_horz")
  private BigDecimal precisionHorz = new BigDecimal(0);

  @SerializedName("precision_vert")
  private BigDecimal precisionVert = new BigDecimal(0);

  @SerializedName("size")
  private BigDecimal size = new BigDecimal(0);

  public LOCRecordData altitude(BigDecimal altitude) {
    this.altitude = altitude;
    return this;
  }

   /**
   * Altitude of location in meters.
   * minimum: -100000
   * maximum: 42849672
   * @return altitude
  **/
  @Schema(example = "0", description = "Altitude of location in meters.")
  public BigDecimal getAltitude() {
    return altitude;
  }

  public void setAltitude(BigDecimal altitude) {
    this.altitude = altitude;
  }

  public LOCRecordData latDegrees(BigDecimal latDegrees) {
    this.latDegrees = latDegrees;
    return this;
  }

   /**
   * Degrees of latitude.
   * minimum: 0
   * maximum: 90
   * @return latDegrees
  **/
  @Schema(example = "37", description = "Degrees of latitude.")
  public BigDecimal getLatDegrees() {
    return latDegrees;
  }

  public void setLatDegrees(BigDecimal latDegrees) {
    this.latDegrees = latDegrees;
  }

  public LOCRecordData latDirection(String latDirection) {
    this.latDirection = latDirection;
    return this;
  }

   /**
   * Latitude direction.
   * @return latDirection
  **/
  @Schema(example = "N", description = "Latitude direction.")
  public String getLatDirection() {
    return latDirection;
  }

  public void setLatDirection(String latDirection) {
    this.latDirection = latDirection;
  }

  public LOCRecordData latMinutes(BigDecimal latMinutes) {
    this.latMinutes = latMinutes;
    return this;
  }

   /**
   * Minutes of latitude.
   * minimum: 0
   * maximum: 59
   * @return latMinutes
  **/
  @Schema(example = "46", description = "Minutes of latitude.")
  public BigDecimal getLatMinutes() {
    return latMinutes;
  }

  public void setLatMinutes(BigDecimal latMinutes) {
    this.latMinutes = latMinutes;
  }

  public LOCRecordData latSeconds(BigDecimal latSeconds) {
    this.latSeconds = latSeconds;
    return this;
  }

   /**
   * Seconds of latitude.
   * minimum: 0
   * maximum: 59
   * @return latSeconds
  **/
  @Schema(example = "46", description = "Seconds of latitude.")
  public BigDecimal getLatSeconds() {
    return latSeconds;
  }

  public void setLatSeconds(BigDecimal latSeconds) {
    this.latSeconds = latSeconds;
  }

  public LOCRecordData longDegrees(BigDecimal longDegrees) {
    this.longDegrees = longDegrees;
    return this;
  }

   /**
   * Degrees of longitude.
   * minimum: 0
   * maximum: 180
   * @return longDegrees
  **/
  @Schema(example = "122", description = "Degrees of longitude.")
  public BigDecimal getLongDegrees() {
    return longDegrees;
  }

  public void setLongDegrees(BigDecimal longDegrees) {
    this.longDegrees = longDegrees;
  }

  public LOCRecordData longDirection(String longDirection) {
    this.longDirection = longDirection;
    return this;
  }

   /**
   * Longitude direction.
   * @return longDirection
  **/
  @Schema(example = "W", description = "Longitude direction.")
  public String getLongDirection() {
    return longDirection;
  }

  public void setLongDirection(String longDirection) {
    this.longDirection = longDirection;
  }

  public LOCRecordData longMinutes(BigDecimal longMinutes) {
    this.longMinutes = longMinutes;
    return this;
  }

   /**
   * Minutes of longitude.
   * minimum: 0
   * maximum: 59
   * @return longMinutes
  **/
  @Schema(example = "23", description = "Minutes of longitude.")
  public BigDecimal getLongMinutes() {
    return longMinutes;
  }

  public void setLongMinutes(BigDecimal longMinutes) {
    this.longMinutes = longMinutes;
  }

  public LOCRecordData longSeconds(BigDecimal longSeconds) {
    this.longSeconds = longSeconds;
    return this;
  }

   /**
   * Seconds of longitude.
   * minimum: 0
   * maximum: 59
   * @return longSeconds
  **/
  @Schema(example = "35", description = "Seconds of longitude.")
  public BigDecimal getLongSeconds() {
    return longSeconds;
  }

  public void setLongSeconds(BigDecimal longSeconds) {
    this.longSeconds = longSeconds;
  }

  public LOCRecordData precisionHorz(BigDecimal precisionHorz) {
    this.precisionHorz = precisionHorz;
    return this;
  }

   /**
   * Horizontal precision of location.
   * minimum: 0
   * maximum: 90000000
   * @return precisionHorz
  **/
  @Schema(example = "0", description = "Horizontal precision of location.")
  public BigDecimal getPrecisionHorz() {
    return precisionHorz;
  }

  public void setPrecisionHorz(BigDecimal precisionHorz) {
    this.precisionHorz = precisionHorz;
  }

  public LOCRecordData precisionVert(BigDecimal precisionVert) {
    this.precisionVert = precisionVert;
    return this;
  }

   /**
   * Vertical precision of location.
   * minimum: 0
   * maximum: 90000000
   * @return precisionVert
  **/
  @Schema(example = "0", description = "Vertical precision of location.")
  public BigDecimal getPrecisionVert() {
    return precisionVert;
  }

  public void setPrecisionVert(BigDecimal precisionVert) {
    this.precisionVert = precisionVert;
  }

  public LOCRecordData size(BigDecimal size) {
    this.size = size;
    return this;
  }

   /**
   * Size of location in meters.
   * minimum: 0
   * maximum: 90000000
   * @return size
  **/
  @Schema(example = "100", description = "Size of location in meters.")
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LOCRecordData loCRecordData = (LOCRecordData) o;
    return Objects.equals(this.altitude, loCRecordData.altitude) &&
        Objects.equals(this.latDegrees, loCRecordData.latDegrees) &&
        Objects.equals(this.latDirection, loCRecordData.latDirection) &&
        Objects.equals(this.latMinutes, loCRecordData.latMinutes) &&
        Objects.equals(this.latSeconds, loCRecordData.latSeconds) &&
        Objects.equals(this.longDegrees, loCRecordData.longDegrees) &&
        Objects.equals(this.longDirection, loCRecordData.longDirection) &&
        Objects.equals(this.longMinutes, loCRecordData.longMinutes) &&
        Objects.equals(this.longSeconds, loCRecordData.longSeconds) &&
        Objects.equals(this.precisionHorz, loCRecordData.precisionHorz) &&
        Objects.equals(this.precisionVert, loCRecordData.precisionVert) &&
        Objects.equals(this.size, loCRecordData.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(altitude, latDegrees, latDirection, latMinutes, latSeconds, longDegrees, longDirection, longMinutes, longSeconds, precisionHorz, precisionVert, size);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LOCRecordData {\n");
    
    sb.append("    altitude: ").append(toIndentedString(altitude)).append("\n");
    sb.append("    latDegrees: ").append(toIndentedString(latDegrees)).append("\n");
    sb.append("    latDirection: ").append(toIndentedString(latDirection)).append("\n");
    sb.append("    latMinutes: ").append(toIndentedString(latMinutes)).append("\n");
    sb.append("    latSeconds: ").append(toIndentedString(latSeconds)).append("\n");
    sb.append("    longDegrees: ").append(toIndentedString(longDegrees)).append("\n");
    sb.append("    longDirection: ").append(toIndentedString(longDirection)).append("\n");
    sb.append("    longMinutes: ").append(toIndentedString(longMinutes)).append("\n");
    sb.append("    longSeconds: ").append(toIndentedString(longSeconds)).append("\n");
    sb.append("    precisionHorz: ").append(toIndentedString(precisionHorz)).append("\n");
    sb.append("    precisionVert: ").append(toIndentedString(precisionVert)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
