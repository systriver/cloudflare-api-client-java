/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ScriptsScriptNameBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class ScriptsScriptNameBody {
  @SerializedName("&quot;second-file.js&quot;")
  private String secondFileJs = null;

  @SerializedName("&quot;worker.js&quot;")
  private String workerJs = null;

  @SerializedName("metadata")
  private String metadata = null;

  public ScriptsScriptNameBody secondFileJs(String secondFileJs) {
    this.secondFileJs = secondFileJs;
    return this;
  }

   /**
   * Worker script.
   * @return secondFileJs
  **/
  @Schema(example = "@second-file.js;type=application/javascript+module", description = "Worker script.")
  public String getSecondFileJs() {
    return secondFileJs;
  }

  public void setSecondFileJs(String secondFileJs) {
    this.secondFileJs = secondFileJs;
  }

  public ScriptsScriptNameBody workerJs(String workerJs) {
    this.workerJs = workerJs;
    return this;
  }

   /**
   * Worker script.
   * @return workerJs
  **/
  @Schema(example = "@worker.js;type=application/javascript+module", description = "Worker script.")
  public String getWorkerJs() {
    return workerJs;
  }

  public void setWorkerJs(String workerJs) {
    this.workerJs = workerJs;
  }

  public ScriptsScriptNameBody metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Metadata for script such as bindings. Main module needs to be specified with &#x60;main_module&#x60;.
   * @return metadata
  **/
  @Schema(example = "{\"main_module\": \"worker.js\", \"some_binding\": \"stuff\"}", description = "Metadata for script such as bindings. Main module needs to be specified with `main_module`.")
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScriptsScriptNameBody scriptsScriptNameBody = (ScriptsScriptNameBody) o;
    return Objects.equals(this.secondFileJs, scriptsScriptNameBody.secondFileJs) &&
        Objects.equals(this.workerJs, scriptsScriptNameBody.workerJs) &&
        Objects.equals(this.metadata, scriptsScriptNameBody.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(secondFileJs, workerJs, metadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScriptsScriptNameBody {\n");
    
    sb.append("    secondFileJs: ").append(toIndentedString(secondFileJs)).append("\n");
    sb.append("    workerJs: ").append(toIndentedString(workerJs)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
