/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * TunnelHealthCheck
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class TunnelHealthCheck {
  @SerializedName("enabled")
  private Boolean enabled = true;

  /**
   * How frequent the health check is run. The default value is &#x60;mid&#x60;.
   */
  @JsonAdapter(RateEnum.Adapter.class)
  public enum RateEnum {
    LOW("low"),
    MID("mid"),
    HIGH("high");

    private String value;

    RateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RateEnum fromValue(String input) {
      for (RateEnum b : RateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RateEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RateEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("rate")
  private RateEnum rate = RateEnum.MID;

  @SerializedName("target")
  private String target = null;

  /**
   * The type of healthcheck to run, reply or request. The default value is &#x60;reply&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    REPLY("reply"),
    REQUEST("request");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = TypeEnum.REPLY;

  public TunnelHealthCheck enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Determines whether to run healthchecks for a tunnel.
   * @return enabled
  **/
  @Schema(example = "true", description = "Determines whether to run healthchecks for a tunnel.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public TunnelHealthCheck rate(RateEnum rate) {
    this.rate = rate;
    return this;
  }

   /**
   * How frequent the health check is run. The default value is &#x60;mid&#x60;.
   * @return rate
  **/
  @Schema(example = "low", description = "How frequent the health check is run. The default value is `mid`.")
  public RateEnum getRate() {
    return rate;
  }

  public void setRate(RateEnum rate) {
    this.rate = rate;
  }

  public TunnelHealthCheck target(String target) {
    this.target = target;
    return this;
  }

   /**
   * The destination address in a request type health check. After the healthcheck is decapsulated at the customer end of the tunnel, the ICMP echo will be forwarded to this address. This field defaults to &#x60;customer_gre_endpoint address&#x60;.
   * @return target
  **/
  @Schema(example = "203.0.113.1", description = "The destination address in a request type health check. After the healthcheck is decapsulated at the customer end of the tunnel, the ICMP echo will be forwarded to this address. This field defaults to `customer_gre_endpoint address`.")
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }

  public TunnelHealthCheck type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of healthcheck to run, reply or request. The default value is &#x60;reply&#x60;.
   * @return type
  **/
  @Schema(example = "request", description = "The type of healthcheck to run, reply or request. The default value is `reply`.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TunnelHealthCheck tunnelHealthCheck = (TunnelHealthCheck) o;
    return Objects.equals(this.enabled, tunnelHealthCheck.enabled) &&
        Objects.equals(this.rate, tunnelHealthCheck.rate) &&
        Objects.equals(this.target, tunnelHealthCheck.target) &&
        Objects.equals(this.type, tunnelHealthCheck.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, rate, target, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TunnelHealthCheck {\n");
    
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
