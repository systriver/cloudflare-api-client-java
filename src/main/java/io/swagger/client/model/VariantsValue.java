/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Value of the zone setting.
 */
@Schema(description = "Value of the zone setting.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class VariantsValue {
  @SerializedName("avif")
  private List<Object> avif = null;

  @SerializedName("bmp")
  private List<Object> bmp = null;

  @SerializedName("gif")
  private List<Object> gif = null;

  @SerializedName("jp2")
  private List<Object> jp2 = null;

  @SerializedName("jpeg")
  private List<Object> jpeg = null;

  @SerializedName("jpg")
  private List<Object> jpg = null;

  @SerializedName("jpg2")
  private List<Object> jpg2 = null;

  @SerializedName("png")
  private List<Object> png = null;

  @SerializedName("tif")
  private List<Object> tif = null;

  @SerializedName("tiff")
  private List<Object> tiff = null;

  @SerializedName("webp")
  private List<Object> webp = null;

  public VariantsValue avif(List<Object> avif) {
    this.avif = avif;
    return this;
  }

  public VariantsValue addAvifItem(Object avifItem) {
    if (this.avif == null) {
      this.avif = new ArrayList<Object>();
    }
    this.avif.add(avifItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for avif.
   * @return avif
  **/
  @Schema(example = "[\"image/webp\",\"image/jpeg\"]", description = "List of strings with the MIME types of all the variants that should be served for avif.")
  public List<Object> getAvif() {
    return avif;
  }

  public void setAvif(List<Object> avif) {
    this.avif = avif;
  }

  public VariantsValue bmp(List<Object> bmp) {
    this.bmp = bmp;
    return this;
  }

  public VariantsValue addBmpItem(Object bmpItem) {
    if (this.bmp == null) {
      this.bmp = new ArrayList<Object>();
    }
    this.bmp.add(bmpItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for bmp.
   * @return bmp
  **/
  @Schema(example = "[\"image/webp\",\"image/jpeg\"]", description = "List of strings with the MIME types of all the variants that should be served for bmp.")
  public List<Object> getBmp() {
    return bmp;
  }

  public void setBmp(List<Object> bmp) {
    this.bmp = bmp;
  }

  public VariantsValue gif(List<Object> gif) {
    this.gif = gif;
    return this;
  }

  public VariantsValue addGifItem(Object gifItem) {
    if (this.gif == null) {
      this.gif = new ArrayList<Object>();
    }
    this.gif.add(gifItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for gif.
   * @return gif
  **/
  @Schema(example = "[\"image/webp\",\"image/jpeg\"]", description = "List of strings with the MIME types of all the variants that should be served for gif.")
  public List<Object> getGif() {
    return gif;
  }

  public void setGif(List<Object> gif) {
    this.gif = gif;
  }

  public VariantsValue jp2(List<Object> jp2) {
    this.jp2 = jp2;
    return this;
  }

  public VariantsValue addJp2Item(Object jp2Item) {
    if (this.jp2 == null) {
      this.jp2 = new ArrayList<Object>();
    }
    this.jp2.add(jp2Item);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for jp2.
   * @return jp2
  **/
  @Schema(example = "[\"image/webp\",\"image/avif\"]", description = "List of strings with the MIME types of all the variants that should be served for jp2.")
  public List<Object> getJp2() {
    return jp2;
  }

  public void setJp2(List<Object> jp2) {
    this.jp2 = jp2;
  }

  public VariantsValue jpeg(List<Object> jpeg) {
    this.jpeg = jpeg;
    return this;
  }

  public VariantsValue addJpegItem(Object jpegItem) {
    if (this.jpeg == null) {
      this.jpeg = new ArrayList<Object>();
    }
    this.jpeg.add(jpegItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for jpeg.
   * @return jpeg
  **/
  @Schema(example = "[\"image/webp\",\"image/avif\"]", description = "List of strings with the MIME types of all the variants that should be served for jpeg.")
  public List<Object> getJpeg() {
    return jpeg;
  }

  public void setJpeg(List<Object> jpeg) {
    this.jpeg = jpeg;
  }

  public VariantsValue jpg(List<Object> jpg) {
    this.jpg = jpg;
    return this;
  }

  public VariantsValue addJpgItem(Object jpgItem) {
    if (this.jpg == null) {
      this.jpg = new ArrayList<Object>();
    }
    this.jpg.add(jpgItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for jpg.
   * @return jpg
  **/
  @Schema(example = "[\"image/webp\",\"image/avif\"]", description = "List of strings with the MIME types of all the variants that should be served for jpg.")
  public List<Object> getJpg() {
    return jpg;
  }

  public void setJpg(List<Object> jpg) {
    this.jpg = jpg;
  }

  public VariantsValue jpg2(List<Object> jpg2) {
    this.jpg2 = jpg2;
    return this;
  }

  public VariantsValue addJpg2Item(Object jpg2Item) {
    if (this.jpg2 == null) {
      this.jpg2 = new ArrayList<Object>();
    }
    this.jpg2.add(jpg2Item);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for jpg2.
   * @return jpg2
  **/
  @Schema(example = "[\"image/webp\",\"image/avif\"]", description = "List of strings with the MIME types of all the variants that should be served for jpg2.")
  public List<Object> getJpg2() {
    return jpg2;
  }

  public void setJpg2(List<Object> jpg2) {
    this.jpg2 = jpg2;
  }

  public VariantsValue png(List<Object> png) {
    this.png = png;
    return this;
  }

  public VariantsValue addPngItem(Object pngItem) {
    if (this.png == null) {
      this.png = new ArrayList<Object>();
    }
    this.png.add(pngItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for png.
   * @return png
  **/
  @Schema(example = "[\"image/webp\",\"image/avif\"]", description = "List of strings with the MIME types of all the variants that should be served for png.")
  public List<Object> getPng() {
    return png;
  }

  public void setPng(List<Object> png) {
    this.png = png;
  }

  public VariantsValue tif(List<Object> tif) {
    this.tif = tif;
    return this;
  }

  public VariantsValue addTifItem(Object tifItem) {
    if (this.tif == null) {
      this.tif = new ArrayList<Object>();
    }
    this.tif.add(tifItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for tif.
   * @return tif
  **/
  @Schema(example = "[\"image/webp\",\"image/avif\"]", description = "List of strings with the MIME types of all the variants that should be served for tif.")
  public List<Object> getTif() {
    return tif;
  }

  public void setTif(List<Object> tif) {
    this.tif = tif;
  }

  public VariantsValue tiff(List<Object> tiff) {
    this.tiff = tiff;
    return this;
  }

  public VariantsValue addTiffItem(Object tiffItem) {
    if (this.tiff == null) {
      this.tiff = new ArrayList<Object>();
    }
    this.tiff.add(tiffItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for tiff.
   * @return tiff
  **/
  @Schema(example = "[\"image/webp\",\"image/avif\"]", description = "List of strings with the MIME types of all the variants that should be served for tiff.")
  public List<Object> getTiff() {
    return tiff;
  }

  public void setTiff(List<Object> tiff) {
    this.tiff = tiff;
  }

  public VariantsValue webp(List<Object> webp) {
    this.webp = webp;
    return this;
  }

  public VariantsValue addWebpItem(Object webpItem) {
    if (this.webp == null) {
      this.webp = new ArrayList<Object>();
    }
    this.webp.add(webpItem);
    return this;
  }

   /**
   * List of strings with the MIME types of all the variants that should be served for webp.
   * @return webp
  **/
  @Schema(example = "[\"image/jpeg\",\"image/avif\"]", description = "List of strings with the MIME types of all the variants that should be served for webp.")
  public List<Object> getWebp() {
    return webp;
  }

  public void setWebp(List<Object> webp) {
    this.webp = webp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariantsValue variantsValue = (VariantsValue) o;
    return Objects.equals(this.avif, variantsValue.avif) &&
        Objects.equals(this.bmp, variantsValue.bmp) &&
        Objects.equals(this.gif, variantsValue.gif) &&
        Objects.equals(this.jp2, variantsValue.jp2) &&
        Objects.equals(this.jpeg, variantsValue.jpeg) &&
        Objects.equals(this.jpg, variantsValue.jpg) &&
        Objects.equals(this.jpg2, variantsValue.jpg2) &&
        Objects.equals(this.png, variantsValue.png) &&
        Objects.equals(this.tif, variantsValue.tif) &&
        Objects.equals(this.tiff, variantsValue.tiff) &&
        Objects.equals(this.webp, variantsValue.webp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avif, bmp, gif, jp2, jpeg, jpg, jpg2, png, tif, tiff, webp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariantsValue {\n");
    
    sb.append("    avif: ").append(toIndentedString(avif)).append("\n");
    sb.append("    bmp: ").append(toIndentedString(bmp)).append("\n");
    sb.append("    gif: ").append(toIndentedString(gif)).append("\n");
    sb.append("    jp2: ").append(toIndentedString(jp2)).append("\n");
    sb.append("    jpeg: ").append(toIndentedString(jpeg)).append("\n");
    sb.append("    jpg: ").append(toIndentedString(jpg)).append("\n");
    sb.append("    jpg2: ").append(toIndentedString(jpg2)).append("\n");
    sb.append("    png: ").append(toIndentedString(png)).append("\n");
    sb.append("    tif: ").append(toIndentedString(tif)).append("\n");
    sb.append("    tiff: ").append(toIndentedString(tiff)).append("\n");
    sb.append("    webp: ").append(toIndentedString(webp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
