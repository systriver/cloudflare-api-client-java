/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Parameters specific to an HTTP or HTTPS health check.
 */
@Schema(description = "Parameters specific to an HTTP or HTTPS health check.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class HttpConfig {
  @SerializedName("allow_insecure")
  private Boolean allowInsecure = false;

  @SerializedName("expected_body")
  private String expectedBody = null;

  @SerializedName("expected_codes")
  private List<String> expectedCodes = null;

  @SerializedName("follow_redirects")
  private Boolean followRedirects = false;

  @SerializedName("header")
  private Object header = null;

  /**
   * The HTTP method to use for the health check.
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    GET("GET"),
    HEAD("HEAD");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MethodEnum fromValue(String input) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MethodEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("method")
  private MethodEnum method = MethodEnum.GET;

  @SerializedName("path")
  private String path = "/";

  @SerializedName("port")
  private Integer port = 80;

  public HttpConfig allowInsecure(Boolean allowInsecure) {
    this.allowInsecure = allowInsecure;
    return this;
  }

   /**
   * Do not validate the certificate when the health check uses HTTPS.
   * @return allowInsecure
  **/
  @Schema(description = "Do not validate the certificate when the health check uses HTTPS.")
  public Boolean isAllowInsecure() {
    return allowInsecure;
  }

  public void setAllowInsecure(Boolean allowInsecure) {
    this.allowInsecure = allowInsecure;
  }

  public HttpConfig expectedBody(String expectedBody) {
    this.expectedBody = expectedBody;
    return this;
  }

   /**
   * A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
   * @return expectedBody
  **/
  @Schema(example = "success", description = "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.")
  public String getExpectedBody() {
    return expectedBody;
  }

  public void setExpectedBody(String expectedBody) {
    this.expectedBody = expectedBody;
  }

  public HttpConfig expectedCodes(List<String> expectedCodes) {
    this.expectedCodes = expectedCodes;
    return this;
  }

  public HttpConfig addExpectedCodesItem(String expectedCodesItem) {
    if (this.expectedCodes == null) {
      this.expectedCodes = new ArrayList<String>();
    }
    this.expectedCodes.add(expectedCodesItem);
    return this;
  }

   /**
   * The expected HTTP response codes (e.g. \&quot;200\&quot;) or code ranges (e.g. \&quot;2xx\&quot; for all codes starting with 2) of the health check.
   * @return expectedCodes
  **/
  @Schema(example = "[\"2xx\",\"302\"]", description = "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.")
  public List<String> getExpectedCodes() {
    return expectedCodes;
  }

  public void setExpectedCodes(List<String> expectedCodes) {
    this.expectedCodes = expectedCodes;
  }

  public HttpConfig followRedirects(Boolean followRedirects) {
    this.followRedirects = followRedirects;
    return this;
  }

   /**
   * Follow redirects if the origin returns a 3xx status code.
   * @return followRedirects
  **/
  @Schema(description = "Follow redirects if the origin returns a 3xx status code.")
  public Boolean isFollowRedirects() {
    return followRedirects;
  }

  public void setFollowRedirects(Boolean followRedirects) {
    this.followRedirects = followRedirects;
  }

  public HttpConfig header(Object header) {
    this.header = header;
    return this;
  }

   /**
   * The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
   * @return header
  **/
  @Schema(example = "{\"Host\":[\"example.com\"],\"X-App-ID\":[\"abc123\"]}", description = "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.")
  public Object getHeader() {
    return header;
  }

  public void setHeader(Object header) {
    this.header = header;
  }

  public HttpConfig method(MethodEnum method) {
    this.method = method;
    return this;
  }

   /**
   * The HTTP method to use for the health check.
   * @return method
  **/
  @Schema(description = "The HTTP method to use for the health check.")
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }

  public HttpConfig path(String path) {
    this.path = path;
    return this;
  }

   /**
   * The endpoint path to health check against.
   * @return path
  **/
  @Schema(example = "/health", description = "The endpoint path to health check against.")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public HttpConfig port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.
   * @return port
  **/
  @Schema(description = "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpConfig httpConfig = (HttpConfig) o;
    return Objects.equals(this.allowInsecure, httpConfig.allowInsecure) &&
        Objects.equals(this.expectedBody, httpConfig.expectedBody) &&
        Objects.equals(this.expectedCodes, httpConfig.expectedCodes) &&
        Objects.equals(this.followRedirects, httpConfig.followRedirects) &&
        Objects.equals(this.header, httpConfig.header) &&
        Objects.equals(this.method, httpConfig.method) &&
        Objects.equals(this.path, httpConfig.path) &&
        Objects.equals(this.port, httpConfig.port);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowInsecure, expectedBody, expectedCodes, followRedirects, header, method, path, port);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpConfig {\n");
    
    sb.append("    allowInsecure: ").append(toIndentedString(allowInsecure)).append("\n");
    sb.append("    expectedBody: ").append(toIndentedString(expectedBody)).append("\n");
    sb.append("    expectedCodes: ").append(toIndentedString(expectedCodes)).append("\n");
    sb.append("    followRedirects: ").append(toIndentedString(followRedirects)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
