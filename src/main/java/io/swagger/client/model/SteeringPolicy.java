/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.v3.oas.annotations.media.Schema;
import com.google.gson.annotations.SerializedName;
import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Steering Policy for this load balancer. - &#x60;\&quot;off\&quot;&#x60;: Use &#x60;default_pools&#x60;. - &#x60;\&quot;geo\&quot;&#x60;: Use &#x60;region_pools&#x60;/&#x60;country_pools&#x60;/&#x60;pop_pools&#x60;. For non-proxied requests, the country for &#x60;country_pools&#x60; is determined by &#x60;location_strategy&#x60;. - &#x60;\&quot;random\&quot;&#x60;: Select a pool randomly. - &#x60;\&quot;dynamic_latency\&quot;&#x60;: Use round trip time to select the closest pool in default_pools (requires pool health checks). - &#x60;\&quot;proximity\&quot;&#x60;: Use the pools&#x27; latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by &#x60;location_strategy&#x60; for non-proxied requests. - &#x60;\&quot;\&quot;&#x60;: Will map to &#x60;\&quot;geo\&quot;&#x60; if you use &#x60;region_pools&#x60;/&#x60;country_pools&#x60;/&#x60;pop_pools&#x60; otherwise &#x60;\&quot;off\&quot;&#x60;.
 */
@JsonAdapter(SteeringPolicy.Adapter.class)
public enum SteeringPolicy {
  OFF("off"),
  GEO("geo"),
  RANDOM("random"),
  DYNAMIC_LATENCY("dynamic_latency"),
  PROXIMITY("proximity"),
  _U("\"\"");

  private String value;

  SteeringPolicy(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static SteeringPolicy fromValue(String input) {
    for (SteeringPolicy b : SteeringPolicy.values()) {
      if (b.value.equals(input)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<SteeringPolicy> {
    @Override
    public void write(final JsonWriter jsonWriter, final SteeringPolicy enumeration) throws IOException {
      jsonWriter.value(String.valueOf(enumeration.getValue()));
    }

    @Override
    public SteeringPolicy read(final JsonReader jsonReader) throws IOException {
      Object value = jsonReader.nextString();
      return SteeringPolicy.fromValue((String)(value));
    }
  }
}
