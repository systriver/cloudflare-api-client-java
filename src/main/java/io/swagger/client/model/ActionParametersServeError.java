/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * The action parameters for the serve_error action.
 */
@Schema(description = "The action parameters for the serve_error action.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class ActionParametersServeError {
  @SerializedName("content")
  private String content = null;

  @SerializedName("content_type")
  private String contentType = null;

  @SerializedName("status_code")
  private BigDecimal statusCode = null;

  public ActionParametersServeError content(String content) {
    this.content = content;
    return this;
  }

   /**
   * The new content for the response error.
   * @return content
  **/
  @Schema(example = "some html error page", description = "The new content for the response error.")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public ActionParametersServeError contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * The content-type of the response error.
   * @return contentType
  **/
  @Schema(example = "text/html", description = "The content-type of the response error.")
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }

  public ActionParametersServeError statusCode(BigDecimal statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * The HTTP status code of the response error.
   * @return statusCode
  **/
  @Schema(example = "530", description = "The HTTP status code of the response error.")
  public BigDecimal getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(BigDecimal statusCode) {
    this.statusCode = statusCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionParametersServeError actionParametersServeError = (ActionParametersServeError) o;
    return Objects.equals(this.content, actionParametersServeError.content) &&
        Objects.equals(this.contentType, actionParametersServeError.contentType) &&
        Objects.equals(this.statusCode, actionParametersServeError.statusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, contentType, statusCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionParametersServeError {\n");
    
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
