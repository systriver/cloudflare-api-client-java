/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * DirectUploadRequestV2
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class DirectUploadRequestV2 {
  @SerializedName("expiry")
  private OffsetDateTime expiry = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("metadata")
  private Object metadata = null;

  @SerializedName("requireSignedURLs")
  private Boolean requireSignedURLs = false;

  public DirectUploadRequestV2 expiry(OffsetDateTime expiry) {
    this.expiry = expiry;
    return this;
  }

   /**
   * The date after which the upload will not be accepted. Minimum: Now + 2 minutes. Maximum: Now + 6 hours.
   * @return expiry
  **/
  @Schema(example = "2021-01-02T02:20Z", description = "The date after which the upload will not be accepted. Minimum: Now + 2 minutes. Maximum: Now + 6 hours.")
  public OffsetDateTime getExpiry() {
    return expiry;
  }

  public void setExpiry(OffsetDateTime expiry) {
    this.expiry = expiry;
  }

   /**
   * Optional Image Custom ID. Up to 1024 chars. Can include any number of subpaths, and utf8 characters. Cannot start nor end with a / (forward slash). Cannot be a UUID.
   * @return id
  **/
  @Schema(example = "this/is/my-customid", description = "Optional Image Custom ID. Up to 1024 chars. Can include any number of subpaths, and utf8 characters. Cannot start nor end with a / (forward slash). Cannot be a UUID.")
  public String getId() {
    return id;
  }

  public DirectUploadRequestV2 metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * User modifiable key-value store. Can be used for keeping references to another system of record, for managing images.
   * @return metadata
  **/
  @Schema(description = "User modifiable key-value store. Can be used for keeping references to another system of record, for managing images.")
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }

  public DirectUploadRequestV2 requireSignedURLs(Boolean requireSignedURLs) {
    this.requireSignedURLs = requireSignedURLs;
    return this;
  }

   /**
   * Indicates whether the image requires a signature token to be accessed.
   * @return requireSignedURLs
  **/
  @Schema(example = "true", description = "Indicates whether the image requires a signature token to be accessed.")
  public Boolean isRequireSignedURLs() {
    return requireSignedURLs;
  }

  public void setRequireSignedURLs(Boolean requireSignedURLs) {
    this.requireSignedURLs = requireSignedURLs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectUploadRequestV2 directUploadRequestV2 = (DirectUploadRequestV2) o;
    return Objects.equals(this.expiry, directUploadRequestV2.expiry) &&
        Objects.equals(this.id, directUploadRequestV2.id) &&
        Objects.equals(this.metadata, directUploadRequestV2.metadata) &&
        Objects.equals(this.requireSignedURLs, directUploadRequestV2.requireSignedURLs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiry, id, metadata, requireSignedURLs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectUploadRequestV2 {\n");
    
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    requireSignedURLs: ").append(toIndentedString(requireSignedURLs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
