/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * Geodata for tracing request
 */
@Schema(description = "Geodata for tracing request")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class AccountsaccountIdentifierrequesttracertraceContextGeoloc {
  @SerializedName("city")
  private String city = null;

  @SerializedName("continent")
  private String continent = null;

  @SerializedName("is_eu_country")
  private Boolean isEuCountry = null;

  @SerializedName("iso_code")
  private String isoCode = null;

  @SerializedName("latitude")
  private BigDecimal latitude = null;

  @SerializedName("longitude")
  private BigDecimal longitude = null;

  @SerializedName("postal_code")
  private String postalCode = null;

  @SerializedName("region_code")
  private String regionCode = null;

  @SerializedName("subdivision_2_iso_code")
  private String subdivision2IsoCode = null;

  @SerializedName("timezone")
  private String timezone = null;

  public AccountsaccountIdentifierrequesttracertraceContextGeoloc city(String city) {
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @Schema(example = "London", description = "")
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public AccountsaccountIdentifierrequesttracertraceContextGeoloc continent(String continent) {
    this.continent = continent;
    return this;
  }

   /**
   * Get continent
   * @return continent
  **/
  @Schema(description = "")
  public String getContinent() {
    return continent;
  }

  public void setContinent(String continent) {
    this.continent = continent;
  }

  public AccountsaccountIdentifierrequesttracertraceContextGeoloc isEuCountry(Boolean isEuCountry) {
    this.isEuCountry = isEuCountry;
    return this;
  }

   /**
   * Get isEuCountry
   * @return isEuCountry
  **/
  @Schema(description = "")
  public Boolean isIsEuCountry() {
    return isEuCountry;
  }

  public void setIsEuCountry(Boolean isEuCountry) {
    this.isEuCountry = isEuCountry;
  }

  public AccountsaccountIdentifierrequesttracertraceContextGeoloc isoCode(String isoCode) {
    this.isoCode = isoCode;
    return this;
  }

   /**
   * Get isoCode
   * @return isoCode
  **/
  @Schema(description = "")
  public String getIsoCode() {
    return isoCode;
  }

  public void setIsoCode(String isoCode) {
    this.isoCode = isoCode;
  }

  public AccountsaccountIdentifierrequesttracertraceContextGeoloc latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

   /**
   * Get latitude
   * @return latitude
  **/
  @Schema(description = "")
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }

  public AccountsaccountIdentifierrequesttracertraceContextGeoloc longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

   /**
   * Get longitude
   * @return longitude
  **/
  @Schema(description = "")
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }

  public AccountsaccountIdentifierrequesttracertraceContextGeoloc postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Get postalCode
   * @return postalCode
  **/
  @Schema(description = "")
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }

  public AccountsaccountIdentifierrequesttracertraceContextGeoloc regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

   /**
   * Get regionCode
   * @return regionCode
  **/
  @Schema(description = "")
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }

  public AccountsaccountIdentifierrequesttracertraceContextGeoloc subdivision2IsoCode(String subdivision2IsoCode) {
    this.subdivision2IsoCode = subdivision2IsoCode;
    return this;
  }

   /**
   * Get subdivision2IsoCode
   * @return subdivision2IsoCode
  **/
  @Schema(description = "")
  public String getSubdivision2IsoCode() {
    return subdivision2IsoCode;
  }

  public void setSubdivision2IsoCode(String subdivision2IsoCode) {
    this.subdivision2IsoCode = subdivision2IsoCode;
  }

  public AccountsaccountIdentifierrequesttracertraceContextGeoloc timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @Schema(description = "")
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountsaccountIdentifierrequesttracertraceContextGeoloc accountsaccountIdentifierrequesttracertraceContextGeoloc = (AccountsaccountIdentifierrequesttracertraceContextGeoloc) o;
    return Objects.equals(this.city, accountsaccountIdentifierrequesttracertraceContextGeoloc.city) &&
        Objects.equals(this.continent, accountsaccountIdentifierrequesttracertraceContextGeoloc.continent) &&
        Objects.equals(this.isEuCountry, accountsaccountIdentifierrequesttracertraceContextGeoloc.isEuCountry) &&
        Objects.equals(this.isoCode, accountsaccountIdentifierrequesttracertraceContextGeoloc.isoCode) &&
        Objects.equals(this.latitude, accountsaccountIdentifierrequesttracertraceContextGeoloc.latitude) &&
        Objects.equals(this.longitude, accountsaccountIdentifierrequesttracertraceContextGeoloc.longitude) &&
        Objects.equals(this.postalCode, accountsaccountIdentifierrequesttracertraceContextGeoloc.postalCode) &&
        Objects.equals(this.regionCode, accountsaccountIdentifierrequesttracertraceContextGeoloc.regionCode) &&
        Objects.equals(this.subdivision2IsoCode, accountsaccountIdentifierrequesttracertraceContextGeoloc.subdivision2IsoCode) &&
        Objects.equals(this.timezone, accountsaccountIdentifierrequesttracertraceContextGeoloc.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, continent, isEuCountry, isoCode, latitude, longitude, postalCode, regionCode, subdivision2IsoCode, timezone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountsaccountIdentifierrequesttracertraceContextGeoloc {\n");
    
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    continent: ").append(toIndentedString(continent)).append("\n");
    sb.append("    isEuCountry: ").append(toIndentedString(isEuCountry)).append("\n");
    sb.append("    isoCode: ").append(toIndentedString(isoCode)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("    subdivision2IsoCode: ").append(toIndentedString(subdivision2IsoCode)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
