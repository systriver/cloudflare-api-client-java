/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ResponseBufferingValue;
import io.swagger.client.model.SchemasBase;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.
 */
@Schema(description = "Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class ResponseBuffering extends SchemasBase implements Setting {
  @SerializedName("id")
  private String responseBufferingId = null;

  @SerializedName("value")
  private ResponseBufferingValue responseBufferingValue = null;

  public ResponseBuffering responseBufferingId(String responseBufferingId) {
    this.responseBufferingId = responseBufferingId;
    return this;
  }

   /**
   * ID of the zone setting.
   * @return responseBufferingId
  **/
  @Schema(example = "response_buffering", description = "ID of the zone setting.")
  public String getResponseBufferingId() {
    return responseBufferingId;
  }

  public void setResponseBufferingId(String responseBufferingId) {
    this.responseBufferingId = responseBufferingId;
  }

  public ResponseBuffering responseBufferingValue(ResponseBufferingValue responseBufferingValue) {
    this.responseBufferingValue = responseBufferingValue;
    return this;
  }

   /**
   * Get responseBufferingValue
   * @return responseBufferingValue
  **/
  @Schema(description = "")
  public ResponseBufferingValue getResponseBufferingValue() {
    return responseBufferingValue;
  }

  public void setResponseBufferingValue(ResponseBufferingValue responseBufferingValue) {
    this.responseBufferingValue = responseBufferingValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseBuffering responseBuffering = (ResponseBuffering) o;
    return Objects.equals(this.responseBufferingId, responseBuffering.responseBufferingId) &&
        Objects.equals(this.responseBufferingValue, responseBuffering.responseBufferingValue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseBufferingId, responseBufferingValue, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseBuffering {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    responseBufferingId: ").append(toIndentedString(responseBufferingId)).append("\n");
    sb.append("    responseBufferingValue: ").append(toIndentedString(responseBufferingValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
