/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Controls location-based steering for non-proxied requests. See &#x60;steering_policy&#x60; to learn how steering is affected.
 */
@Schema(description = "Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class LocationStrategy {
  /**
   * Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful. - &#x60;\&quot;pop\&quot;&#x60;: Use the Cloudflare PoP location. - &#x60;\&quot;resolver_ip\&quot;&#x60;: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    POP("pop"),
    RESOLVER_IP("resolver_ip");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ModeEnum fromValue(String input) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ModeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("mode")
  private ModeEnum mode = ModeEnum.POP;

  /**
   * Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location. - &#x60;\&quot;always\&quot;&#x60;: Always prefer ECS. - &#x60;\&quot;never\&quot;&#x60;: Never prefer ECS. - &#x60;\&quot;proximity\&quot;&#x60;: Prefer ECS only when &#x60;steering_policy&#x3D;\&quot;proximity\&quot;&#x60;. - &#x60;\&quot;geo\&quot;&#x60;: Prefer ECS only when &#x60;steering_policy&#x3D;\&quot;geo\&quot;&#x60;.
   */
  @JsonAdapter(PreferEcsEnum.Adapter.class)
  public enum PreferEcsEnum {
    ALWAYS("always"),
    NEVER("never"),
    PROXIMITY("proximity"),
    GEO("geo");

    private String value;

    PreferEcsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PreferEcsEnum fromValue(String input) {
      for (PreferEcsEnum b : PreferEcsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PreferEcsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreferEcsEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PreferEcsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PreferEcsEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("prefer_ecs")
  private PreferEcsEnum preferEcs = PreferEcsEnum.PROXIMITY;

  public LocationStrategy mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful. - &#x60;\&quot;pop\&quot;&#x60;: Use the Cloudflare PoP location. - &#x60;\&quot;resolver_ip\&quot;&#x60;: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.
   * @return mode
  **/
  @Schema(example = "resolver_ip", description = "Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful. - `\"pop\"`: Use the Cloudflare PoP location. - `\"resolver_ip\"`: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }

  public LocationStrategy preferEcs(PreferEcsEnum preferEcs) {
    this.preferEcs = preferEcs;
    return this;
  }

   /**
   * Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location. - &#x60;\&quot;always\&quot;&#x60;: Always prefer ECS. - &#x60;\&quot;never\&quot;&#x60;: Never prefer ECS. - &#x60;\&quot;proximity\&quot;&#x60;: Prefer ECS only when &#x60;steering_policy&#x3D;\&quot;proximity\&quot;&#x60;. - &#x60;\&quot;geo\&quot;&#x60;: Prefer ECS only when &#x60;steering_policy&#x3D;\&quot;geo\&quot;&#x60;.
   * @return preferEcs
  **/
  @Schema(example = "always", description = "Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location. - `\"always\"`: Always prefer ECS. - `\"never\"`: Never prefer ECS. - `\"proximity\"`: Prefer ECS only when `steering_policy=\"proximity\"`. - `\"geo\"`: Prefer ECS only when `steering_policy=\"geo\"`.")
  public PreferEcsEnum getPreferEcs() {
    return preferEcs;
  }

  public void setPreferEcs(PreferEcsEnum preferEcs) {
    this.preferEcs = preferEcs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationStrategy locationStrategy = (LocationStrategy) o;
    return Objects.equals(this.mode, locationStrategy.mode) &&
        Objects.equals(this.preferEcs, locationStrategy.preferEcs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mode, preferEcs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationStrategy {\n");
    
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    preferEcs: ").append(toIndentedString(preferEcs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
