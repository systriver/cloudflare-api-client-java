/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.v3.oas.annotations.media.Schema;
import com.google.gson.annotations.SerializedName;
import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The session_affinity specifies the type of session affinity the load balancer should use unless specified as \&quot;none\&quot; or \&quot;\&quot;(default). The supported types are \&quot;cookie\&quot; and \&quot;ip_cookie\&quot;. \&quot;cookie\&quot; - On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy then a new origin server is calculated and used. \&quot;ip_cookie\&quot; behaves the same as \&quot;cookie\&quot; except the initial origin selection is stable and based on the clientâ€™s ip address.
 */
@JsonAdapter(SessionAffinity.Adapter.class)
public enum SessionAffinity {
  NONE("none"),
  COOKIE("cookie"),
  IP_COOKIE("ip_cookie"),
  _U("\"\"");

  private String value;

  SessionAffinity(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static SessionAffinity fromValue(String input) {
    for (SessionAffinity b : SessionAffinity.values()) {
      if (b.value.equals(input)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<SessionAffinity> {
    @Override
    public void write(final JsonWriter jsonWriter, final SessionAffinity enumeration) throws IOException {
      jsonWriter.value(String.valueOf(enumeration.getValue()));
    }

    @Override
    public SessionAffinity read(final JsonReader jsonReader) throws IOException {
      Object value = jsonReader.nextString();
      return SessionAffinity.fromValue((String)(value));
    }
  }
}
