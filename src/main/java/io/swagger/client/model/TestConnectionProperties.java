/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * TestConnectionProperties
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class TestConnectionProperties {
  @SerializedName("body_hash")
  private String bodyHash = null;

  @SerializedName("body_size")
  private String bodySize = null;

  @SerializedName("cf-cache-status")
  private String cfCacheStatus = null;

  @SerializedName("cf-ray")
  private String cfRay = null;

  @SerializedName("cf-wan-error")
  private String cfWanError = null;

  @SerializedName("cloudflare")
  private String cloudflare = null;

  @SerializedName("connection_close")
  private Boolean connectionClose = true;

  @SerializedName("elapsed_time")
  private String elapsedTime = null;

  @SerializedName("host_name")
  private String hostName = null;

  @SerializedName("http_status")
  private BigDecimal httpStatus = null;

  @SerializedName("method")
  private String method = null;

  @SerializedName("missing_headers")
  private String missingHeaders = null;

  @SerializedName("protocol")
  private String protocol = null;

  @SerializedName("railgun")
  private String railgun = null;

  @SerializedName("response_status")
  private String responseStatus = null;

  @SerializedName("url")
  private String url = null;

  public TestConnectionProperties bodyHash(String bodyHash) {
    this.bodyHash = bodyHash;
    return this;
  }

   /**
   * Hash version of body.
   * @return bodyHash
  **/
  @Schema(example = "be27f2429421e12f200cab1da43ba301bdc70e1d", description = "Hash version of body.")
  public String getBodyHash() {
    return bodyHash;
  }

  public void setBodyHash(String bodyHash) {
    this.bodyHash = bodyHash;
  }

  public TestConnectionProperties bodySize(String bodySize) {
    this.bodySize = bodySize;
    return this;
  }

   /**
   * Size of the body in bytes.
   * @return bodySize
  **/
  @Schema(example = "63910 bytes", description = "Size of the body in bytes.")
  public String getBodySize() {
    return bodySize;
  }

  public void setBodySize(String bodySize) {
    this.bodySize = bodySize;
  }

  public TestConnectionProperties cfCacheStatus(String cfCacheStatus) {
    this.cfCacheStatus = cfCacheStatus;
    return this;
  }

   /**
   * Lists any &#x60;cf-cache-status&#x60; present.
   * @return cfCacheStatus
  **/
  @Schema(description = "Lists any `cf-cache-status` present.")
  public String getCfCacheStatus() {
    return cfCacheStatus;
  }

  public void setCfCacheStatus(String cfCacheStatus) {
    this.cfCacheStatus = cfCacheStatus;
  }

  public TestConnectionProperties cfRay(String cfRay) {
    this.cfRay = cfRay;
    return this;
  }

   /**
   * Lists any &#x60;cf-ray&#x60; present.
   * @return cfRay
  **/
  @Schema(example = "1ddd7570575207d9-LAX", description = "Lists any `cf-ray` present.")
  public String getCfRay() {
    return cfRay;
  }

  public void setCfRay(String cfRay) {
    this.cfRay = cfRay;
  }

  public TestConnectionProperties cfWanError(String cfWanError) {
    this.cfWanError = cfWanError;
    return this;
  }

   /**
   * Lists any &#x60;cf-wan-error&#x60; present.
   * @return cfWanError
  **/
  @Schema(description = "Lists any `cf-wan-error` present.")
  public String getCfWanError() {
    return cfWanError;
  }

  public void setCfWanError(String cfWanError) {
    this.cfWanError = cfWanError;
  }

  public TestConnectionProperties cloudflare(String cloudflare) {
    this.cloudflare = cloudflare;
    return this;
  }

   /**
   * Whether Cloudflare is enabled on the host.
   * @return cloudflare
  **/
  @Schema(example = "on", description = "Whether Cloudflare is enabled on the host.")
  public String getCloudflare() {
    return cloudflare;
  }

  public void setCloudflare(String cloudflare) {
    this.cloudflare = cloudflare;
  }

  public TestConnectionProperties connectionClose(Boolean connectionClose) {
    this.connectionClose = connectionClose;
    return this;
  }

   /**
   * Connection closed or open.
   * @return connectionClose
  **/
  @Schema(example = "false", description = "Connection closed or open.")
  public Boolean isConnectionClose() {
    return connectionClose;
  }

  public void setConnectionClose(Boolean connectionClose) {
    this.connectionClose = connectionClose;
  }

  public TestConnectionProperties elapsedTime(String elapsedTime) {
    this.elapsedTime = elapsedTime;
    return this;
  }

   /**
   * Amount of seconds that the test lasted.
   * @return elapsedTime
  **/
  @Schema(example = "0.239013s", description = "Amount of seconds that the test lasted.")
  public String getElapsedTime() {
    return elapsedTime;
  }

  public void setElapsedTime(String elapsedTime) {
    this.elapsedTime = elapsedTime;
  }

  public TestConnectionProperties hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

   /**
   * The hostname queried.
   * @return hostName
  **/
  @Schema(example = "www.example.com", description = "The hostname queried.")
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }

  public TestConnectionProperties httpStatus(BigDecimal httpStatus) {
    this.httpStatus = httpStatus;
    return this;
  }

   /**
   * The HTTP status response code.
   * @return httpStatus
  **/
  @Schema(example = "200", description = "The HTTP status response code.")
  public BigDecimal getHttpStatus() {
    return httpStatus;
  }

  public void setHttpStatus(BigDecimal httpStatus) {
    this.httpStatus = httpStatus;
  }

  public TestConnectionProperties method(String method) {
    this.method = method;
    return this;
  }

   /**
   * HTTP Method used to test the connection.
   * @return method
  **/
  @Schema(example = "GET", description = "HTTP Method used to test the connection.")
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }

  public TestConnectionProperties missingHeaders(String missingHeaders) {
    this.missingHeaders = missingHeaders;
    return this;
  }

   /**
   * What headers are missing.
   * @return missingHeaders
  **/
  @Schema(example = "No Content-Length or Transfer-Encoding.", description = "What headers are missing.")
  public String getMissingHeaders() {
    return missingHeaders;
  }

  public void setMissingHeaders(String missingHeaders) {
    this.missingHeaders = missingHeaders;
  }

  public TestConnectionProperties protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Protocol used to test the connection.
   * @return protocol
  **/
  @Schema(example = "HTTP/1.1", description = "Protocol used to test the connection.")
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }

  public TestConnectionProperties railgun(String railgun) {
    this.railgun = railgun;
    return this;
  }

   /**
   * Indicates if Railgun is enabled on the queried hostname.
   * @return railgun
  **/
  @Schema(example = "on", description = "Indicates if Railgun is enabled on the queried hostname.")
  public String getRailgun() {
    return railgun;
  }

  public void setRailgun(String railgun) {
    this.railgun = railgun;
  }

  public TestConnectionProperties responseStatus(String responseStatus) {
    this.responseStatus = responseStatus;
    return this;
  }

   /**
   * HTTP Status code.
   * @return responseStatus
  **/
  @Schema(example = "200 OK", description = "HTTP Status code.")
  public String getResponseStatus() {
    return responseStatus;
  }

  public void setResponseStatus(String responseStatus) {
    this.responseStatus = responseStatus;
  }

  public TestConnectionProperties url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Url of the domain you can compare the connection to.
   * @return url
  **/
  @Schema(example = "https://www.cloudflare.com", description = "Url of the domain you can compare the connection to.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestConnectionProperties testConnectionProperties = (TestConnectionProperties) o;
    return Objects.equals(this.bodyHash, testConnectionProperties.bodyHash) &&
        Objects.equals(this.bodySize, testConnectionProperties.bodySize) &&
        Objects.equals(this.cfCacheStatus, testConnectionProperties.cfCacheStatus) &&
        Objects.equals(this.cfRay, testConnectionProperties.cfRay) &&
        Objects.equals(this.cfWanError, testConnectionProperties.cfWanError) &&
        Objects.equals(this.cloudflare, testConnectionProperties.cloudflare) &&
        Objects.equals(this.connectionClose, testConnectionProperties.connectionClose) &&
        Objects.equals(this.elapsedTime, testConnectionProperties.elapsedTime) &&
        Objects.equals(this.hostName, testConnectionProperties.hostName) &&
        Objects.equals(this.httpStatus, testConnectionProperties.httpStatus) &&
        Objects.equals(this.method, testConnectionProperties.method) &&
        Objects.equals(this.missingHeaders, testConnectionProperties.missingHeaders) &&
        Objects.equals(this.protocol, testConnectionProperties.protocol) &&
        Objects.equals(this.railgun, testConnectionProperties.railgun) &&
        Objects.equals(this.responseStatus, testConnectionProperties.responseStatus) &&
        Objects.equals(this.url, testConnectionProperties.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyHash, bodySize, cfCacheStatus, cfRay, cfWanError, cloudflare, connectionClose, elapsedTime, hostName, httpStatus, method, missingHeaders, protocol, railgun, responseStatus, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestConnectionProperties {\n");
    
    sb.append("    bodyHash: ").append(toIndentedString(bodyHash)).append("\n");
    sb.append("    bodySize: ").append(toIndentedString(bodySize)).append("\n");
    sb.append("    cfCacheStatus: ").append(toIndentedString(cfCacheStatus)).append("\n");
    sb.append("    cfRay: ").append(toIndentedString(cfRay)).append("\n");
    sb.append("    cfWanError: ").append(toIndentedString(cfWanError)).append("\n");
    sb.append("    cloudflare: ").append(toIndentedString(cloudflare)).append("\n");
    sb.append("    connectionClose: ").append(toIndentedString(connectionClose)).append("\n");
    sb.append("    elapsedTime: ").append(toIndentedString(elapsedTime)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    httpStatus: ").append(toIndentedString(httpStatus)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    missingHeaders: ").append(toIndentedString(missingHeaders)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    railgun: ").append(toIndentedString(railgun)).append("\n");
    sb.append("    responseStatus: ").append(toIndentedString(responseStatus)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
