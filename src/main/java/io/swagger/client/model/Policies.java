/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ApprovalGroups;
import io.swagger.client.model.Decision;
import io.swagger.client.model.Include;
import io.swagger.client.model.SchemasExclude;
import io.swagger.client.model.SchemasRequire;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Policies
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class Policies {
  @SerializedName("approval_groups")
  private ApprovalGroups approvalGroups = null;

  @SerializedName("approval_required")
  private Boolean approvalRequired = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("decision")
  private Decision decision = null;

  @SerializedName("exclude")
  private SchemasExclude exclude = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("include")
  private Include include = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("precedence")
  private Integer precedence = null;

  @SerializedName("purpose_justification_prompt")
  private String purposeJustificationPrompt = null;

  @SerializedName("purpose_justification_required")
  private Boolean purposeJustificationRequired = null;

  @SerializedName("require")
  private SchemasRequire require = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  public Policies approvalGroups(ApprovalGroups approvalGroups) {
    this.approvalGroups = approvalGroups;
    return this;
  }

   /**
   * Get approvalGroups
   * @return approvalGroups
  **/
  @Schema(description = "")
  public ApprovalGroups getApprovalGroups() {
    return approvalGroups;
  }

  public void setApprovalGroups(ApprovalGroups approvalGroups) {
    this.approvalGroups = approvalGroups;
  }

  public Policies approvalRequired(Boolean approvalRequired) {
    this.approvalRequired = approvalRequired;
    return this;
  }

   /**
   * Get approvalRequired
   * @return approvalRequired
  **/
  @Schema(description = "")
  public Boolean getApprovalRequired() {
    return approvalRequired;
  }

  public void setApprovalRequired(Boolean approvalRequired) {
    this.approvalRequired = approvalRequired;
  }

  public Policies createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Policies decision(Decision decision) {
    this.decision = decision;
    return this;
  }

   /**
   * Get decision
   * @return decision
  **/
  @Schema(description = "")
  public Decision getDecision() {
    return decision;
  }

  public void setDecision(Decision decision) {
    this.decision = decision;
  }

  public Policies exclude(SchemasExclude exclude) {
    this.exclude = exclude;
    return this;
  }

   /**
   * Get exclude
   * @return exclude
  **/
  @Schema(description = "")
  public SchemasExclude getExclude() {
    return exclude;
  }

  public void setExclude(SchemasExclude exclude) {
    this.exclude = exclude;
  }

  public Policies id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Policies include(Include include) {
    this.include = include;
    return this;
  }

   /**
   * Get include
   * @return include
  **/
  @Schema(description = "")
  public Include getInclude() {
    return include;
  }

  public void setInclude(Include include) {
    this.include = include;
  }

  public Policies name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Policies precedence(Integer precedence) {
    this.precedence = precedence;
    return this;
  }

   /**
   * Get precedence
   * @return precedence
  **/
  @Schema(description = "")
  public Integer getPrecedence() {
    return precedence;
  }

  public void setPrecedence(Integer precedence) {
    this.precedence = precedence;
  }

  public Policies purposeJustificationPrompt(String purposeJustificationPrompt) {
    this.purposeJustificationPrompt = purposeJustificationPrompt;
    return this;
  }

   /**
   * Get purposeJustificationPrompt
   * @return purposeJustificationPrompt
  **/
  @Schema(description = "")
  public String getPurposeJustificationPrompt() {
    return purposeJustificationPrompt;
  }

  public void setPurposeJustificationPrompt(String purposeJustificationPrompt) {
    this.purposeJustificationPrompt = purposeJustificationPrompt;
  }

  public Policies purposeJustificationRequired(Boolean purposeJustificationRequired) {
    this.purposeJustificationRequired = purposeJustificationRequired;
    return this;
  }

   /**
   * Get purposeJustificationRequired
   * @return purposeJustificationRequired
  **/
  @Schema(description = "")
  public Boolean getPurposeJustificationRequired() {
    return purposeJustificationRequired;
  }

  public void setPurposeJustificationRequired(Boolean purposeJustificationRequired) {
    this.purposeJustificationRequired = purposeJustificationRequired;
  }

  public Policies require(SchemasRequire require) {
    this.require = require;
    return this;
  }

   /**
   * Get require
   * @return require
  **/
  @Schema(description = "")
  public SchemasRequire getRequire() {
    return require;
  }

  public void setRequire(SchemasRequire require) {
    this.require = require;
  }

  public Policies updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Policies policies = (Policies) o;
    return Objects.equals(this.approvalGroups, policies.approvalGroups) &&
        Objects.equals(this.approvalRequired, policies.approvalRequired) &&
        Objects.equals(this.createdAt, policies.createdAt) &&
        Objects.equals(this.decision, policies.decision) &&
        Objects.equals(this.exclude, policies.exclude) &&
        Objects.equals(this.id, policies.id) &&
        Objects.equals(this.include, policies.include) &&
        Objects.equals(this.name, policies.name) &&
        Objects.equals(this.precedence, policies.precedence) &&
        Objects.equals(this.purposeJustificationPrompt, policies.purposeJustificationPrompt) &&
        Objects.equals(this.purposeJustificationRequired, policies.purposeJustificationRequired) &&
        Objects.equals(this.require, policies.require) &&
        Objects.equals(this.updatedAt, policies.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvalGroups, approvalRequired, createdAt, decision, exclude, id, include, name, precedence, purposeJustificationPrompt, purposeJustificationRequired, require, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Policies {\n");
    
    sb.append("    approvalGroups: ").append(toIndentedString(approvalGroups)).append("\n");
    sb.append("    approvalRequired: ").append(toIndentedString(approvalRequired)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    decision: ").append(toIndentedString(decision)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    include: ").append(toIndentedString(include)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    precedence: ").append(toIndentedString(precedence)).append("\n");
    sb.append("    purposeJustificationPrompt: ").append(toIndentedString(purposeJustificationPrompt)).append("\n");
    sb.append("    purposeJustificationRequired: ").append(toIndentedString(purposeJustificationRequired)).append("\n");
    sb.append("    require: ").append(toIndentedString(require)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
