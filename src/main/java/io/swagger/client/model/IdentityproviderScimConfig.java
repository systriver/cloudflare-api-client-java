/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The configuration settings for enabling a System for Cross-Domain Identity Management (SCIM) with the identity provider.
 */
@Schema(description = "The configuration settings for enabling a System for Cross-Domain Identity Management (SCIM) with the identity provider.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class IdentityproviderScimConfig {
  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("group_member_deprovision")
  private Boolean groupMemberDeprovision = null;

  @SerializedName("seat_deprovision")
  private Boolean seatDeprovision = null;

  @SerializedName("secret")
  private String secret = null;

  @SerializedName("user_deprovision")
  private Boolean userDeprovision = null;

  public IdentityproviderScimConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * A flag to enable or disable SCIM for the identity provider.
   * @return enabled
  **/
  @Schema(description = "A flag to enable or disable SCIM for the identity provider.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public IdentityproviderScimConfig groupMemberDeprovision(Boolean groupMemberDeprovision) {
    this.groupMemberDeprovision = groupMemberDeprovision;
    return this;
  }

   /**
   * A flag to revoke a user&#x27;s session in Access and force a reauthentication on the user&#x27;s Gateway session when they have been added or removed from a group in the Identity Provider.
   * @return groupMemberDeprovision
  **/
  @Schema(description = "A flag to revoke a user's session in Access and force a reauthentication on the user's Gateway session when they have been added or removed from a group in the Identity Provider.")
  public Boolean isGroupMemberDeprovision() {
    return groupMemberDeprovision;
  }

  public void setGroupMemberDeprovision(Boolean groupMemberDeprovision) {
    this.groupMemberDeprovision = groupMemberDeprovision;
  }

  public IdentityproviderScimConfig seatDeprovision(Boolean seatDeprovision) {
    this.seatDeprovision = seatDeprovision;
    return this;
  }

   /**
   * A flag to remove a user&#x27;s seat in Zero Trust when they have been deprovisioned in the Identity Provider.  This cannot be enabled unless user_deprovision is also enabled.
   * @return seatDeprovision
  **/
  @Schema(description = "A flag to remove a user's seat in Zero Trust when they have been deprovisioned in the Identity Provider.  This cannot be enabled unless user_deprovision is also enabled.")
  public Boolean isSeatDeprovision() {
    return seatDeprovision;
  }

  public void setSeatDeprovision(Boolean seatDeprovision) {
    this.seatDeprovision = seatDeprovision;
  }

  public IdentityproviderScimConfig secret(String secret) {
    this.secret = secret;
    return this;
  }

   /**
   * A read-only token generated when the SCIM integration is enabled for the first time.  It is redacted on subsequent requests.  If you lose this you will need to refresh it token at /access/identity_providers/:idpID/refresh_scim_secret.
   * @return secret
  **/
  @Schema(description = "A read-only token generated when the SCIM integration is enabled for the first time.  It is redacted on subsequent requests.  If you lose this you will need to refresh it token at /access/identity_providers/:idpID/refresh_scim_secret.")
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }

  public IdentityproviderScimConfig userDeprovision(Boolean userDeprovision) {
    this.userDeprovision = userDeprovision;
    return this;
  }

   /**
   * A flag to enable revoking a user&#x27;s session in Access and Gateway when they have been deprovisioned in the Identity Provider.
   * @return userDeprovision
  **/
  @Schema(description = "A flag to enable revoking a user's session in Access and Gateway when they have been deprovisioned in the Identity Provider.")
  public Boolean isUserDeprovision() {
    return userDeprovision;
  }

  public void setUserDeprovision(Boolean userDeprovision) {
    this.userDeprovision = userDeprovision;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityproviderScimConfig identityproviderScimConfig = (IdentityproviderScimConfig) o;
    return Objects.equals(this.enabled, identityproviderScimConfig.enabled) &&
        Objects.equals(this.groupMemberDeprovision, identityproviderScimConfig.groupMemberDeprovision) &&
        Objects.equals(this.seatDeprovision, identityproviderScimConfig.seatDeprovision) &&
        Objects.equals(this.secret, identityproviderScimConfig.secret) &&
        Objects.equals(this.userDeprovision, identityproviderScimConfig.userDeprovision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, groupMemberDeprovision, seatDeprovision, secret, userDeprovision);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityproviderScimConfig {\n");
    
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    groupMemberDeprovision: ").append(toIndentedString(groupMemberDeprovision)).append("\n");
    sb.append("    seatDeprovision: ").append(toIndentedString(seatDeprovision)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    userDeprovision: ").append(toIndentedString(userDeprovision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
