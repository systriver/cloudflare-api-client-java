/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Schedule for activating DNS policies. Does not apply to HTTP or network policies.
 */
@Schema(description = "Schedule for activating DNS policies. Does not apply to HTTP or network policies.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T13:40:27.702461541+09:00[Asia/Tokyo]")
public class Schedule {
  @SerializedName("fri")
  private String fri = null;

  @SerializedName("mon")
  private String mon = null;

  @SerializedName("sat")
  private String sat = null;

  @SerializedName("sun")
  private String sun = null;

  @SerializedName("thu")
  private String thu = null;

  @SerializedName("time_zone")
  private String timeZone = null;

  @SerializedName("tue")
  private String tue = null;

  @SerializedName("wed")
  private String wed = null;

  public Schedule fri(String fri) {
    this.fri = fri;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Fridays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Fridays.
   * @return fri
  **/
  @Schema(example = "08:00-12:30,13:30-17:00", description = "The time intervals when the rule will be active on Fridays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Fridays.")
  public String getFri() {
    return fri;
  }

  public void setFri(String fri) {
    this.fri = fri;
  }

  public Schedule mon(String mon) {
    this.mon = mon;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Mondays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Mondays.
   * @return mon
  **/
  @Schema(example = "08:00-12:30,13:30-17:00", description = "The time intervals when the rule will be active on Mondays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Mondays.")
  public String getMon() {
    return mon;
  }

  public void setMon(String mon) {
    this.mon = mon;
  }

  public Schedule sat(String sat) {
    this.sat = sat;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Saturdays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Saturdays.
   * @return sat
  **/
  @Schema(example = "08:00-12:30,13:30-17:00", description = "The time intervals when the rule will be active on Saturdays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Saturdays.")
  public String getSat() {
    return sat;
  }

  public void setSat(String sat) {
    this.sat = sat;
  }

  public Schedule sun(String sun) {
    this.sun = sun;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Sundays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Sundays.
   * @return sun
  **/
  @Schema(example = "08:00-12:30,13:30-17:00", description = "The time intervals when the rule will be active on Sundays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Sundays.")
  public String getSun() {
    return sun;
  }

  public void setSun(String sun) {
    this.sun = sun;
  }

  public Schedule thu(String thu) {
    this.thu = thu;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Thursdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Thursdays.
   * @return thu
  **/
  @Schema(example = "08:00-12:30,13:30-17:00", description = "The time intervals when the rule will be active on Thursdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Thursdays.")
  public String getThu() {
    return thu;
  }

  public void setThu(String thu) {
    this.thu = thu;
  }

  public Schedule timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * The time zone the rule will be evaluated against. If a [valid time zone city name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) is provided, Gateway will always use the current time at that time zone. If this parameter is omitted, then the time zone inferred from the user&#x27;s source IP is used to evaluate the rule. If Gateway cannot determine the time zone from the IP, we will fall back to the time zone of the user&#x27;s connected data center.
   * @return timeZone
  **/
  @Schema(example = "America/New York", description = "The time zone the rule will be evaluated against. If a [valid time zone city name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) is provided, Gateway will always use the current time at that time zone. If this parameter is omitted, then the time zone inferred from the user's source IP is used to evaluate the rule. If Gateway cannot determine the time zone from the IP, we will fall back to the time zone of the user's connected data center.")
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }

  public Schedule tue(String tue) {
    this.tue = tue;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Tuesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Tuesdays.
   * @return tue
  **/
  @Schema(example = "08:00-12:30,13:30-17:00", description = "The time intervals when the rule will be active on Tuesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Tuesdays.")
  public String getTue() {
    return tue;
  }

  public void setTue(String tue) {
    this.tue = tue;
  }

  public Schedule wed(String wed) {
    this.wed = wed;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Wednesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Wednesdays.
   * @return wed
  **/
  @Schema(example = "08:00-12:30,13:30-17:00", description = "The time intervals when the rule will be active on Wednesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Wednesdays.")
  public String getWed() {
    return wed;
  }

  public void setWed(String wed) {
    this.wed = wed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schedule schedule = (Schedule) o;
    return Objects.equals(this.fri, schedule.fri) &&
        Objects.equals(this.mon, schedule.mon) &&
        Objects.equals(this.sat, schedule.sat) &&
        Objects.equals(this.sun, schedule.sun) &&
        Objects.equals(this.thu, schedule.thu) &&
        Objects.equals(this.timeZone, schedule.timeZone) &&
        Objects.equals(this.tue, schedule.tue) &&
        Objects.equals(this.wed, schedule.wed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fri, mon, sat, sun, thu, timeZone, tue, wed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schedule {\n");
    
    sb.append("    fri: ").append(toIndentedString(fri)).append("\n");
    sb.append("    mon: ").append(toIndentedString(mon)).append("\n");
    sb.append("    sat: ").append(toIndentedString(sat)).append("\n");
    sb.append("    sun: ").append(toIndentedString(sun)).append("\n");
    sb.append("    thu: ").append(toIndentedString(thu)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    tue: ").append(toIndentedString(tue)).append("\n");
    sb.append("    wed: ").append(toIndentedString(wed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
