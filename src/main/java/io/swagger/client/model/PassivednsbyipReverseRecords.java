/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * PassivednsbyipReverseRecords
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class PassivednsbyipReverseRecords {
  @SerializedName("first_seen")
  private LocalDate firstSeen = null;

  @SerializedName("hostname")
  private Object hostname = null;

  @SerializedName("last_seen")
  private LocalDate lastSeen = null;

  public PassivednsbyipReverseRecords firstSeen(LocalDate firstSeen) {
    this.firstSeen = firstSeen;
    return this;
  }

   /**
   * First seen date of the DNS record during the time period.
   * @return firstSeen
  **/
  @Schema(example = "Thu Apr 01 09:00:00 JST 2021", description = "First seen date of the DNS record during the time period.")
  public LocalDate getFirstSeen() {
    return firstSeen;
  }

  public void setFirstSeen(LocalDate firstSeen) {
    this.firstSeen = firstSeen;
  }

  public PassivednsbyipReverseRecords hostname(Object hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * Hostname that the IP was observed resolving to.
   * @return hostname
  **/
  @Schema(description = "Hostname that the IP was observed resolving to.")
  public Object getHostname() {
    return hostname;
  }

  public void setHostname(Object hostname) {
    this.hostname = hostname;
  }

  public PassivednsbyipReverseRecords lastSeen(LocalDate lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * Last seen date of the DNS record during the time period.
   * @return lastSeen
  **/
  @Schema(example = "Fri Apr 30 09:00:00 JST 2021", description = "Last seen date of the DNS record during the time period.")
  public LocalDate getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(LocalDate lastSeen) {
    this.lastSeen = lastSeen;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PassivednsbyipReverseRecords passivednsbyipReverseRecords = (PassivednsbyipReverseRecords) o;
    return Objects.equals(this.firstSeen, passivednsbyipReverseRecords.firstSeen) &&
        Objects.equals(this.hostname, passivednsbyipReverseRecords.hostname) &&
        Objects.equals(this.lastSeen, passivednsbyipReverseRecords.lastSeen);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstSeen, hostname, lastSeen);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PassivednsbyipReverseRecords {\n");
    
    sb.append("    firstSeen: ").append(toIndentedString(firstSeen)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
