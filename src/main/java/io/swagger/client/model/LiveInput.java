/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.InputRtmps;
import io.swagger.client.model.InputSrt;
import io.swagger.client.model.InputWebrtc;
import io.swagger.client.model.LiveInputMetadata;
import io.swagger.client.model.LiveInputRecordingSettings;
import io.swagger.client.model.LiveInputStatus;
import io.swagger.client.model.PlaybackRtmps;
import io.swagger.client.model.PlaybackSrt;
import io.swagger.client.model.PlaybackWebrtc;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Details about a live input.
 */
@Schema(description = "Details about a live input.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class LiveInput {
  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("meta")
  private LiveInputMetadata meta = null;

  @SerializedName("modified")
  private OffsetDateTime modified = null;

  @SerializedName("recording")
  private LiveInputRecordingSettings recording = null;

  @SerializedName("rtmps")
  private InputRtmps rtmps = null;

  @SerializedName("rtmpsPlayback")
  private PlaybackRtmps rtmpsPlayback = null;

  @SerializedName("srt")
  private InputSrt srt = null;

  @SerializedName("srtPlayback")
  private PlaybackSrt srtPlayback = null;

  @SerializedName("status")
  private LiveInputStatus status = null;

  @SerializedName("uid")
  private String uid = null;

  @SerializedName("webRTC")
  private InputWebrtc webRTC = null;

  @SerializedName("webRTCPlayback")
  private PlaybackWebrtc webRTCPlayback = null;

  public LiveInput created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public LiveInput meta(LiveInputMetadata meta) {
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @Schema(description = "")
  public LiveInputMetadata getMeta() {
    return meta;
  }

  public void setMeta(LiveInputMetadata meta) {
    this.meta = meta;
  }

  public LiveInput modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Get modified
   * @return modified
  **/
  @Schema(description = "")
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }

  public LiveInput recording(LiveInputRecordingSettings recording) {
    this.recording = recording;
    return this;
  }

   /**
   * Get recording
   * @return recording
  **/
  @Schema(description = "")
  public LiveInputRecordingSettings getRecording() {
    return recording;
  }

  public void setRecording(LiveInputRecordingSettings recording) {
    this.recording = recording;
  }

  public LiveInput rtmps(InputRtmps rtmps) {
    this.rtmps = rtmps;
    return this;
  }

   /**
   * Get rtmps
   * @return rtmps
  **/
  @Schema(description = "")
  public InputRtmps getRtmps() {
    return rtmps;
  }

  public void setRtmps(InputRtmps rtmps) {
    this.rtmps = rtmps;
  }

  public LiveInput rtmpsPlayback(PlaybackRtmps rtmpsPlayback) {
    this.rtmpsPlayback = rtmpsPlayback;
    return this;
  }

   /**
   * Get rtmpsPlayback
   * @return rtmpsPlayback
  **/
  @Schema(description = "")
  public PlaybackRtmps getRtmpsPlayback() {
    return rtmpsPlayback;
  }

  public void setRtmpsPlayback(PlaybackRtmps rtmpsPlayback) {
    this.rtmpsPlayback = rtmpsPlayback;
  }

  public LiveInput srt(InputSrt srt) {
    this.srt = srt;
    return this;
  }

   /**
   * Get srt
   * @return srt
  **/
  @Schema(description = "")
  public InputSrt getSrt() {
    return srt;
  }

  public void setSrt(InputSrt srt) {
    this.srt = srt;
  }

  public LiveInput srtPlayback(PlaybackSrt srtPlayback) {
    this.srtPlayback = srtPlayback;
    return this;
  }

   /**
   * Get srtPlayback
   * @return srtPlayback
  **/
  @Schema(description = "")
  public PlaybackSrt getSrtPlayback() {
    return srtPlayback;
  }

  public void setSrtPlayback(PlaybackSrt srtPlayback) {
    this.srtPlayback = srtPlayback;
  }

  public LiveInput status(LiveInputStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public LiveInputStatus getStatus() {
    return status;
  }

  public void setStatus(LiveInputStatus status) {
    this.status = status;
  }

  public LiveInput uid(String uid) {
    this.uid = uid;
    return this;
  }

   /**
   * Get uid
   * @return uid
  **/
  @Schema(description = "")
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }

  public LiveInput webRTC(InputWebrtc webRTC) {
    this.webRTC = webRTC;
    return this;
  }

   /**
   * Get webRTC
   * @return webRTC
  **/
  @Schema(description = "")
  public InputWebrtc getWebRTC() {
    return webRTC;
  }

  public void setWebRTC(InputWebrtc webRTC) {
    this.webRTC = webRTC;
  }

  public LiveInput webRTCPlayback(PlaybackWebrtc webRTCPlayback) {
    this.webRTCPlayback = webRTCPlayback;
    return this;
  }

   /**
   * Get webRTCPlayback
   * @return webRTCPlayback
  **/
  @Schema(description = "")
  public PlaybackWebrtc getWebRTCPlayback() {
    return webRTCPlayback;
  }

  public void setWebRTCPlayback(PlaybackWebrtc webRTCPlayback) {
    this.webRTCPlayback = webRTCPlayback;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveInput liveInput = (LiveInput) o;
    return Objects.equals(this.created, liveInput.created) &&
        Objects.equals(this.meta, liveInput.meta) &&
        Objects.equals(this.modified, liveInput.modified) &&
        Objects.equals(this.recording, liveInput.recording) &&
        Objects.equals(this.rtmps, liveInput.rtmps) &&
        Objects.equals(this.rtmpsPlayback, liveInput.rtmpsPlayback) &&
        Objects.equals(this.srt, liveInput.srt) &&
        Objects.equals(this.srtPlayback, liveInput.srtPlayback) &&
        Objects.equals(this.status, liveInput.status) &&
        Objects.equals(this.uid, liveInput.uid) &&
        Objects.equals(this.webRTC, liveInput.webRTC) &&
        Objects.equals(this.webRTCPlayback, liveInput.webRTCPlayback);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, meta, modified, recording, rtmps, rtmpsPlayback, srt, srtPlayback, status, uid, webRTC, webRTCPlayback);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveInput {\n");
    
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    recording: ").append(toIndentedString(recording)).append("\n");
    sb.append("    rtmps: ").append(toIndentedString(rtmps)).append("\n");
    sb.append("    rtmpsPlayback: ").append(toIndentedString(rtmpsPlayback)).append("\n");
    sb.append("    srt: ").append(toIndentedString(srt)).append("\n");
    sb.append("    srtPlayback: ").append(toIndentedString(srtPlayback)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    webRTC: ").append(toIndentedString(webRTC)).append("\n");
    sb.append("    webRTCPlayback: ").append(toIndentedString(webRTCPlayback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
