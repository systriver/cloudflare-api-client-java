/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Defines rules for fine-grained control over content than signed URL tokens alone. Access rules primarily make tokens conditionally valid based on user information. Access Rules are specified on token payloads as the &#x60;accessRules&#x60; property containing an array of Rule objects.
 */
@Schema(description = "Defines rules for fine-grained control over content than signed URL tokens alone. Access rules primarily make tokens conditionally valid based on user information. Access Rules are specified on token payloads as the `accessRules` property containing an array of Rule objects.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class AccessRules {
  /**
   * The action to take when a request matches a rule. If the action is &#x60;block&#x60;, the signed token blocks views for viewers matching the rule.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ALLOW("allow"),
    BLOCK("block");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ActionEnum fromValue(String input) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ActionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("action")
  private ActionEnum action = null;

  @SerializedName("country")
  private List<String> country = null;

  @SerializedName("ip")
  private List<String> ip = null;

  /**
   * Lists available rule types to match for requests. An &#x60;any&#x60; type matches all requests and can be used as a wildcard to apply default actions after other rules.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ANY("any"),
    IP_SRC("ip.src"),
    IP_GEOIP_COUNTRY("ip.geoip.country");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

   /**
   * The action to take when a request matches a rule. If the action is &#x60;block&#x60;, the signed token blocks views for viewers matching the rule.
   * @return action
  **/
  @Schema(example = "allow", description = "The action to take when a request matches a rule. If the action is `block`, the signed token blocks views for viewers matching the rule.")
  public ActionEnum getAction() {
    return action;
  }

   /**
   * An array of 2-letter country codes in ISO 3166-1 Alpha-2 format used to match requests.
   * @return country
  **/
  @Schema(description = "An array of 2-letter country codes in ISO 3166-1 Alpha-2 format used to match requests.")
  public List<String> getCountry() {
    return country;
  }

   /**
   * An array of IPv4 or IPV6 addresses or CIDRs used to match requests.
   * @return ip
  **/
  @Schema(description = "An array of IPv4 or IPV6 addresses or CIDRs used to match requests.")
  public List<String> getIp() {
    return ip;
  }

   /**
   * Lists available rule types to match for requests. An &#x60;any&#x60; type matches all requests and can be used as a wildcard to apply default actions after other rules.
   * @return type
  **/
  @Schema(example = "ip.src", description = "Lists available rule types to match for requests. An `any` type matches all requests and can be used as a wildcard to apply default actions after other rules.")
  public TypeEnum getType() {
    return type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessRules accessRules = (AccessRules) o;
    return Objects.equals(this.action, accessRules.action) &&
        Objects.equals(this.country, accessRules.country) &&
        Objects.equals(this.ip, accessRules.ip) &&
        Objects.equals(this.type, accessRules.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, country, ip, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessRules {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
