/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BuildConfig;
import io.swagger.client.model.DeploymentConfigs;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Projects
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class Projects {
  @SerializedName("build_config")
  private BuildConfig buildConfig = null;

  @SerializedName("canonical_deployment")
  private OneOfprojectsCanonicalDeployment canonicalDeployment = null;

  @SerializedName("created_on")
  private OffsetDateTime createdOn = null;

  @SerializedName("deployment_configs")
  private DeploymentConfigs deploymentConfigs = null;

  @SerializedName("domains")
  private List<Object> domains = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("latest_deployment")
  private OneOfprojectsLatestDeployment latestDeployment = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("production_branch")
  private String productionBranch = null;

  @SerializedName("source")
  private Object source = null;

  @SerializedName("subdomain")
  private String subdomain = null;

  public Projects buildConfig(BuildConfig buildConfig) {
    this.buildConfig = buildConfig;
    return this;
  }

   /**
   * Get buildConfig
   * @return buildConfig
  **/
  @Schema(description = "")
  public BuildConfig getBuildConfig() {
    return buildConfig;
  }

  public void setBuildConfig(BuildConfig buildConfig) {
    this.buildConfig = buildConfig;
  }

   /**
   * Most recent deployment to the repo.
   * @return canonicalDeployment
  **/
  @Schema(description = "Most recent deployment to the repo.")
  public OneOfprojectsCanonicalDeployment getCanonicalDeployment() {
    return canonicalDeployment;
  }

   /**
   * When the project was created.
   * @return createdOn
  **/
  @Schema(example = "2017-01-01T00:00Z", description = "When the project was created.")
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public Projects deploymentConfigs(DeploymentConfigs deploymentConfigs) {
    this.deploymentConfigs = deploymentConfigs;
    return this;
  }

   /**
   * Get deploymentConfigs
   * @return deploymentConfigs
  **/
  @Schema(description = "")
  public DeploymentConfigs getDeploymentConfigs() {
    return deploymentConfigs;
  }

  public void setDeploymentConfigs(DeploymentConfigs deploymentConfigs) {
    this.deploymentConfigs = deploymentConfigs;
  }

   /**
   * A list of associated custom domains for the project.
   * @return domains
  **/
  @Schema(example = "[\"customdomain.com\",\"customdomain.org\"]", description = "A list of associated custom domains for the project.")
  public List<Object> getDomains() {
    return domains;
  }

   /**
   * Id of the project.
   * @return id
  **/
  @Schema(example = "7b162ea7-7367-4d67-bcde-1160995d5", description = "Id of the project.")
  public String getId() {
    return id;
  }

   /**
   * Most recent deployment to the repo.
   * @return latestDeployment
  **/
  @Schema(description = "Most recent deployment to the repo.")
  public OneOfprojectsLatestDeployment getLatestDeployment() {
    return latestDeployment;
  }

  public Projects name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the project.
   * @return name
  **/
  @Schema(example = "NextJS Blog", description = "Name of the project.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Projects productionBranch(String productionBranch) {
    this.productionBranch = productionBranch;
    return this;
  }

   /**
   * Production branch of the project. Used to identify production deployments.
   * @return productionBranch
  **/
  @Schema(example = "main", description = "Production branch of the project. Used to identify production deployments.")
  public String getProductionBranch() {
    return productionBranch;
  }

  public void setProductionBranch(String productionBranch) {
    this.productionBranch = productionBranch;
  }

   /**
   * Get source
   * @return source
  **/
  @Schema(description = "")
  public Object getSource() {
    return source;
  }

   /**
   * The Cloudflare subdomain associated with the project.
   * @return subdomain
  **/
  @Schema(example = "helloworld.pages.dev", description = "The Cloudflare subdomain associated with the project.")
  public String getSubdomain() {
    return subdomain;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Projects projects = (Projects) o;
    return Objects.equals(this.buildConfig, projects.buildConfig) &&
        Objects.equals(this.canonicalDeployment, projects.canonicalDeployment) &&
        Objects.equals(this.createdOn, projects.createdOn) &&
        Objects.equals(this.deploymentConfigs, projects.deploymentConfigs) &&
        Objects.equals(this.domains, projects.domains) &&
        Objects.equals(this.id, projects.id) &&
        Objects.equals(this.latestDeployment, projects.latestDeployment) &&
        Objects.equals(this.name, projects.name) &&
        Objects.equals(this.productionBranch, projects.productionBranch) &&
        Objects.equals(this.source, projects.source) &&
        Objects.equals(this.subdomain, projects.subdomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildConfig, canonicalDeployment, createdOn, deploymentConfigs, domains, id, latestDeployment, name, productionBranch, source, subdomain);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Projects {\n");
    
    sb.append("    buildConfig: ").append(toIndentedString(buildConfig)).append("\n");
    sb.append("    canonicalDeployment: ").append(toIndentedString(canonicalDeployment)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    deploymentConfigs: ").append(toIndentedString(deploymentConfigs)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    latestDeployment: ").append(toIndentedString(latestDeployment)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productionBranch: ").append(toIndentedString(productionBranch)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    subdomain: ").append(toIndentedString(subdomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
