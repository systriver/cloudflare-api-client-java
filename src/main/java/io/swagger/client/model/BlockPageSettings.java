/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Block page layout settings.
 */
@Schema(description = "Block page layout settings.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class BlockPageSettings {
  @SerializedName("background_color")
  private String backgroundColor = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("footer_text")
  private String footerText = null;

  @SerializedName("header_text")
  private String headerText = null;

  @SerializedName("logo_path")
  private String logoPath = null;

  @SerializedName("mailto_address")
  private String mailtoAddress = null;

  @SerializedName("mailto_subject")
  private String mailtoSubject = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("suppress_footer")
  private Boolean suppressFooter = null;

  public BlockPageSettings backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * Block page background color in #rrggbb format.
   * @return backgroundColor
  **/
  @Schema(description = "Block page background color in #rrggbb format.")
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }

  public BlockPageSettings enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Enable only cipher suites and TLS versions compliant with FIPS 140-2.
   * @return enabled
  **/
  @Schema(example = "true", description = "Enable only cipher suites and TLS versions compliant with FIPS 140-2.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public BlockPageSettings footerText(String footerText) {
    this.footerText = footerText;
    return this;
  }

   /**
   * Block page footer text.
   * @return footerText
  **/
  @Schema(example = "--footer--", description = "Block page footer text.")
  public String getFooterText() {
    return footerText;
  }

  public void setFooterText(String footerText) {
    this.footerText = footerText;
  }

  public BlockPageSettings headerText(String headerText) {
    this.headerText = headerText;
    return this;
  }

   /**
   * Block page header text.
   * @return headerText
  **/
  @Schema(example = "--header--", description = "Block page header text.")
  public String getHeaderText() {
    return headerText;
  }

  public void setHeaderText(String headerText) {
    this.headerText = headerText;
  }

  public BlockPageSettings logoPath(String logoPath) {
    this.logoPath = logoPath;
    return this;
  }

   /**
   * Full URL to the logo file.
   * @return logoPath
  **/
  @Schema(example = "https://logos.com/a.png", description = "Full URL to the logo file.")
  public String getLogoPath() {
    return logoPath;
  }

  public void setLogoPath(String logoPath) {
    this.logoPath = logoPath;
  }

  public BlockPageSettings mailtoAddress(String mailtoAddress) {
    this.mailtoAddress = mailtoAddress;
    return this;
  }

   /**
   * Admin email for users to contact.
   * @return mailtoAddress
  **/
  @Schema(example = "admin@example.com", description = "Admin email for users to contact.")
  public String getMailtoAddress() {
    return mailtoAddress;
  }

  public void setMailtoAddress(String mailtoAddress) {
    this.mailtoAddress = mailtoAddress;
  }

  public BlockPageSettings mailtoSubject(String mailtoSubject) {
    this.mailtoSubject = mailtoSubject;
    return this;
  }

   /**
   * Subject line for emails created from block page.
   * @return mailtoSubject
  **/
  @Schema(example = "Blocked User Inquiry", description = "Subject line for emails created from block page.")
  public String getMailtoSubject() {
    return mailtoSubject;
  }

  public void setMailtoSubject(String mailtoSubject) {
    this.mailtoSubject = mailtoSubject;
  }

  public BlockPageSettings name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Block page title.
   * @return name
  **/
  @Schema(example = "Cloudflare", description = "Block page title.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public BlockPageSettings suppressFooter(Boolean suppressFooter) {
    this.suppressFooter = suppressFooter;
    return this;
  }

   /**
   * Suppress detailed info at the bottom of the block page.
   * @return suppressFooter
  **/
  @Schema(example = "false", description = "Suppress detailed info at the bottom of the block page.")
  public Boolean isSuppressFooter() {
    return suppressFooter;
  }

  public void setSuppressFooter(Boolean suppressFooter) {
    this.suppressFooter = suppressFooter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockPageSettings blockPageSettings = (BlockPageSettings) o;
    return Objects.equals(this.backgroundColor, blockPageSettings.backgroundColor) &&
        Objects.equals(this.enabled, blockPageSettings.enabled) &&
        Objects.equals(this.footerText, blockPageSettings.footerText) &&
        Objects.equals(this.headerText, blockPageSettings.headerText) &&
        Objects.equals(this.logoPath, blockPageSettings.logoPath) &&
        Objects.equals(this.mailtoAddress, blockPageSettings.mailtoAddress) &&
        Objects.equals(this.mailtoSubject, blockPageSettings.mailtoSubject) &&
        Objects.equals(this.name, blockPageSettings.name) &&
        Objects.equals(this.suppressFooter, blockPageSettings.suppressFooter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, enabled, footerText, headerText, logoPath, mailtoAddress, mailtoSubject, name, suppressFooter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockPageSettings {\n");
    
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    footerText: ").append(toIndentedString(footerText)).append("\n");
    sb.append("    headerText: ").append(toIndentedString(headerText)).append("\n");
    sb.append("    logoPath: ").append(toIndentedString(logoPath)).append("\n");
    sb.append("    mailtoAddress: ").append(toIndentedString(mailtoAddress)).append("\n");
    sb.append("    mailtoSubject: ").append(toIndentedString(mailtoSubject)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    suppressFooter: ").append(toIndentedString(suppressFooter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
