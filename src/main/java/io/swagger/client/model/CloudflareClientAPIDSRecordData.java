/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * Components of a DS record.
 */
@Schema(description = "Components of a DS record.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class CloudflareClientAPIDSRecordData {
  @SerializedName("algorithm")
  private BigDecimal algorithm = null;

  @SerializedName("digest")
  private String digest = null;

  @SerializedName("digest_type")
  private BigDecimal digestType = null;

  @SerializedName("key_tag")
  private BigDecimal keyTag = null;

  public CloudflareClientAPIDSRecordData algorithm(BigDecimal algorithm) {
    this.algorithm = algorithm;
    return this;
  }

   /**
   * Algorithm.
   * minimum: 0
   * maximum: 255
   * @return algorithm
  **/
  @Schema(example = "3", description = "Algorithm.")
  public BigDecimal getAlgorithm() {
    return algorithm;
  }

  public void setAlgorithm(BigDecimal algorithm) {
    this.algorithm = algorithm;
  }

  public CloudflareClientAPIDSRecordData digest(String digest) {
    this.digest = digest;
    return this;
  }

   /**
   * Digest.
   * @return digest
  **/
  @Schema(description = "Digest.")
  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }

  public CloudflareClientAPIDSRecordData digestType(BigDecimal digestType) {
    this.digestType = digestType;
    return this;
  }

   /**
   * Digest Type.
   * minimum: 0
   * maximum: 255
   * @return digestType
  **/
  @Schema(example = "1", description = "Digest Type.")
  public BigDecimal getDigestType() {
    return digestType;
  }

  public void setDigestType(BigDecimal digestType) {
    this.digestType = digestType;
  }

  public CloudflareClientAPIDSRecordData keyTag(BigDecimal keyTag) {
    this.keyTag = keyTag;
    return this;
  }

   /**
   * Key Tag.
   * minimum: 0
   * maximum: 65535
   * @return keyTag
  **/
  @Schema(example = "1", description = "Key Tag.")
  public BigDecimal getKeyTag() {
    return keyTag;
  }

  public void setKeyTag(BigDecimal keyTag) {
    this.keyTag = keyTag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudflareClientAPIDSRecordData cloudflareClientAPIDSRecordData = (CloudflareClientAPIDSRecordData) o;
    return Objects.equals(this.algorithm, cloudflareClientAPIDSRecordData.algorithm) &&
        Objects.equals(this.digest, cloudflareClientAPIDSRecordData.digest) &&
        Objects.equals(this.digestType, cloudflareClientAPIDSRecordData.digestType) &&
        Objects.equals(this.keyTag, cloudflareClientAPIDSRecordData.keyTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, digest, digestType, keyTag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudflareClientAPIDSRecordData {\n");
    
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    digestType: ").append(toIndentedString(digestType)).append("\n");
    sb.append("    keyTag: ").append(toIndentedString(keyTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
