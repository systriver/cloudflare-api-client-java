/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AllowedIdps;
import io.swagger.client.model.SaasApp;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * SaasProps
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class SaasProps {
  @SerializedName("allowed_idps")
  private AllowedIdps allowedIdps = null;

  @SerializedName("app_launcher_visible")
  private Boolean appLauncherVisible = null;

  @SerializedName("auto_redirect_to_identity")
  private Boolean autoRedirectToIdentity = null;

  @SerializedName("logo_url")
  private String logoUrl = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("saas_app")
  private SaasApp saasApp = null;

  @SerializedName("type")
  private String type = null;

  public SaasProps allowedIdps(AllowedIdps allowedIdps) {
    this.allowedIdps = allowedIdps;
    return this;
  }

   /**
   * Get allowedIdps
   * @return allowedIdps
  **/
  @Schema(description = "")
  public AllowedIdps getAllowedIdps() {
    return allowedIdps;
  }

  public void setAllowedIdps(AllowedIdps allowedIdps) {
    this.allowedIdps = allowedIdps;
  }

  public SaasProps appLauncherVisible(Boolean appLauncherVisible) {
    this.appLauncherVisible = appLauncherVisible;
    return this;
  }

   /**
   * Get appLauncherVisible
   * @return appLauncherVisible
  **/
  @Schema(description = "")
  public Boolean getAppLauncherVisible() {
    return appLauncherVisible;
  }

  public void setAppLauncherVisible(Boolean appLauncherVisible) {
    this.appLauncherVisible = appLauncherVisible;
  }

  public SaasProps autoRedirectToIdentity(Boolean autoRedirectToIdentity) {
    this.autoRedirectToIdentity = autoRedirectToIdentity;
    return this;
  }

   /**
   * Get autoRedirectToIdentity
   * @return autoRedirectToIdentity
  **/
  @Schema(description = "")
  public Boolean getAutoRedirectToIdentity() {
    return autoRedirectToIdentity;
  }

  public void setAutoRedirectToIdentity(Boolean autoRedirectToIdentity) {
    this.autoRedirectToIdentity = autoRedirectToIdentity;
  }

  public SaasProps logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

   /**
   * Get logoUrl
   * @return logoUrl
  **/
  @Schema(description = "")
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public SaasProps name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SaasProps saasApp(SaasApp saasApp) {
    this.saasApp = saasApp;
    return this;
  }

   /**
   * Get saasApp
   * @return saasApp
  **/
  @Schema(description = "")
  public SaasApp getSaasApp() {
    return saasApp;
  }

  public void setSaasApp(SaasApp saasApp) {
    this.saasApp = saasApp;
  }

  public SaasProps type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The application type.
   * @return type
  **/
  @Schema(example = "saas", description = "The application type.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaasProps saasProps = (SaasProps) o;
    return Objects.equals(this.allowedIdps, saasProps.allowedIdps) &&
        Objects.equals(this.appLauncherVisible, saasProps.appLauncherVisible) &&
        Objects.equals(this.autoRedirectToIdentity, saasProps.autoRedirectToIdentity) &&
        Objects.equals(this.logoUrl, saasProps.logoUrl) &&
        Objects.equals(this.name, saasProps.name) &&
        Objects.equals(this.saasApp, saasProps.saasApp) &&
        Objects.equals(this.type, saasProps.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedIdps, appLauncherVisible, autoRedirectToIdentity, logoUrl, name, saasApp, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaasProps {\n");
    
    sb.append("    allowedIdps: ").append(toIndentedString(allowedIdps)).append("\n");
    sb.append("    appLauncherVisible: ").append(toIndentedString(appLauncherVisible)).append("\n");
    sb.append("    autoRedirectToIdentity: ").append(toIndentedString(autoRedirectToIdentity)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    saasApp: ").append(toIndentedString(saasApp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
