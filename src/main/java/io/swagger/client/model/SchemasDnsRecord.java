/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * List of records needed to enable an Email Routing zone.
 */
@Schema(description = "List of records needed to enable an Email Routing zone.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class SchemasDnsRecord {
  @SerializedName("content")
  private String content = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("priority")
  private java.math.BigDecimal priority = null;

  @SerializedName("ttl")
  private AnyOfschemasDnsRecordTtl ttl = null;

  /**
   * DNS record type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    A("A"),
    AAAA("AAAA"),
    CNAME("CNAME"),
    HTTPS("HTTPS"),
    TXT("TXT"),
    SRV("SRV"),
    LOC("LOC"),
    MX("MX"),
    NS("NS"),
    CERT("CERT"),
    DNSKEY("DNSKEY"),
    DS("DS"),
    NAPTR("NAPTR"),
    SMIMEA("SMIMEA"),
    SSHFP("SSHFP"),
    SVCB("SVCB"),
    TLSA("TLSA"),
    URI("URI");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  public SchemasDnsRecord content(String content) {
    this.content = content;
    return this;
  }

   /**
   * DNS record content.
   * @return content
  **/
  @Schema(example = "127.0.0.1", description = "DNS record content.")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public SchemasDnsRecord name(String name) {
    this.name = name;
    return this;
  }

   /**
   * DNS record name (or @ for the zone apex).
   * @return name
  **/
  @Schema(example = "example.com", description = "DNS record name (or @ for the zone apex).")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SchemasDnsRecord priority(java.math.BigDecimal priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Required for MX, SRV and URI records. Unused by other record types. Records with lower priorities are preferred.
   * minimum: 0
   * maximum: 65535
   * @return priority
  **/
  @Schema(example = "10", description = "Required for MX, SRV and URI records. Unused by other record types. Records with lower priorities are preferred.")
  public java.math.BigDecimal getPriority() {
    return priority;
  }

  public void setPriority(java.math.BigDecimal priority) {
    this.priority = priority;
  }

  public SchemasDnsRecord ttl(AnyOfschemasDnsRecordTtl ttl) {
    this.ttl = ttl;
    return this;
  }

   /**
   * Time to live, in seconds, of the DNS record. Must be between 60 and 86400, or 1 for &#x27;automatic&#x27;.
   * @return ttl
  **/
  @Schema(example = "3600", description = "Time to live, in seconds, of the DNS record. Must be between 60 and 86400, or 1 for 'automatic'.")
  public AnyOfschemasDnsRecordTtl getTtl() {
    return ttl;
  }

  public void setTtl(AnyOfschemasDnsRecordTtl ttl) {
    this.ttl = ttl;
  }

   /**
   * DNS record type.
   * @return type
  **/
  @Schema(example = "A", description = "DNS record type.")
  public TypeEnum getType() {
    return type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemasDnsRecord schemasDnsRecord = (SchemasDnsRecord) o;
    return Objects.equals(this.content, schemasDnsRecord.content) &&
        Objects.equals(this.name, schemasDnsRecord.name) &&
        Objects.equals(this.priority, schemasDnsRecord.priority) &&
        Objects.equals(this.ttl, schemasDnsRecord.ttl) &&
        Objects.equals(this.type, schemasDnsRecord.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, name, priority, ttl, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemasDnsRecord {\n");
    
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
