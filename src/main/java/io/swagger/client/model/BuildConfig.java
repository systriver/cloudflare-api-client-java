/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Configs for the project build process.
 */
@Schema(description = "Configs for the project build process.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class BuildConfig {
  @SerializedName("build_command")
  private String buildCommand = null;

  @SerializedName("destination_dir")
  private String destinationDir = null;

  @SerializedName("root_dir")
  private String rootDir = null;

  @SerializedName("web_analytics_tag")
  private String webAnalyticsTag = null;

  @SerializedName("web_analytics_token")
  private String webAnalyticsToken = null;

  public BuildConfig buildCommand(String buildCommand) {
    this.buildCommand = buildCommand;
    return this;
  }

   /**
   * Command used to build project.
   * @return buildCommand
  **/
  @Schema(example = "npm run build", description = "Command used to build project.")
  public String getBuildCommand() {
    return buildCommand;
  }

  public void setBuildCommand(String buildCommand) {
    this.buildCommand = buildCommand;
  }

  public BuildConfig destinationDir(String destinationDir) {
    this.destinationDir = destinationDir;
    return this;
  }

   /**
   * Output directory of the build.
   * @return destinationDir
  **/
  @Schema(example = "build", description = "Output directory of the build.")
  public String getDestinationDir() {
    return destinationDir;
  }

  public void setDestinationDir(String destinationDir) {
    this.destinationDir = destinationDir;
  }

  public BuildConfig rootDir(String rootDir) {
    this.rootDir = rootDir;
    return this;
  }

   /**
   * Directory to run the command.
   * @return rootDir
  **/
  @Schema(example = "/", description = "Directory to run the command.")
  public String getRootDir() {
    return rootDir;
  }

  public void setRootDir(String rootDir) {
    this.rootDir = rootDir;
  }

  public BuildConfig webAnalyticsTag(String webAnalyticsTag) {
    this.webAnalyticsTag = webAnalyticsTag;
    return this;
  }

   /**
   * The classifying tag for analytics.
   * @return webAnalyticsTag
  **/
  @Schema(example = "cee1c73f6e4743d0b5e6bb1a0bcaabcc", description = "The classifying tag for analytics.")
  public String getWebAnalyticsTag() {
    return webAnalyticsTag;
  }

  public void setWebAnalyticsTag(String webAnalyticsTag) {
    this.webAnalyticsTag = webAnalyticsTag;
  }

  public BuildConfig webAnalyticsToken(String webAnalyticsToken) {
    this.webAnalyticsToken = webAnalyticsToken;
    return this;
  }

   /**
   * The auth token for analytics.
   * @return webAnalyticsToken
  **/
  @Schema(example = "021e1057c18547eca7b79f2516f06o7x", description = "The auth token for analytics.")
  public String getWebAnalyticsToken() {
    return webAnalyticsToken;
  }

  public void setWebAnalyticsToken(String webAnalyticsToken) {
    this.webAnalyticsToken = webAnalyticsToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildConfig buildConfig = (BuildConfig) o;
    return Objects.equals(this.buildCommand, buildConfig.buildCommand) &&
        Objects.equals(this.destinationDir, buildConfig.destinationDir) &&
        Objects.equals(this.rootDir, buildConfig.rootDir) &&
        Objects.equals(this.webAnalyticsTag, buildConfig.webAnalyticsTag) &&
        Objects.equals(this.webAnalyticsToken, buildConfig.webAnalyticsToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildCommand, destinationDir, rootDir, webAnalyticsTag, webAnalyticsToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildConfig {\n");
    
    sb.append("    buildCommand: ").append(toIndentedString(buildCommand)).append("\n");
    sb.append("    destinationDir: ").append(toIndentedString(destinationDir)).append("\n");
    sb.append("    rootDir: ").append(toIndentedString(rootDir)).append("\n");
    sb.append("    webAnalyticsTag: ").append(toIndentedString(webAnalyticsTag)).append("\n");
    sb.append("    webAnalyticsToken: ").append(toIndentedString(webAnalyticsToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
