/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.KeylessCertificateComponentsSchemasStatus;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * KeylessCertificateComponentsSchemasBase
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class KeylessCertificateComponentsSchemasBase {
  @SerializedName("created_on")
  private OffsetDateTime createdOn = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("host")
  private String host = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("modified_on")
  private OffsetDateTime modifiedOn = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("permissions")
  private List<Object> permissions = new ArrayList<Object>();

  @SerializedName("port")
  private BigDecimal port = null;

  @SerializedName("status")
  private KeylessCertificateComponentsSchemasStatus status = null;

   /**
   * When the Keyless SSL was created.
   * @return createdOn
  **/
  @Schema(example = "2014-01-01T05:20Z", required = true, description = "When the Keyless SSL was created.")
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public KeylessCertificateComponentsSchemasBase enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @Schema(required = true, description = "")
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public KeylessCertificateComponentsSchemasBase host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @Schema(required = true, description = "")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public KeylessCertificateComponentsSchemasBase id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

   /**
   * When the Keyless SSL was last modified.
   * @return modifiedOn
  **/
  @Schema(example = "2014-01-01T05:20Z", required = true, description = "When the Keyless SSL was last modified.")
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }

  public KeylessCertificateComponentsSchemasBase name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * Available permissions for the Keyless SSL for the current user requesting the item.
   * @return permissions
  **/
  @Schema(example = "[\"#ssl:read\",\"#ssl:edit\"]", required = true, description = "Available permissions for the Keyless SSL for the current user requesting the item.")
  public List<Object> getPermissions() {
    return permissions;
  }

  public KeylessCertificateComponentsSchemasBase port(BigDecimal port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @Schema(required = true, description = "")
  public BigDecimal getPort() {
    return port;
  }

  public void setPort(BigDecimal port) {
    this.port = port;
  }

  public KeylessCertificateComponentsSchemasBase status(KeylessCertificateComponentsSchemasStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(required = true, description = "")
  public KeylessCertificateComponentsSchemasStatus getStatus() {
    return status;
  }

  public void setStatus(KeylessCertificateComponentsSchemasStatus status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeylessCertificateComponentsSchemasBase keylessCertificateComponentsSchemasBase = (KeylessCertificateComponentsSchemasBase) o;
    return Objects.equals(this.createdOn, keylessCertificateComponentsSchemasBase.createdOn) &&
        Objects.equals(this.enabled, keylessCertificateComponentsSchemasBase.enabled) &&
        Objects.equals(this.host, keylessCertificateComponentsSchemasBase.host) &&
        Objects.equals(this.id, keylessCertificateComponentsSchemasBase.id) &&
        Objects.equals(this.modifiedOn, keylessCertificateComponentsSchemasBase.modifiedOn) &&
        Objects.equals(this.name, keylessCertificateComponentsSchemasBase.name) &&
        Objects.equals(this.permissions, keylessCertificateComponentsSchemasBase.permissions) &&
        Objects.equals(this.port, keylessCertificateComponentsSchemasBase.port) &&
        Objects.equals(this.status, keylessCertificateComponentsSchemasBase.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdOn, enabled, host, id, modifiedOn, name, permissions, port, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeylessCertificateComponentsSchemasBase {\n");
    
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
