/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CacheLevelValue;
import io.swagger.client.model.SchemasBase;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).
 */
@Schema(description = "Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class CacheLevel extends SchemasBase implements Setting {
  @SerializedName("id")
  private String cacheLevelId = null;

  @SerializedName("value")
  private CacheLevelValue cacheLevelValue = null;

  public CacheLevel cacheLevelId(String cacheLevelId) {
    this.cacheLevelId = cacheLevelId;
    return this;
  }

   /**
   * ID of the zone setting.
   * @return cacheLevelId
  **/
  @Schema(example = "cache_level", description = "ID of the zone setting.")
  public String getCacheLevelId() {
    return cacheLevelId;
  }

  public void setCacheLevelId(String cacheLevelId) {
    this.cacheLevelId = cacheLevelId;
  }

  public CacheLevel cacheLevelValue(CacheLevelValue cacheLevelValue) {
    this.cacheLevelValue = cacheLevelValue;
    return this;
  }

   /**
   * Get cacheLevelValue
   * @return cacheLevelValue
  **/
  @Schema(description = "")
  public CacheLevelValue getCacheLevelValue() {
    return cacheLevelValue;
  }

  public void setCacheLevelValue(CacheLevelValue cacheLevelValue) {
    this.cacheLevelValue = cacheLevelValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CacheLevel cacheLevel = (CacheLevel) o;
    return Objects.equals(this.cacheLevelId, cacheLevel.cacheLevelId) &&
        Objects.equals(this.cacheLevelValue, cacheLevel.cacheLevelValue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheLevelId, cacheLevelValue, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CacheLevel {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    cacheLevelId: ").append(toIndentedString(cacheLevelId)).append("\n");
    sb.append("    cacheLevelValue: ").append(toIndentedString(cacheLevelValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
