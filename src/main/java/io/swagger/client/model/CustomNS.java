/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CustomNSDnsRecords;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A single account custom nameserver.
 */
@Schema(description = "A single account custom nameserver.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class CustomNS {
  @SerializedName("dns_records")
  private List<CustomNSDnsRecords> dnsRecords = new ArrayList<CustomNSDnsRecords>();

  @SerializedName("ns_name")
  private String nsName = null;

  /**
   * Verification status of the nameserver.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    MOVED("moved"),
    PENDING("pending"),
    VERIFIED("verified");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("zone_tag")
  private String zoneTag = null;

  public CustomNS dnsRecords(List<CustomNSDnsRecords> dnsRecords) {
    this.dnsRecords = dnsRecords;
    return this;
  }

  public CustomNS addDnsRecordsItem(CustomNSDnsRecords dnsRecordsItem) {
    this.dnsRecords.add(dnsRecordsItem);
    return this;
  }

   /**
   * A and AAAA records associated with the nameserver.
   * @return dnsRecords
  **/
  @Schema(required = true, description = "A and AAAA records associated with the nameserver.")
  public List<CustomNSDnsRecords> getDnsRecords() {
    return dnsRecords;
  }

  public void setDnsRecords(List<CustomNSDnsRecords> dnsRecords) {
    this.dnsRecords = dnsRecords;
  }

  public CustomNS nsName(String nsName) {
    this.nsName = nsName;
    return this;
  }

   /**
   * Get nsName
   * @return nsName
  **/
  @Schema(required = true, description = "")
  public String getNsName() {
    return nsName;
  }

  public void setNsName(String nsName) {
    this.nsName = nsName;
  }

  public CustomNS status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Verification status of the nameserver.
   * @return status
  **/
  @Schema(example = "verified", required = true, description = "Verification status of the nameserver.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public CustomNS zoneTag(String zoneTag) {
    this.zoneTag = zoneTag;
    return this;
  }

   /**
   * Get zoneTag
   * @return zoneTag
  **/
  @Schema(required = true, description = "")
  public String getZoneTag() {
    return zoneTag;
  }

  public void setZoneTag(String zoneTag) {
    this.zoneTag = zoneTag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomNS customNS = (CustomNS) o;
    return Objects.equals(this.dnsRecords, customNS.dnsRecords) &&
        Objects.equals(this.nsName, customNS.nsName) &&
        Objects.equals(this.status, customNS.status) &&
        Objects.equals(this.zoneTag, customNS.zoneTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsRecords, nsName, status, zoneTag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomNS {\n");
    
    sb.append("    dnsRecords: ").append(toIndentedString(dnsRecords)).append("\n");
    sb.append("    nsName: ").append(toIndentedString(nsName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    zoneTag: ").append(toIndentedString(zoneTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
