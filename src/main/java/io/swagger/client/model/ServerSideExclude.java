/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.SchemasBase;
import io.swagger.client.model.ServerSideExcludeValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: &lt;!--sse--&gt;&lt;!--/sse--&gt;. For example: &lt;!--sse--&gt;  Bad visitors won&#x27;t see my phone number, 555-555-5555 &lt;!--/sse--&gt;. Note: SSE only will work with HTML. If you have HTML minification enabled, you won&#x27;t see the SSE tags in your HTML source when it&#x27;s served through Cloudflare. SSE will still function in this case, as Cloudflare&#x27;s HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor&#x27;s computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).
 */
@Schema(description = "If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: <!--sse--><!--/sse-->. For example: <!--sse-->  Bad visitors won't see my phone number, 555-555-5555 <!--/sse-->. Note: SSE only will work with HTML. If you have HTML minification enabled, you won't see the SSE tags in your HTML source when it's served through Cloudflare. SSE will still function in this case, as Cloudflare's HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor's computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class ServerSideExclude extends SchemasBase implements Setting {
  @SerializedName("id")
  private String serverSideExcludeId = null;

  @SerializedName("value")
  private ServerSideExcludeValue serverSideExcludeValue = null;

  public ServerSideExclude serverSideExcludeId(String serverSideExcludeId) {
    this.serverSideExcludeId = serverSideExcludeId;
    return this;
  }

   /**
   * ID of the zone setting.
   * @return serverSideExcludeId
  **/
  @Schema(example = "server_side_exclude", description = "ID of the zone setting.")
  public String getServerSideExcludeId() {
    return serverSideExcludeId;
  }

  public void setServerSideExcludeId(String serverSideExcludeId) {
    this.serverSideExcludeId = serverSideExcludeId;
  }

  public ServerSideExclude serverSideExcludeValue(ServerSideExcludeValue serverSideExcludeValue) {
    this.serverSideExcludeValue = serverSideExcludeValue;
    return this;
  }

   /**
   * Get serverSideExcludeValue
   * @return serverSideExcludeValue
  **/
  @Schema(description = "")
  public ServerSideExcludeValue getServerSideExcludeValue() {
    return serverSideExcludeValue;
  }

  public void setServerSideExcludeValue(ServerSideExcludeValue serverSideExcludeValue) {
    this.serverSideExcludeValue = serverSideExcludeValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerSideExclude serverSideExclude = (ServerSideExclude) o;
    return Objects.equals(this.serverSideExcludeId, serverSideExclude.serverSideExcludeId) &&
        Objects.equals(this.serverSideExcludeValue, serverSideExclude.serverSideExcludeValue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverSideExcludeId, serverSideExcludeValue, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerSideExclude {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    serverSideExcludeId: ").append(toIndentedString(serverSideExcludeId)).append("\n");
    sb.append("    serverSideExcludeValue: ").append(toIndentedString(serverSideExcludeValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
