/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;
/**
 * KeyConfig
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class KeyConfig {
  @SerializedName("days_until_next_rotation")
  private BigDecimal daysUntilNextRotation = null;

  @SerializedName("key_rotation_interval_days")
  private BigDecimal keyRotationIntervalDays = null;

  @SerializedName("last_key_rotation_at")
  private OffsetDateTime lastKeyRotationAt = null;

  public KeyConfig daysUntilNextRotation(BigDecimal daysUntilNextRotation) {
    this.daysUntilNextRotation = daysUntilNextRotation;
    return this;
  }

   /**
   * Get daysUntilNextRotation
   * @return daysUntilNextRotation
  **/
  @Schema(description = "")
  public BigDecimal getDaysUntilNextRotation() {
    return daysUntilNextRotation;
  }

  public void setDaysUntilNextRotation(BigDecimal daysUntilNextRotation) {
    this.daysUntilNextRotation = daysUntilNextRotation;
  }

  public KeyConfig keyRotationIntervalDays(BigDecimal keyRotationIntervalDays) {
    this.keyRotationIntervalDays = keyRotationIntervalDays;
    return this;
  }

   /**
   * Get keyRotationIntervalDays
   * @return keyRotationIntervalDays
  **/
  @Schema(description = "")
  public BigDecimal getKeyRotationIntervalDays() {
    return keyRotationIntervalDays;
  }

  public void setKeyRotationIntervalDays(BigDecimal keyRotationIntervalDays) {
    this.keyRotationIntervalDays = keyRotationIntervalDays;
  }

  public KeyConfig lastKeyRotationAt(OffsetDateTime lastKeyRotationAt) {
    this.lastKeyRotationAt = lastKeyRotationAt;
    return this;
  }

   /**
   * Get lastKeyRotationAt
   * @return lastKeyRotationAt
  **/
  @Schema(description = "")
  public OffsetDateTime getLastKeyRotationAt() {
    return lastKeyRotationAt;
  }

  public void setLastKeyRotationAt(OffsetDateTime lastKeyRotationAt) {
    this.lastKeyRotationAt = lastKeyRotationAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyConfig keyConfig = (KeyConfig) o;
    return Objects.equals(this.daysUntilNextRotation, keyConfig.daysUntilNextRotation) &&
        Objects.equals(this.keyRotationIntervalDays, keyConfig.keyRotationIntervalDays) &&
        Objects.equals(this.lastKeyRotationAt, keyConfig.lastKeyRotationAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daysUntilNextRotation, keyRotationIntervalDays, lastKeyRotationAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyConfig {\n");
    
    sb.append("    daysUntilNextRotation: ").append(toIndentedString(daysUntilNextRotation)).append("\n");
    sb.append("    keyRotationIntervalDays: ").append(toIndentedString(keyRotationIntervalDays)).append("\n");
    sb.append("    lastKeyRotationAt: ").append(toIndentedString(lastKeyRotationAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
