/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Base;
import io.swagger.client.model.BaseMeta;
import io.swagger.client.model.Tags;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;
/**
 * CNAMERecord
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class CNAMERecord extends Base {
  @SerializedName("content")
  private Object cnAMERecordContent = null;

  @SerializedName("name")
  private String cnAMERecordName = null;

  @SerializedName("type")
  private String cnAMERecordType = null;

  public CNAMERecord cnAMERecordContent(Object cnAMERecordContent) {
    this.cnAMERecordContent = cnAMERecordContent;
    return this;
  }

   /**
   * A valid hostname.
   * @return cnAMERecordContent
  **/
  @Schema(required = true, description = "A valid hostname.")
  public Object getCnAMERecordContent() {
    return cnAMERecordContent;
  }

  public void setCnAMERecordContent(Object cnAMERecordContent) {
    this.cnAMERecordContent = cnAMERecordContent;
  }

  public CNAMERecord cnAMERecordName(String cnAMERecordName) {
    this.cnAMERecordName = cnAMERecordName;
    return this;
  }

   /**
   * Get cnAMERecordName
   * @return cnAMERecordName
  **/
  @Schema(required = true, description = "")
  public String getCnAMERecordName() {
    return cnAMERecordName;
  }

  public void setCnAMERecordName(String cnAMERecordName) {
    this.cnAMERecordName = cnAMERecordName;
  }

  public CNAMERecord cnAMERecordType(String cnAMERecordType) {
    this.cnAMERecordType = cnAMERecordType;
    return this;
  }

   /**
   * Record type.
   * @return cnAMERecordType
  **/
  @Schema(example = "CNAME", required = true, description = "Record type.")
  public String getCnAMERecordType() {
    return cnAMERecordType;
  }

  public void setCnAMERecordType(String cnAMERecordType) {
    this.cnAMERecordType = cnAMERecordType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CNAMERecord cnAMERecord = (CNAMERecord) o;
    return Objects.equals(this.cnAMERecordContent, cnAMERecord.cnAMERecordContent) &&
        Objects.equals(this.cnAMERecordName, cnAMERecord.cnAMERecordName) &&
        Objects.equals(this.cnAMERecordType, cnAMERecord.cnAMERecordType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cnAMERecordContent, cnAMERecordName, cnAMERecordType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CNAMERecord {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    cnAMERecordContent: ").append(toIndentedString(cnAMERecordContent)).append("\n");
    sb.append("    cnAMERecordName: ").append(toIndentedString(cnAMERecordName)).append("\n");
    sb.append("    cnAMERecordType: ").append(toIndentedString(cnAMERecordType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
