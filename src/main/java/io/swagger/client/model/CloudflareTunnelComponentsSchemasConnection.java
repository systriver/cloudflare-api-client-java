/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * CloudflareTunnelComponentsSchemasConnection
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class CloudflareTunnelComponentsSchemasConnection {
  @SerializedName("client_id")
  private Object clientId = null;

  @SerializedName("client_version")
  private String clientVersion = null;

  @SerializedName("colo_name")
  private String coloName = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("is_pending_reconnect")
  private Boolean isPendingReconnect = null;

  @SerializedName("opened_at")
  private OffsetDateTime openedAt = null;

  @SerializedName("origin_ip")
  private String originIp = null;

  @SerializedName("uuid")
  private String uuid = null;

  public CloudflareTunnelComponentsSchemasConnection clientId(Object clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * UUID of the cloudflared instance.
   * @return clientId
  **/
  @Schema(description = "UUID of the cloudflared instance.")
  public Object getClientId() {
    return clientId;
  }

  public void setClientId(Object clientId) {
    this.clientId = clientId;
  }

  public CloudflareTunnelComponentsSchemasConnection clientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

   /**
   * Get clientVersion
   * @return clientVersion
  **/
  @Schema(description = "")
  public String getClientVersion() {
    return clientVersion;
  }

  public void setClientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
  }

  public CloudflareTunnelComponentsSchemasConnection coloName(String coloName) {
    this.coloName = coloName;
    return this;
  }

   /**
   * Get coloName
   * @return coloName
  **/
  @Schema(description = "")
  public String getColoName() {
    return coloName;
  }

  public void setColoName(String coloName) {
    this.coloName = coloName;
  }

  public CloudflareTunnelComponentsSchemasConnection id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CloudflareTunnelComponentsSchemasConnection isPendingReconnect(Boolean isPendingReconnect) {
    this.isPendingReconnect = isPendingReconnect;
    return this;
  }

   /**
   * Get isPendingReconnect
   * @return isPendingReconnect
  **/
  @Schema(description = "")
  public Boolean getIsPendingReconnect() {
    return isPendingReconnect;
  }

  public void setIsPendingReconnect(Boolean isPendingReconnect) {
    this.isPendingReconnect = isPendingReconnect;
  }

  public CloudflareTunnelComponentsSchemasConnection openedAt(OffsetDateTime openedAt) {
    this.openedAt = openedAt;
    return this;
  }

   /**
   * Timestamp of when the connection was established.
   * @return openedAt
  **/
  @Schema(example = "2021-01-25T18:22:34.317854Z", description = "Timestamp of when the connection was established.")
  public OffsetDateTime getOpenedAt() {
    return openedAt;
  }

  public void setOpenedAt(OffsetDateTime openedAt) {
    this.openedAt = openedAt;
  }

  public CloudflareTunnelComponentsSchemasConnection originIp(String originIp) {
    this.originIp = originIp;
    return this;
  }

   /**
   * The public IP address of the host running cloudflared.
   * @return originIp
  **/
  @Schema(example = "85.12.78.6", description = "The public IP address of the host running cloudflared.")
  public String getOriginIp() {
    return originIp;
  }

  public void setOriginIp(String originIp) {
    this.originIp = originIp;
  }

  public CloudflareTunnelComponentsSchemasConnection uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudflareTunnelComponentsSchemasConnection cloudflareTunnelComponentsSchemasConnection = (CloudflareTunnelComponentsSchemasConnection) o;
    return Objects.equals(this.clientId, cloudflareTunnelComponentsSchemasConnection.clientId) &&
        Objects.equals(this.clientVersion, cloudflareTunnelComponentsSchemasConnection.clientVersion) &&
        Objects.equals(this.coloName, cloudflareTunnelComponentsSchemasConnection.coloName) &&
        Objects.equals(this.id, cloudflareTunnelComponentsSchemasConnection.id) &&
        Objects.equals(this.isPendingReconnect, cloudflareTunnelComponentsSchemasConnection.isPendingReconnect) &&
        Objects.equals(this.openedAt, cloudflareTunnelComponentsSchemasConnection.openedAt) &&
        Objects.equals(this.originIp, cloudflareTunnelComponentsSchemasConnection.originIp) &&
        Objects.equals(this.uuid, cloudflareTunnelComponentsSchemasConnection.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientVersion, coloName, id, isPendingReconnect, openedAt, originIp, uuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudflareTunnelComponentsSchemasConnection {\n");
    
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientVersion: ").append(toIndentedString(clientVersion)).append("\n");
    sb.append("    coloName: ").append(toIndentedString(coloName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPendingReconnect: ").append(toIndentedString(isPendingReconnect)).append("\n");
    sb.append("    openedAt: ").append(toIndentedString(openedAt)).append("\n");
    sb.append("    originIp: ").append(toIndentedString(originIp)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
