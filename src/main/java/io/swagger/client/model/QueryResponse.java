/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Since;
import io.swagger.client.model.Until;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The exact parameters/timestamps the analytics service used to return data.
 */
@Schema(description = "The exact parameters/timestamps the analytics service used to return data.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class QueryResponse {
  @SerializedName("since")
  private Since since = null;

  @SerializedName("time_delta")
  private Integer timeDelta = null;

  @SerializedName("until")
  private Until until = null;

  public QueryResponse since(Since since) {
    this.since = since;
    return this;
  }

   /**
   * Get since
   * @return since
  **/
  @Schema(description = "")
  public Since getSince() {
    return since;
  }

  public void setSince(Since since) {
    this.since = since;
  }

  public QueryResponse timeDelta(Integer timeDelta) {
    this.timeDelta = timeDelta;
    return this;
  }

   /**
   * The amount of time (in minutes) that each data point in the timeseries represents. The granularity of the time-series returned (e.g. each bucket in the time series representing 1-minute vs 1-day) is calculated by the API based on the time-range provided to the API.
   * @return timeDelta
  **/
  @Schema(description = "The amount of time (in minutes) that each data point in the timeseries represents. The granularity of the time-series returned (e.g. each bucket in the time series representing 1-minute vs 1-day) is calculated by the API based on the time-range provided to the API.")
  public Integer getTimeDelta() {
    return timeDelta;
  }

  public void setTimeDelta(Integer timeDelta) {
    this.timeDelta = timeDelta;
  }

  public QueryResponse until(Until until) {
    this.until = until;
    return this;
  }

   /**
   * Get until
   * @return until
  **/
  @Schema(description = "")
  public Until getUntil() {
    return until;
  }

  public void setUntil(Until until) {
    this.until = until;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryResponse queryResponse = (QueryResponse) o;
    return Objects.equals(this.since, queryResponse.since) &&
        Objects.equals(this.timeDelta, queryResponse.timeDelta) &&
        Objects.equals(this.until, queryResponse.until);
  }

  @Override
  public int hashCode() {
    return Objects.hash(since, timeDelta, until);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryResponse {\n");
    
    sb.append("    since: ").append(toIndentedString(since)).append("\n");
    sb.append("    timeDelta: ").append(toIndentedString(timeDelta)).append("\n");
    sb.append("    until: ").append(toIndentedString(until)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
