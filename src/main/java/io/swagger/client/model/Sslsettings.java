/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * SSL specific settings.
 */
@Schema(description = "SSL specific settings.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T14:44:19.166727222+09:00[Asia/Tokyo]")
public class Sslsettings {
  @SerializedName("ciphers")
  private List<String> ciphers = null;

  @SerializedName("early_hints")
  private String earlyHints = null;

  @SerializedName("http2")
  private String http2 = null;

  @SerializedName("min_tls_version")
  private String minTlsVersion = null;

  @SerializedName("tls_1_3")
  private String tls13 = null;

  public Sslsettings ciphers(List<String> ciphers) {
    this.ciphers = ciphers;
    return this;
  }

  public Sslsettings addCiphersItem(String ciphersItem) {
    if (this.ciphers == null) {
      this.ciphers = new ArrayList<String>();
    }
    this.ciphers.add(ciphersItem);
    return this;
  }

   /**
   * An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
   * @return ciphers
  **/
  @Schema(example = "[\"ECDHE-RSA-AES128-GCM-SHA256\",\"AES128-SHA\"]", description = "An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.")
  public List<String> getCiphers() {
    return ciphers;
  }

  public void setCiphers(List<String> ciphers) {
    this.ciphers = ciphers;
  }

  public Sslsettings earlyHints(String earlyHints) {
    this.earlyHints = earlyHints;
    return this;
  }

   /**
   * Whether or not Early Hints is enabled.
   * @return earlyHints
  **/
  @Schema(example = "on", description = "Whether or not Early Hints is enabled.")
  public String getEarlyHints() {
    return earlyHints;
  }

  public void setEarlyHints(String earlyHints) {
    this.earlyHints = earlyHints;
  }

  public Sslsettings http2(String http2) {
    this.http2 = http2;
    return this;
  }

   /**
   * Whether or not HTTP2 is enabled.
   * @return http2
  **/
  @Schema(example = "on", description = "Whether or not HTTP2 is enabled.")
  public String getHttp2() {
    return http2;
  }

  public void setHttp2(String http2) {
    this.http2 = http2;
  }

  public Sslsettings minTlsVersion(String minTlsVersion) {
    this.minTlsVersion = minTlsVersion;
    return this;
  }

   /**
   * The minimum TLS version supported.
   * @return minTlsVersion
  **/
  @Schema(example = "1.2", description = "The minimum TLS version supported.")
  public String getMinTlsVersion() {
    return minTlsVersion;
  }

  public void setMinTlsVersion(String minTlsVersion) {
    this.minTlsVersion = minTlsVersion;
  }

  public Sslsettings tls13(String tls13) {
    this.tls13 = tls13;
    return this;
  }

   /**
   * Whether or not TLS 1.3 is enabled.
   * @return tls13
  **/
  @Schema(example = "on", description = "Whether or not TLS 1.3 is enabled.")
  public String getTls13() {
    return tls13;
  }

  public void setTls13(String tls13) {
    this.tls13 = tls13;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sslsettings sslsettings = (Sslsettings) o;
    return Objects.equals(this.ciphers, sslsettings.ciphers) &&
        Objects.equals(this.earlyHints, sslsettings.earlyHints) &&
        Objects.equals(this.http2, sslsettings.http2) &&
        Objects.equals(this.minTlsVersion, sslsettings.minTlsVersion) &&
        Objects.equals(this.tls13, sslsettings.tls13);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ciphers, earlyHints, http2, minTlsVersion, tls13);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sslsettings {\n");
    
    sb.append("    ciphers: ").append(toIndentedString(ciphers)).append("\n");
    sb.append("    earlyHints: ").append(toIndentedString(earlyHints)).append("\n");
    sb.append("    http2: ").append(toIndentedString(http2)).append("\n");
    sb.append("    minTlsVersion: ").append(toIndentedString(minTlsVersion)).append("\n");
    sb.append("    tls13: ").append(toIndentedString(tls13)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
