/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CloudflareClientAPISchemasIdResponse;
import io.swagger.client.model.CloudflareClientAPISingleRequestOutgoing;
import io.swagger.client.model.CloudflareClientAPISingleResponseOutgoing;
import io.swagger.client.model.DisableTransferResponse;
import io.swagger.client.model.DnsSecondaryPrimaryZoneComponentsSchemasIdentifier;
import io.swagger.client.model.EnableTransferResponse;
import io.swagger.client.model.InlineResponse4xx329;
import io.swagger.client.model.InlineResponse4xx330;
import io.swagger.client.model.InlineResponse4xx331;
import io.swagger.client.model.InlineResponse4xx332;
import io.swagger.client.model.InlineResponse4xx333;
import io.swagger.client.model.SchemasForceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecondaryDnsPrimaryZoneApi {
    private ApiClient apiClient;

    public SecondaryDnsPrimaryZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecondaryDnsPrimaryZoneApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration
     * @param body  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationCall(CloudflareClientAPISingleRequestOutgoing body, DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/secondary_dns/outgoing"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationValidateBeforeCall(CloudflareClientAPISingleRequestOutgoing body, DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationCall(body, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Primary Zone Configuration
     * Create primary zone configuration for outgoing zone transfers.
     * @param body  (required)
     * @param identifier  (required)
     * @return CloudflareClientAPISingleResponseOutgoing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPISingleResponseOutgoing secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(CloudflareClientAPISingleRequestOutgoing body, DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<CloudflareClientAPISingleResponseOutgoing> resp = secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationWithHttpInfo(body, identifier);
        return resp.getData();
    }

    /**
     * Create Primary Zone Configuration
     * Create primary zone configuration for outgoing zone transfers.
     * @param body  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPISingleResponseOutgoing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPISingleResponseOutgoing> secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationWithHttpInfo(CloudflareClientAPISingleRequestOutgoing body, DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationValidateBeforeCall(body, identifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPISingleResponseOutgoing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Primary Zone Configuration (asynchronously)
     * Create primary zone configuration for outgoing zone transfers.
     * @param body  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationAsync(CloudflareClientAPISingleRequestOutgoing body, DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ApiCallback<CloudflareClientAPISingleResponseOutgoing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationValidateBeforeCall(body, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPISingleResponseOutgoing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/secondary_dns/outgoing"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationValidateBeforeCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Primary Zone Configuration
     * Delete primary zone configuration for outgoing zone transfers.
     * @param identifier  (required)
     * @return CloudflareClientAPISchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPISchemasIdResponse secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<CloudflareClientAPISchemasIdResponse> resp = secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * Delete Primary Zone Configuration
     * Delete primary zone configuration for outgoing zone transfers.
     * @param identifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPISchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPISchemasIdResponse> secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationWithHttpInfo(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPISchemasIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Primary Zone Configuration (asynchronously)
     * Delete primary zone configuration for outgoing zone transfers.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationAsync(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ApiCallback<CloudflareClientAPISchemasIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPISchemasIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/secondary_dns/outgoing/disable"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersValidateBeforeCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(Async)");
        }
        
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable Outgoing Zone Transfers
     * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
     * @param identifier  (required)
     * @return DisableTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DisableTransferResponse secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<DisableTransferResponse> resp = secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * Disable Outgoing Zone Transfers
     * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
     * @param identifier  (required)
     * @return ApiResponse&lt;DisableTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DisableTransferResponse> secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersWithHttpInfo(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<DisableTransferResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disable Outgoing Zone Transfers (asynchronously)
     * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersAsync(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ApiCallback<DisableTransferResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DisableTransferResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/secondary_dns/outgoing/enable"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersValidateBeforeCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(Async)");
        }
        
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable Outgoing Zone Transfers
     * Enable outgoing zone transfers for primary zone.
     * @param identifier  (required)
     * @return EnableTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnableTransferResponse secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<EnableTransferResponse> resp = secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * Enable Outgoing Zone Transfers
     * Enable outgoing zone transfers for primary zone.
     * @param identifier  (required)
     * @return ApiResponse&lt;EnableTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnableTransferResponse> secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersWithHttpInfo(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<EnableTransferResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable Outgoing Zone Transfers (asynchronously)
     * Enable outgoing zone transfers for primary zone.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersAsync(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ApiCallback<EnableTransferResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnableTransferResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneForceDnsNotify
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneForceDnsNotifyCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/secondary_dns/outgoing/force_notify"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secondaryDnsPrimaryZoneForceDnsNotifyValidateBeforeCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling secondaryDnsPrimaryZoneForceDnsNotify(Async)");
        }
        
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneForceDnsNotifyCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Force DNS NOTIFY
     * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
     * @param identifier  (required)
     * @return SchemasForceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasForceResponse secondaryDnsPrimaryZoneForceDnsNotify(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<SchemasForceResponse> resp = secondaryDnsPrimaryZoneForceDnsNotifyWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * Force DNS NOTIFY
     * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
     * @param identifier  (required)
     * @return ApiResponse&lt;SchemasForceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasForceResponse> secondaryDnsPrimaryZoneForceDnsNotifyWithHttpInfo(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneForceDnsNotifyValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasForceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Force DNS NOTIFY (asynchronously)
     * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneForceDnsNotifyAsync(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ApiCallback<SchemasForceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneForceDnsNotifyValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasForceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/secondary_dns/outgoing/status"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusValidateBeforeCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Outgoing Zone Transfer Status
     * Get primary zone transfer status.
     * @param identifier  (required)
     * @return EnableTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnableTransferResponse secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<EnableTransferResponse> resp = secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * Get Outgoing Zone Transfer Status
     * Get primary zone transfer status.
     * @param identifier  (required)
     * @return ApiResponse&lt;EnableTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnableTransferResponse> secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusWithHttpInfo(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<EnableTransferResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Outgoing Zone Transfer Status (asynchronously)
     * Get primary zone transfer status.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusAsync(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ApiCallback<EnableTransferResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnableTransferResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/secondary_dns/outgoing"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsValidateBeforeCall(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Primary Zone Configuration Details
     * Get primary zone configuration for outgoing zone transfers.
     * @param identifier  (required)
     * @return CloudflareClientAPISingleResponseOutgoing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPISingleResponseOutgoing secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<CloudflareClientAPISingleResponseOutgoing> resp = secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * Primary Zone Configuration Details
     * Get primary zone configuration for outgoing zone transfers.
     * @param identifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPISingleResponseOutgoing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPISingleResponseOutgoing> secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsWithHttpInfo(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPISingleResponseOutgoing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Primary Zone Configuration Details (asynchronously)
     * Get primary zone configuration for outgoing zone transfers.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsAsync(DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ApiCallback<CloudflareClientAPISingleResponseOutgoing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPISingleResponseOutgoing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration
     * @param body  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationCall(CloudflareClientAPISingleRequestOutgoing body, DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/secondary_dns/outgoing"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationValidateBeforeCall(CloudflareClientAPISingleRequestOutgoing body, DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationCall(body, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Primary Zone Configuration
     * Update primary zone configuration for outgoing zone transfers.
     * @param body  (required)
     * @param identifier  (required)
     * @return CloudflareClientAPISingleResponseOutgoing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPISingleResponseOutgoing secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(CloudflareClientAPISingleRequestOutgoing body, DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<CloudflareClientAPISingleResponseOutgoing> resp = secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationWithHttpInfo(body, identifier);
        return resp.getData();
    }

    /**
     * Update Primary Zone Configuration
     * Update primary zone configuration for outgoing zone transfers.
     * @param body  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPISingleResponseOutgoing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPISingleResponseOutgoing> secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationWithHttpInfo(CloudflareClientAPISingleRequestOutgoing body, DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationValidateBeforeCall(body, identifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPISingleResponseOutgoing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Primary Zone Configuration (asynchronously)
     * Update primary zone configuration for outgoing zone transfers.
     * @param body  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationAsync(CloudflareClientAPISingleRequestOutgoing body, DnsSecondaryPrimaryZoneComponentsSchemasIdentifier identifier, final ApiCallback<CloudflareClientAPISingleResponseOutgoing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationValidateBeforeCall(body, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPISingleResponseOutgoing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
