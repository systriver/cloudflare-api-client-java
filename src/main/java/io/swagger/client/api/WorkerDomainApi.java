/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CloudflareClientAPIDomainResponseCollection;
import io.swagger.client.model.CloudflareClientAPIDomainResponseSingle;
import io.swagger.client.model.DomainIdentifier;
import io.swagger.client.model.DomainsComponentsSchemasAccountIdentifier;
import io.swagger.client.model.InlineResponse4xx176;
import io.swagger.client.model.InlineResponse4xx177;
import io.swagger.client.model.WorkersDomainsBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkerDomainApi {
    private ApiClient apiClient;

    public WorkerDomainApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerDomainApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for workerDomainAttachToDomain
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workerDomainAttachToDomainCall(WorkersDomainsBody body, DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/workers/domains"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workerDomainAttachToDomainValidateBeforeCall(WorkersDomainsBody body, DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workerDomainAttachToDomain(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workerDomainAttachToDomain(Async)");
        }
        
        com.squareup.okhttp.Call call = workerDomainAttachToDomainCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Attach to Domain
     * Attaches a worker to a zone and hostname.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return CloudflareClientAPIDomainResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIDomainResponseSingle workerDomainAttachToDomain(WorkersDomainsBody body, DomainsComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        ApiResponse<CloudflareClientAPIDomainResponseSingle> resp = workerDomainAttachToDomainWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Attach to Domain
     * Attaches a worker to a zone and hostname.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIDomainResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIDomainResponseSingle> workerDomainAttachToDomainWithHttpInfo(WorkersDomainsBody body, DomainsComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workerDomainAttachToDomainValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIDomainResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Attach to Domain (asynchronously)
     * Attaches a worker to a zone and hostname.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workerDomainAttachToDomainAsync(WorkersDomainsBody body, DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ApiCallback<CloudflareClientAPIDomainResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workerDomainAttachToDomainValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIDomainResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workerDomainDetachFromDomain
     * @param domainIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workerDomainDetachFromDomainCall(DomainIdentifier domainIdentifier, DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/workers/domains/{domain_identifier}"
            .replaceAll("\\{" + "domain_identifier" + "\\}", apiClient.escapeString(domainIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workerDomainDetachFromDomainValidateBeforeCall(DomainIdentifier domainIdentifier, DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'domainIdentifier' is set
        if (domainIdentifier == null) {
            throw new ApiException("Missing the required parameter 'domainIdentifier' when calling workerDomainDetachFromDomain(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workerDomainDetachFromDomain(Async)");
        }
        
        com.squareup.okhttp.Call call = workerDomainDetachFromDomainCall(domainIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Detach from Domain
     * Detaches a worker from a zone and hostname.
     * @param domainIdentifier  (required)
     * @param accountIdentifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void workerDomainDetachFromDomain(DomainIdentifier domainIdentifier, DomainsComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        workerDomainDetachFromDomainWithHttpInfo(domainIdentifier, accountIdentifier);
    }

    /**
     * Detach from Domain
     * Detaches a worker from a zone and hostname.
     * @param domainIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> workerDomainDetachFromDomainWithHttpInfo(DomainIdentifier domainIdentifier, DomainsComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workerDomainDetachFromDomainValidateBeforeCall(domainIdentifier, accountIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Detach from Domain (asynchronously)
     * Detaches a worker from a zone and hostname.
     * @param domainIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workerDomainDetachFromDomainAsync(DomainIdentifier domainIdentifier, DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workerDomainDetachFromDomainValidateBeforeCall(domainIdentifier, accountIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for workerDomainGetADomain
     * @param domainIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workerDomainGetADomainCall(DomainIdentifier domainIdentifier, DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/workers/domains/{domain_identifier}"
            .replaceAll("\\{" + "domain_identifier" + "\\}", apiClient.escapeString(domainIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workerDomainGetADomainValidateBeforeCall(DomainIdentifier domainIdentifier, DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'domainIdentifier' is set
        if (domainIdentifier == null) {
            throw new ApiException("Missing the required parameter 'domainIdentifier' when calling workerDomainGetADomain(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workerDomainGetADomain(Async)");
        }
        
        com.squareup.okhttp.Call call = workerDomainGetADomainCall(domainIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Domain
     * Gets a Worker Domain.
     * @param domainIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return CloudflareClientAPIDomainResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIDomainResponseSingle workerDomainGetADomain(DomainIdentifier domainIdentifier, DomainsComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        ApiResponse<CloudflareClientAPIDomainResponseSingle> resp = workerDomainGetADomainWithHttpInfo(domainIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get a Domain
     * Gets a Worker Domain.
     * @param domainIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIDomainResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIDomainResponseSingle> workerDomainGetADomainWithHttpInfo(DomainIdentifier domainIdentifier, DomainsComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workerDomainGetADomainValidateBeforeCall(domainIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIDomainResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Domain (asynchronously)
     * Gets a Worker Domain.
     * @param domainIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workerDomainGetADomainAsync(DomainIdentifier domainIdentifier, DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ApiCallback<CloudflareClientAPIDomainResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workerDomainGetADomainValidateBeforeCall(domainIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIDomainResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workerDomainListDomains
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workerDomainListDomainsCall(DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/workers/domains"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workerDomainListDomainsValidateBeforeCall(DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workerDomainListDomains(Async)");
        }
        
        com.squareup.okhttp.Call call = workerDomainListDomainsCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Domains
     * Lists all Worker Domains.
     * @param accountIdentifier  (required)
     * @return CloudflareClientAPIDomainResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIDomainResponseCollection workerDomainListDomains(DomainsComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        ApiResponse<CloudflareClientAPIDomainResponseCollection> resp = workerDomainListDomainsWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List Domains
     * Lists all Worker Domains.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIDomainResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIDomainResponseCollection> workerDomainListDomainsWithHttpInfo(DomainsComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workerDomainListDomainsValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIDomainResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Domains (asynchronously)
     * Lists all Worker Domains.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workerDomainListDomainsAsync(DomainsComponentsSchemasAccountIdentifier accountIdentifier, final ApiCallback<CloudflareClientAPIDomainResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workerDomainListDomainsValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIDomainResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
