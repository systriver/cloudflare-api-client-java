/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AppsComponentsSchemasIdResponse;
import io.swagger.client.model.AppsComponentsSchemasIdentifier;
import io.swagger.client.model.AppsComponentsSchemasResponseCollection2;
import io.swagger.client.model.AppsComponentsSchemasSingleResponse2;
import io.swagger.client.model.ComponentsSchemasEmptyResponse;
import io.swagger.client.model.InlineResponse200106;
import io.swagger.client.model.InlineResponse4xx202;
import io.swagger.client.model.InlineResponse4xx203;
import io.swagger.client.model.InlineResponse4xx204;
import io.swagger.client.model.InlineResponse4xx322;
import io.swagger.client.model.InlineResponse4xx323;
import io.swagger.client.model.InlineResponse4xx324;
import io.swagger.client.model.PolicyCheckResponse;
import io.swagger.client.model.SchemasAppId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneLevelAccessApplicationsApi {
    private ApiClient apiClient;

    public ZoneLevelAccessApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneLevelAccessApplicationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for zoneLevelAccessApplicationsAddABookmarkApplication
     * @param body  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsAddABookmarkApplicationCall(Object body, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLevelAccessApplicationsAddABookmarkApplicationValidateBeforeCall(Object body, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zoneLevelAccessApplicationsAddABookmarkApplication(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsAddABookmarkApplication(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsAddABookmarkApplicationCall(body, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a Bookmark application
     * Adds a custom link to the App Launcher. Bookmark applications are not protected by Access.
     * @param body  (required)
     * @param identifier  (required)
     * @return InlineResponse200106
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200106 zoneLevelAccessApplicationsAddABookmarkApplication(Object body, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<InlineResponse200106> resp = zoneLevelAccessApplicationsAddABookmarkApplicationWithHttpInfo(body, identifier);
        return resp.getData();
    }

    /**
     * Add a Bookmark application
     * Adds a custom link to the App Launcher. Bookmark applications are not protected by Access.
     * @param body  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;InlineResponse200106&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200106> zoneLevelAccessApplicationsAddABookmarkApplicationWithHttpInfo(Object body, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsAddABookmarkApplicationValidateBeforeCall(body, identifier, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200106>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a Bookmark application (asynchronously)
     * Adds a custom link to the App Launcher. Bookmark applications are not protected by Access.
     * @param body  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsAddABookmarkApplicationAsync(Object body, AppsComponentsSchemasIdentifier identifier, final ApiCallback<InlineResponse200106> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsAddABookmarkApplicationValidateBeforeCall(body, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200106>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneLevelAccessApplicationsDeleteAnAccessApplication
     * @param appId  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsDeleteAnAccessApplicationCall(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLevelAccessApplicationsDeleteAnAccessApplicationValidateBeforeCall(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling zoneLevelAccessApplicationsDeleteAnAccessApplication(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsDeleteAnAccessApplication(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsDeleteAnAccessApplicationCall(appId, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Access application
     * Deletes an application from Access.
     * @param appId  (required)
     * @param identifier  (required)
     * @return AppsComponentsSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppsComponentsSchemasIdResponse zoneLevelAccessApplicationsDeleteAnAccessApplication(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<AppsComponentsSchemasIdResponse> resp = zoneLevelAccessApplicationsDeleteAnAccessApplicationWithHttpInfo(appId, identifier);
        return resp.getData();
    }

    /**
     * Delete an Access application
     * Deletes an application from Access.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AppsComponentsSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppsComponentsSchemasIdResponse> zoneLevelAccessApplicationsDeleteAnAccessApplicationWithHttpInfo(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsDeleteAnAccessApplicationValidateBeforeCall(appId, identifier, null, null);
        Type localVarReturnType = new TypeToken<AppsComponentsSchemasIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an Access application (asynchronously)
     * Deletes an application from Access.
     * @param appId  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsDeleteAnAccessApplicationAsync(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ApiCallback<AppsComponentsSchemasIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsDeleteAnAccessApplicationValidateBeforeCall(appId, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppsComponentsSchemasIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneLevelAccessApplicationsGetAnAccessApplication
     * @param appId  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsGetAnAccessApplicationCall(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLevelAccessApplicationsGetAnAccessApplicationValidateBeforeCall(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling zoneLevelAccessApplicationsGetAnAccessApplication(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsGetAnAccessApplication(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsGetAnAccessApplicationCall(appId, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an Access application
     * Fetches information about an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return AppsComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppsComponentsSchemasSingleResponse2 zoneLevelAccessApplicationsGetAnAccessApplication(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<AppsComponentsSchemasSingleResponse2> resp = zoneLevelAccessApplicationsGetAnAccessApplicationWithHttpInfo(appId, identifier);
        return resp.getData();
    }

    /**
     * Get an Access application
     * Fetches information about an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;AppsComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppsComponentsSchemasSingleResponse2> zoneLevelAccessApplicationsGetAnAccessApplicationWithHttpInfo(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsGetAnAccessApplicationValidateBeforeCall(appId, identifier, null, null);
        Type localVarReturnType = new TypeToken<AppsComponentsSchemasSingleResponse2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Access application (asynchronously)
     * Fetches information about an Access application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsGetAnAccessApplicationAsync(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ApiCallback<AppsComponentsSchemasSingleResponse2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsGetAnAccessApplicationValidateBeforeCall(appId, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppsComponentsSchemasSingleResponse2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneLevelAccessApplicationsListAccessApplications
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsListAccessApplicationsCall(AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLevelAccessApplicationsListAccessApplicationsValidateBeforeCall(AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsListAccessApplications(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsListAccessApplicationsCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Access Applications
     * List all Access Applications in a zone.
     * @param identifier  (required)
     * @return AppsComponentsSchemasResponseCollection2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppsComponentsSchemasResponseCollection2 zoneLevelAccessApplicationsListAccessApplications(AppsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<AppsComponentsSchemasResponseCollection2> resp = zoneLevelAccessApplicationsListAccessApplicationsWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * List Access Applications
     * List all Access Applications in a zone.
     * @param identifier  (required)
     * @return ApiResponse&lt;AppsComponentsSchemasResponseCollection2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppsComponentsSchemasResponseCollection2> zoneLevelAccessApplicationsListAccessApplicationsWithHttpInfo(AppsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsListAccessApplicationsValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<AppsComponentsSchemasResponseCollection2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Access Applications (asynchronously)
     * List all Access Applications in a zone.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsListAccessApplicationsAsync(AppsComponentsSchemasIdentifier identifier, final ApiCallback<AppsComponentsSchemasResponseCollection2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsListAccessApplicationsValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppsComponentsSchemasResponseCollection2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneLevelAccessApplicationsRevokeServiceTokens
     * @param appId  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsRevokeServiceTokensCall(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{app_id}/revoke_tokens"
            .replaceAll("\\{" + "app_id" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLevelAccessApplicationsRevokeServiceTokensValidateBeforeCall(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling zoneLevelAccessApplicationsRevokeServiceTokens(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsRevokeServiceTokens(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsRevokeServiceTokensCall(appId, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Revoke service tokens
     * Revokes all service tokens used by an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ComponentsSchemasEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentsSchemasEmptyResponse zoneLevelAccessApplicationsRevokeServiceTokens(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<ComponentsSchemasEmptyResponse> resp = zoneLevelAccessApplicationsRevokeServiceTokensWithHttpInfo(appId, identifier);
        return resp.getData();
    }

    /**
     * Revoke service tokens
     * Revokes all service tokens used by an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;ComponentsSchemasEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentsSchemasEmptyResponse> zoneLevelAccessApplicationsRevokeServiceTokensWithHttpInfo(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsRevokeServiceTokensValidateBeforeCall(appId, identifier, null, null);
        Type localVarReturnType = new TypeToken<ComponentsSchemasEmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Revoke service tokens (asynchronously)
     * Revokes all service tokens used by an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsRevokeServiceTokensAsync(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ApiCallback<ComponentsSchemasEmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsRevokeServiceTokensValidateBeforeCall(appId, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentsSchemasEmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneLevelAccessApplicationsTestAccessPolicies
     * @param appId  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsTestAccessPoliciesCall(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{app_id}/user_policy_checks"
            .replaceAll("\\{" + "app_id" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLevelAccessApplicationsTestAccessPoliciesValidateBeforeCall(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling zoneLevelAccessApplicationsTestAccessPolicies(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsTestAccessPolicies(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsTestAccessPoliciesCall(appId, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test Access policies
     * Tests if a specific user has permission to access an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return PolicyCheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolicyCheckResponse zoneLevelAccessApplicationsTestAccessPolicies(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<PolicyCheckResponse> resp = zoneLevelAccessApplicationsTestAccessPoliciesWithHttpInfo(appId, identifier);
        return resp.getData();
    }

    /**
     * Test Access policies
     * Tests if a specific user has permission to access an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;PolicyCheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolicyCheckResponse> zoneLevelAccessApplicationsTestAccessPoliciesWithHttpInfo(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsTestAccessPoliciesValidateBeforeCall(appId, identifier, null, null);
        Type localVarReturnType = new TypeToken<PolicyCheckResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test Access policies (asynchronously)
     * Tests if a specific user has permission to access an application.
     * @param appId  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsTestAccessPoliciesAsync(SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ApiCallback<PolicyCheckResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsTestAccessPoliciesValidateBeforeCall(appId, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolicyCheckResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneLevelAccessApplicationsUpdateABookmarkApplication
     * @param body  (required)
     * @param appId  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsUpdateABookmarkApplicationCall(Object body, SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/access/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLevelAccessApplicationsUpdateABookmarkApplicationValidateBeforeCall(Object body, SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zoneLevelAccessApplicationsUpdateABookmarkApplication(Async)");
        }
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling zoneLevelAccessApplicationsUpdateABookmarkApplication(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zoneLevelAccessApplicationsUpdateABookmarkApplication(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsUpdateABookmarkApplicationCall(body, appId, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Bookmark application
     * Updates a Bookmark application.
     * @param body  (required)
     * @param appId  (required)
     * @param identifier  (required)
     * @return InlineResponse200106
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200106 zoneLevelAccessApplicationsUpdateABookmarkApplication(Object body, SchemasAppId appId, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<InlineResponse200106> resp = zoneLevelAccessApplicationsUpdateABookmarkApplicationWithHttpInfo(body, appId, identifier);
        return resp.getData();
    }

    /**
     * Update a Bookmark application
     * Updates a Bookmark application.
     * @param body  (required)
     * @param appId  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;InlineResponse200106&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200106> zoneLevelAccessApplicationsUpdateABookmarkApplicationWithHttpInfo(Object body, SchemasAppId appId, AppsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsUpdateABookmarkApplicationValidateBeforeCall(body, appId, identifier, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200106>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Bookmark application (asynchronously)
     * Updates a Bookmark application.
     * @param body  (required)
     * @param appId  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLevelAccessApplicationsUpdateABookmarkApplicationAsync(Object body, SchemasAppId appId, AppsComponentsSchemasIdentifier identifier, final ApiCallback<InlineResponse200106> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLevelAccessApplicationsUpdateABookmarkApplicationValidateBeforeCall(body, appId, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200106>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
