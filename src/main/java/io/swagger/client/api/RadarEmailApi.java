/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse20046;
import io.swagger.client.model.InlineResponse20063;
import io.swagger.client.model.InlineResponse20064;
import io.swagger.client.model.InlineResponse20065;
import io.swagger.client.model.InlineResponse20066;
import io.swagger.client.model.InlineResponse20067;
import io.swagger.client.model.InlineResponse20068;
import io.swagger.client.model.InlineResponse20069;
import io.swagger.client.model.InlineResponse20070;
import io.swagger.client.model.InlineResponse20071;
import io.swagger.client.model.InlineResponse404;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarEmailApi {
    private ApiClient apiClient;

    public RadarEmailApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarEmailApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for radarGetEmailSecurityArcSummary
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityArcSummaryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/summary/arc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityArcSummaryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityArcSummaryCall(name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of ARC validations
     * Percentage distribution of emails classified per Arc validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20063
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20063 radarGetEmailSecurityArcSummary(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20063> resp = radarGetEmailSecurityArcSummaryWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get a summary of ARC validations
     * Percentage distribution of emails classified per Arc validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20063&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20063> radarGetEmailSecurityArcSummaryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityArcSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of ARC validations (asynchronously)
     * Percentage distribution of emails classified per Arc validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityArcSummaryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20063> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityArcSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityArcTimeseriesGroup
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityArcTimeseriesGroupCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/timeseries/arc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityArcTimeseriesGroupValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityArcTimeseriesGroupCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a time series of ARC validations
     * Percentage distribution of emails classified per Arc validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20067
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20067 radarGetEmailSecurityArcTimeseriesGroup(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20067> resp = radarGetEmailSecurityArcTimeseriesGroupWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get a time series of ARC validations
     * Percentage distribution of emails classified per Arc validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20067&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20067> radarGetEmailSecurityArcTimeseriesGroupWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityArcTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20067>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a time series of ARC validations (asynchronously)
     * Percentage distribution of emails classified per Arc validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityArcTimeseriesGroupAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20067> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityArcTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20067>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityDkimSummary
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityDkimSummaryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/summary/dkim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityDkimSummaryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityDkimSummaryCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of DKIM validations
     * Percentage distribution of emails classified per DKIM validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20063
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20063 radarGetEmailSecurityDkimSummary(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20063> resp = radarGetEmailSecurityDkimSummaryWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get a summary of DKIM validations
     * Percentage distribution of emails classified per DKIM validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20063&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20063> radarGetEmailSecurityDkimSummaryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityDkimSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of DKIM validations (asynchronously)
     * Percentage distribution of emails classified per DKIM validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityDkimSummaryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20063> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityDkimSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityDkimTimeseriesGroup
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityDkimTimeseriesGroupCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/timeseries/dkim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityDkimTimeseriesGroupValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityDkimTimeseriesGroupCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a time series of DKIM validations validations
     * Percentage distribution of emails classified per DKIM validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20067
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20067 radarGetEmailSecurityDkimTimeseriesGroup(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20067> resp = radarGetEmailSecurityDkimTimeseriesGroupWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get a time series of DKIM validations validations
     * Percentage distribution of emails classified per DKIM validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20067&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20067> radarGetEmailSecurityDkimTimeseriesGroupWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityDkimTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20067>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a time series of DKIM validations validations (asynchronously)
     * Percentage distribution of emails classified per DKIM validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityDkimTimeseriesGroupAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20067> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityDkimTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20067>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityDmarcSummary
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityDmarcSummaryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/summary/dmarc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityDmarcSummaryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityDmarcSummaryCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of DMARC validations
     * Percentage distribution of emails classified per DMARC validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20063
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20063 radarGetEmailSecurityDmarcSummary(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20063> resp = radarGetEmailSecurityDmarcSummaryWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format);
        return resp.getData();
    }

    /**
     * Get a summary of DMARC validations
     * Percentage distribution of emails classified per DMARC validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20063&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20063> radarGetEmailSecurityDmarcSummaryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityDmarcSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of DMARC validations (asynchronously)
     * Percentage distribution of emails classified per DMARC validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityDmarcSummaryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ApiCallback<InlineResponse20063> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityDmarcSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityDmarcTimeseriesGroup
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityDmarcTimeseriesGroupCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/timeseries/dmarc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityDmarcTimeseriesGroupValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityDmarcTimeseriesGroupCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a time series of DMARC validations
     * Percentage distribution of emails classified per DMARC validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20067
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20067 radarGetEmailSecurityDmarcTimeseriesGroup(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20067> resp = radarGetEmailSecurityDmarcTimeseriesGroupWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format);
        return resp.getData();
    }

    /**
     * Get a time series of DMARC validations
     * Percentage distribution of emails classified per DMARC validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20067&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20067> radarGetEmailSecurityDmarcTimeseriesGroupWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityDmarcTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20067>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a time series of DMARC validations (asynchronously)
     * Percentage distribution of emails classified per DMARC validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityDmarcTimeseriesGroupAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ApiCallback<InlineResponse20067> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityDmarcTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20067>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityMaliciousSummary
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityMaliciousSummaryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/summary/malicious";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityMaliciousSummaryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityMaliciousSummaryCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of MALICIOUS validations
     * Percentage distribution of emails classified as MALICIOUS.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20064
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20064 radarGetEmailSecurityMaliciousSummary(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20064> resp = radarGetEmailSecurityMaliciousSummaryWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get a summary of MALICIOUS validations
     * Percentage distribution of emails classified as MALICIOUS.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20064&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20064> radarGetEmailSecurityMaliciousSummaryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityMaliciousSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20064>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of MALICIOUS validations (asynchronously)
     * Percentage distribution of emails classified as MALICIOUS.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityMaliciousSummaryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20064> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityMaliciousSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20064>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityMaliciousTimeseriesGroup
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityMaliciousTimeseriesGroupCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/timeseries/malicious";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityMaliciousTimeseriesGroupValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityMaliciousTimeseriesGroupCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a time series of MALICIOUS validations
     * Percentage distribution of emails classified as MALICIOUS over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20068
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20068 radarGetEmailSecurityMaliciousTimeseriesGroup(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20068> resp = radarGetEmailSecurityMaliciousTimeseriesGroupWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get a time series of MALICIOUS validations
     * Percentage distribution of emails classified as MALICIOUS over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20068&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20068> radarGetEmailSecurityMaliciousTimeseriesGroupWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityMaliciousTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20068>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a time series of MALICIOUS validations (asynchronously)
     * Percentage distribution of emails classified as MALICIOUS over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityMaliciousTimeseriesGroupAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20068> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityMaliciousTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20068>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecuritySpamSummary
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecuritySpamSummaryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/summary/spam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecuritySpamSummaryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecuritySpamSummaryCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of SPAM validations
     * Percentage distribution of emails classified as SPAM.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20065
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20065 radarGetEmailSecuritySpamSummary(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20065> resp = radarGetEmailSecuritySpamSummaryWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get a summary of SPAM validations
     * Percentage distribution of emails classified as SPAM.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20065&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20065> radarGetEmailSecuritySpamSummaryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecuritySpamSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20065>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of SPAM validations (asynchronously)
     * Percentage distribution of emails classified as SPAM.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecuritySpamSummaryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20065> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecuritySpamSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20065>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecuritySpamTimeseriesGroup
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecuritySpamTimeseriesGroupCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/timeseries/spam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecuritySpamTimeseriesGroupValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecuritySpamTimeseriesGroupCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a time series of SPAM validations
     * Percentage distribution of emails classified as SPAM over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20069
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20069 radarGetEmailSecuritySpamTimeseriesGroup(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20069> resp = radarGetEmailSecuritySpamTimeseriesGroupWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get a time series of SPAM validations
     * Percentage distribution of emails classified as SPAM over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20069&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20069> radarGetEmailSecuritySpamTimeseriesGroupWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecuritySpamTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20069>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a time series of SPAM validations (asynchronously)
     * Percentage distribution of emails classified as SPAM over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecuritySpamTimeseriesGroupAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20069> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecuritySpamTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20069>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecuritySpfSummary
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecuritySpfSummaryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/summary/spf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecuritySpfSummaryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecuritySpfSummaryCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of SPF validations
     * Percentage distribution of emails classified per SPF validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20063
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20063 radarGetEmailSecuritySpfSummary(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format) throws ApiException {
        ApiResponse<InlineResponse20063> resp = radarGetEmailSecuritySpfSummaryWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format);
        return resp.getData();
    }

    /**
     * Get a summary of SPF validations
     * Percentage distribution of emails classified per SPF validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20063&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20063> radarGetEmailSecuritySpfSummaryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecuritySpfSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of SPF validations (asynchronously)
     * Percentage distribution of emails classified per SPF validation.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecuritySpfSummaryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ApiCallback<InlineResponse20063> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecuritySpfSummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20063>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecuritySpfTimeseriesGroup
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecuritySpfTimeseriesGroupCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/timeseries/spf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecuritySpfTimeseriesGroupValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecuritySpfTimeseriesGroupCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a time series of SPF validations
     * Percentage distribution of emails classified per SPF validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20067
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20067 radarGetEmailSecuritySpfTimeseriesGroup(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format) throws ApiException {
        ApiResponse<InlineResponse20067> resp = radarGetEmailSecuritySpfTimeseriesGroupWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format);
        return resp.getData();
    }

    /**
     * Get a time series of SPF validations
     * Percentage distribution of emails classified per SPF validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20067&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20067> radarGetEmailSecuritySpfTimeseriesGroupWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecuritySpfTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20067>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a time series of SPF validations (asynchronously)
     * Percentage distribution of emails classified per SPF validation over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecuritySpfTimeseriesGroupAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ApiCallback<InlineResponse20067> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecuritySpfTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20067>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityThreatCategorySummary
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityThreatCategorySummaryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/summary/threat_category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityThreatCategorySummaryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityThreatCategorySummaryCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of Threat Categories
     * Percentage distribution of emails classified in Threat Categories.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20066
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20066 radarGetEmailSecurityThreatCategorySummary(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20066> resp = radarGetEmailSecurityThreatCategorySummaryWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get a summary of Threat Categories
     * Percentage distribution of emails classified in Threat Categories.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20066&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20066> radarGetEmailSecurityThreatCategorySummaryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityThreatCategorySummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20066>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of Threat Categories (asynchronously)
     * Percentage distribution of emails classified in Threat Categories.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityThreatCategorySummaryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20066> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityThreatCategorySummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20066>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityThreatCategoryTimeseriesGroup
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityThreatCategoryTimeseriesGroupCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/timeseries/threat_category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityThreatCategoryTimeseriesGroupValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityThreatCategoryTimeseriesGroupCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a time series of Threat Categories
     * Percentage distribution of emails classified in Threat Categories over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20070
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20070 radarGetEmailSecurityThreatCategoryTimeseriesGroup(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20070> resp = radarGetEmailSecurityThreatCategoryTimeseriesGroupWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get a time series of Threat Categories
     * Percentage distribution of emails classified in Threat Categories over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20070&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20070> radarGetEmailSecurityThreatCategoryTimeseriesGroupWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityThreatCategoryTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20070>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a time series of Threat Categories (asynchronously)
     * Percentage distribution of emails classified in Threat Categories over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityThreatCategoryTimeseriesGroupAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20070> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityThreatCategoryTimeseriesGroupValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20070>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopASes
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/ases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopASesValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesCall(limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by HTTP requests
     * Get the top autonomous systems (AS) by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetEmailSecurityTopASes(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetEmailSecurityTopASesWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by HTTP requests
     * Get the top autonomous systems (AS) by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetEmailSecurityTopASesWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by HTTP requests (asynchronously)
     * Get the top autonomous systems (AS) by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopASesByArc
     * @param arc ARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesByArcCall(String arc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/ases/arc/{arc}"
            .replaceAll("\\{" + "arc" + "\\}", apiClient.escapeString(arc.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopASesByArcValidateBeforeCall(String arc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'arc' is set
        if (arc == null) {
            throw new ApiException("Missing the required parameter 'arc' when calling radarGetEmailSecurityTopASesByArc(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByArcCall(arc, limit, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by ARC validations
     * Get the top autonomous systems (AS), by emails classified, of ARC validations.
     * @param arc ARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetEmailSecurityTopASesByArc(String arc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetEmailSecurityTopASesByArcWithHttpInfo(arc, limit, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by ARC validations
     * Get the top autonomous systems (AS), by emails classified, of ARC validations.
     * @param arc ARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetEmailSecurityTopASesByArcWithHttpInfo(String arc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByArcValidateBeforeCall(arc, limit, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by ARC validations (asynchronously)
     * Get the top autonomous systems (AS), by emails classified, of ARC validations.
     * @param arc ARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesByArcAsync(String arc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByArcValidateBeforeCall(arc, limit, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopASesByDkim
     * @param dkim DKIM. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesByDkimCall(String dkim, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/ases/dkim/{dkim}"
            .replaceAll("\\{" + "dkim" + "\\}", apiClient.escapeString(dkim.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopASesByDkimValidateBeforeCall(String dkim, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dkim' is set
        if (dkim == null) {
            throw new ApiException("Missing the required parameter 'dkim' when calling radarGetEmailSecurityTopASesByDkim(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByDkimCall(dkim, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by DKIM validations
     * Get the top autonomous systems (AS), by emails classified, of DKIM validations.
     * @param dkim DKIM. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetEmailSecurityTopASesByDkim(String dkim, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetEmailSecurityTopASesByDkimWithHttpInfo(dkim, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by DKIM validations
     * Get the top autonomous systems (AS), by emails classified, of DKIM validations.
     * @param dkim DKIM. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetEmailSecurityTopASesByDkimWithHttpInfo(String dkim, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByDkimValidateBeforeCall(dkim, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by DKIM validations (asynchronously)
     * Get the top autonomous systems (AS), by emails classified, of DKIM validations.
     * @param dkim DKIM. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesByDkimAsync(String dkim, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByDkimValidateBeforeCall(dkim, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopASesByDmarc
     * @param dmarc DMARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesByDmarcCall(String dmarc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/ases/dmarc/{dmarc}"
            .replaceAll("\\{" + "dmarc" + "\\}", apiClient.escapeString(dmarc.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopASesByDmarcValidateBeforeCall(String dmarc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dmarc' is set
        if (dmarc == null) {
            throw new ApiException("Missing the required parameter 'dmarc' when calling radarGetEmailSecurityTopASesByDmarc(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByDmarcCall(dmarc, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by DMARC validations
     * Get the top autonomous systems (AS), by emails classified, of DMARC validations.
     * @param dmarc DMARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetEmailSecurityTopASesByDmarc(String dmarc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetEmailSecurityTopASesByDmarcWithHttpInfo(dmarc, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by DMARC validations
     * Get the top autonomous systems (AS), by emails classified, of DMARC validations.
     * @param dmarc DMARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetEmailSecurityTopASesByDmarcWithHttpInfo(String dmarc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByDmarcValidateBeforeCall(dmarc, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by DMARC validations (asynchronously)
     * Get the top autonomous systems (AS), by emails classified, of DMARC validations.
     * @param dmarc DMARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesByDmarcAsync(String dmarc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByDmarcValidateBeforeCall(dmarc, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopASesByMalicious
     * @param malicious Malicious. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesByMaliciousCall(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/ases/malicious/{malicious}"
            .replaceAll("\\{" + "malicious" + "\\}", apiClient.escapeString(malicious.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopASesByMaliciousValidateBeforeCall(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'malicious' is set
        if (malicious == null) {
            throw new ApiException("Missing the required parameter 'malicious' when calling radarGetEmailSecurityTopASesByMalicious(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByMaliciousCall(malicious, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by Malicious validations
     * Get the top autonomous systems (AS), by emails classified, of Malicious validations.
     * @param malicious Malicious. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetEmailSecurityTopASesByMalicious(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetEmailSecurityTopASesByMaliciousWithHttpInfo(malicious, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by Malicious validations
     * Get the top autonomous systems (AS), by emails classified, of Malicious validations.
     * @param malicious Malicious. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetEmailSecurityTopASesByMaliciousWithHttpInfo(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByMaliciousValidateBeforeCall(malicious, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by Malicious validations (asynchronously)
     * Get the top autonomous systems (AS), by emails classified, of Malicious validations.
     * @param malicious Malicious. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesByMaliciousAsync(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesByMaliciousValidateBeforeCall(malicious, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopASesBySpam
     * @param spam Spam. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesBySpamCall(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/ases/spam/{spam}"
            .replaceAll("\\{" + "spam" + "\\}", apiClient.escapeString(spam.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopASesBySpamValidateBeforeCall(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spam' is set
        if (spam == null) {
            throw new ApiException("Missing the required parameter 'spam' when calling radarGetEmailSecurityTopASesBySpam(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesBySpamCall(spam, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by Spam validations
     * Get the top autonomous systems (AS), by emails classified, of Spam validations.
     * @param spam Spam. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetEmailSecurityTopASesBySpam(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetEmailSecurityTopASesBySpamWithHttpInfo(spam, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by Spam validations
     * Get the top autonomous systems (AS), by emails classified, of Spam validations.
     * @param spam Spam. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetEmailSecurityTopASesBySpamWithHttpInfo(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesBySpamValidateBeforeCall(spam, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by Spam validations (asynchronously)
     * Get the top autonomous systems (AS), by emails classified, of Spam validations.
     * @param spam Spam. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesBySpamAsync(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesBySpamValidateBeforeCall(spam, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopASesBySpf
     * @param spf SPF. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesBySpfCall(String spf, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/ases/spf/{spf}"
            .replaceAll("\\{" + "spf" + "\\}", apiClient.escapeString(spf.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopASesBySpfValidateBeforeCall(String spf, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spf' is set
        if (spf == null) {
            throw new ApiException("Missing the required parameter 'spf' when calling radarGetEmailSecurityTopASesBySpf(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesBySpfCall(spf, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by SPF validations
     * Get the top autonomous systems (AS), by emails classified, of SPF validations.
     * @param spf SPF. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetEmailSecurityTopASesBySpf(String spf, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetEmailSecurityTopASesBySpfWithHttpInfo(spf, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by SPF validations
     * Get the top autonomous systems (AS), by emails classified, of SPF validations.
     * @param spf SPF. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetEmailSecurityTopASesBySpfWithHttpInfo(String spf, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesBySpfValidateBeforeCall(spf, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by SPF validations (asynchronously)
     * Get the top autonomous systems (AS), by emails classified, of SPF validations.
     * @param spf SPF. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopASesBySpfAsync(String spf, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopASesBySpfValidateBeforeCall(spf, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopLocations
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsCall(limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by HTTP requests
     * Get the top locations by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetEmailSecurityTopLocations(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetEmailSecurityTopLocationsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by HTTP requests
     * Get the top locations by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetEmailSecurityTopLocationsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by HTTP requests (asynchronously)
     * Get the top locations by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopLocationsByArc
     * @param arc ARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByArcCall(String arc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/locations/arc/{arc}"
            .replaceAll("\\{" + "arc" + "\\}", apiClient.escapeString(arc.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByArcValidateBeforeCall(String arc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'arc' is set
        if (arc == null) {
            throw new ApiException("Missing the required parameter 'arc' when calling radarGetEmailSecurityTopLocationsByArc(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByArcCall(arc, limit, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by ARC validations
     * Get the locations, by emails classified, of ARC validations.
     * @param arc ARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetEmailSecurityTopLocationsByArc(String arc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetEmailSecurityTopLocationsByArcWithHttpInfo(arc, limit, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get top locations by ARC validations
     * Get the locations, by emails classified, of ARC validations.
     * @param arc ARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetEmailSecurityTopLocationsByArcWithHttpInfo(String arc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByArcValidateBeforeCall(arc, limit, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by ARC validations (asynchronously)
     * Get the locations, by emails classified, of ARC validations.
     * @param arc ARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByArcAsync(String arc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByArcValidateBeforeCall(arc, limit, name, dateRange, dateStart, dateEnd, asn, location, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopLocationsByDkim
     * @param dkim DKIM. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByDkimCall(String dkim, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/locations/dkim/{dkim}"
            .replaceAll("\\{" + "dkim" + "\\}", apiClient.escapeString(dkim.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByDkimValidateBeforeCall(String dkim, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dkim' is set
        if (dkim == null) {
            throw new ApiException("Missing the required parameter 'dkim' when calling radarGetEmailSecurityTopLocationsByDkim(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByDkimCall(dkim, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by DKIM validations
     * Get the locations, by emails classified, of DKIM validations.
     * @param dkim DKIM. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetEmailSecurityTopLocationsByDkim(String dkim, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetEmailSecurityTopLocationsByDkimWithHttpInfo(dkim, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get top locations by DKIM validations
     * Get the locations, by emails classified, of DKIM validations.
     * @param dkim DKIM. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetEmailSecurityTopLocationsByDkimWithHttpInfo(String dkim, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByDkimValidateBeforeCall(dkim, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by DKIM validations (asynchronously)
     * Get the locations, by emails classified, of DKIM validations.
     * @param dkim DKIM. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByDkimAsync(String dkim, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByDkimValidateBeforeCall(dkim, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopLocationsByDmarc
     * @param dmarc DMARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByDmarcCall(String dmarc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/locations/dmarc/{dmarc}"
            .replaceAll("\\{" + "dmarc" + "\\}", apiClient.escapeString(dmarc.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByDmarcValidateBeforeCall(String dmarc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dmarc' is set
        if (dmarc == null) {
            throw new ApiException("Missing the required parameter 'dmarc' when calling radarGetEmailSecurityTopLocationsByDmarc(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByDmarcCall(dmarc, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by DMARC validations
     * Get the locations, by emails classified, of DMARC validations.
     * @param dmarc DMARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetEmailSecurityTopLocationsByDmarc(String dmarc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetEmailSecurityTopLocationsByDmarcWithHttpInfo(dmarc, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format);
        return resp.getData();
    }

    /**
     * Get top locations by DMARC validations
     * Get the locations, by emails classified, of DMARC validations.
     * @param dmarc DMARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetEmailSecurityTopLocationsByDmarcWithHttpInfo(String dmarc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByDmarcValidateBeforeCall(dmarc, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by DMARC validations (asynchronously)
     * Get the locations, by emails classified, of DMARC validations.
     * @param dmarc DMARC. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByDmarcAsync(String dmarc, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> spf, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByDmarcValidateBeforeCall(dmarc, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopLocationsByMalicious
     * @param malicious Malicious. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByMaliciousCall(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/locations/malicious/{malicious}"
            .replaceAll("\\{" + "malicious" + "\\}", apiClient.escapeString(malicious.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByMaliciousValidateBeforeCall(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'malicious' is set
        if (malicious == null) {
            throw new ApiException("Missing the required parameter 'malicious' when calling radarGetEmailSecurityTopLocationsByMalicious(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByMaliciousCall(malicious, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by Malicious validations
     * Get the locations, by emails classified, of Malicious validations.
     * @param malicious Malicious. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetEmailSecurityTopLocationsByMalicious(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetEmailSecurityTopLocationsByMaliciousWithHttpInfo(malicious, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get top locations by Malicious validations
     * Get the locations, by emails classified, of Malicious validations.
     * @param malicious Malicious. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetEmailSecurityTopLocationsByMaliciousWithHttpInfo(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByMaliciousValidateBeforeCall(malicious, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by Malicious validations (asynchronously)
     * Get the locations, by emails classified, of Malicious validations.
     * @param malicious Malicious. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsByMaliciousAsync(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsByMaliciousValidateBeforeCall(malicious, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopLocationsBySpam
     * @param spam Spam. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsBySpamCall(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/locations/spam/{spam}"
            .replaceAll("\\{" + "spam" + "\\}", apiClient.escapeString(spam.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (spf != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "spf", spf));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsBySpamValidateBeforeCall(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spam' is set
        if (spam == null) {
            throw new ApiException("Missing the required parameter 'spam' when calling radarGetEmailSecurityTopLocationsBySpam(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsBySpamCall(spam, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by Spam validations
     * Get the locations, by emails classified, of Spam validations.
     * @param spam Spam. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetEmailSecurityTopLocationsBySpam(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetEmailSecurityTopLocationsBySpamWithHttpInfo(spam, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format);
        return resp.getData();
    }

    /**
     * Get top locations by Spam validations
     * Get the locations, by emails classified, of Spam validations.
     * @param spam Spam. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetEmailSecurityTopLocationsBySpamWithHttpInfo(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsBySpamValidateBeforeCall(spam, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by Spam validations (asynchronously)
     * Get the locations, by emails classified, of Spam validations.
     * @param spam Spam. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param spf Filter for spf. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsBySpamAsync(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsBySpamValidateBeforeCall(spam, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, spf, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetEmailSecurityTopLocationsBySpf
     * @param spf SPF. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsBySpfCall(String spf, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/email/top/locations/spf/{spf}"
            .replaceAll("\\{" + "spf" + "\\}", apiClient.escapeString(spf.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (arc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "arc", arc));
        if (dkim != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dkim", dkim));
        if (dmarc != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dmarc", dmarc));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsBySpfValidateBeforeCall(String spf, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'spf' is set
        if (spf == null) {
            throw new ApiException("Missing the required parameter 'spf' when calling radarGetEmailSecurityTopLocationsBySpf(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsBySpfCall(spf, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by SPF validations
     * Get the locations, by emails classified, of SPF validations.
     * @param spf SPF. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetEmailSecurityTopLocationsBySpf(String spf, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetEmailSecurityTopLocationsBySpfWithHttpInfo(spf, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format);
        return resp.getData();
    }

    /**
     * Get top locations by SPF validations
     * Get the locations, by emails classified, of SPF validations.
     * @param spf SPF. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetEmailSecurityTopLocationsBySpfWithHttpInfo(String spf, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsBySpfValidateBeforeCall(spf, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by SPF validations (asynchronously)
     * Get the locations, by emails classified, of SPF validations.
     * @param spf SPF. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param arc Filter for arc (Authenticated Received Chain). (optional)
     * @param dkim Filter for dkim. (optional)
     * @param dmarc Filter for dmarc. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetEmailSecurityTopLocationsBySpfAsync(String spf, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> arc, List<String> dkim, List<String> dmarc, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetEmailSecurityTopLocationsBySpfValidateBeforeCall(spf, limit, name, dateRange, dateStart, dateEnd, asn, location, arc, dkim, dmarc, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
