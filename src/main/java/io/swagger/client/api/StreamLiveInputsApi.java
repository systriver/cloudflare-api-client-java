/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiResponseCommonFailure;
import io.swagger.client.model.CreateInputRequest;
import io.swagger.client.model.CreateOutputRequest;
import io.swagger.client.model.LiveInputResponseCollection;
import io.swagger.client.model.LiveInputResponseSingle;
import io.swagger.client.model.OutputResponseCollection;
import io.swagger.client.model.OutputResponseSingle;
import io.swagger.client.model.UpdateInputRequest;
import io.swagger.client.model.UpdateOutputRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamLiveInputsApi {
    private ApiClient apiClient;

    public StreamLiveInputsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamLiveInputsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for streamLiveInputsCreateALiveInput
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsCreateALiveInputCall(CreateInputRequest body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/stream/live_inputs"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call streamLiveInputsCreateALiveInputValidateBeforeCall(CreateInputRequest body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling streamLiveInputsCreateALiveInput(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling streamLiveInputsCreateALiveInput(Async)");
        }
        
        com.squareup.okhttp.Call call = streamLiveInputsCreateALiveInputCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a live input
     * Creates a live input, and returns credentials that you or your users can use to stream live video to Cloudflare Stream.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return LiveInputResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveInputResponseSingle streamLiveInputsCreateALiveInput(CreateInputRequest body, String accountIdentifier) throws ApiException {
        ApiResponse<LiveInputResponseSingle> resp = streamLiveInputsCreateALiveInputWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create a live input
     * Creates a live input, and returns credentials that you or your users can use to stream live video to Cloudflare Stream.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;LiveInputResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveInputResponseSingle> streamLiveInputsCreateALiveInputWithHttpInfo(CreateInputRequest body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = streamLiveInputsCreateALiveInputValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LiveInputResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a live input (asynchronously)
     * Creates a live input, and returns credentials that you or your users can use to stream live video to Cloudflare Stream.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsCreateALiveInputAsync(CreateInputRequest body, String accountIdentifier, final ApiCallback<LiveInputResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = streamLiveInputsCreateALiveInputValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveInputResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for streamLiveInputsCreateANewOutputConnectedToALiveInput
     * @param body  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsCreateANewOutputConnectedToALiveInputCall(CreateOutputRequest body, String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/stream/live_inputs/{live_input_identifier}/outputs"
            .replaceAll("\\{" + "live_input_identifier" + "\\}", apiClient.escapeString(liveInputIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call streamLiveInputsCreateANewOutputConnectedToALiveInputValidateBeforeCall(CreateOutputRequest body, String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling streamLiveInputsCreateANewOutputConnectedToALiveInput(Async)");
        }
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsCreateANewOutputConnectedToALiveInput(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling streamLiveInputsCreateANewOutputConnectedToALiveInput(Async)");
        }
        
        com.squareup.okhttp.Call call = streamLiveInputsCreateANewOutputConnectedToALiveInputCall(body, liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new output, connected to a live input
     * Creates a new output that can be used to simulcast or restream live video to other RTMP or SRT destinations. Outputs are always linked to a specific live input — one live input can have many outputs.
     * @param body  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return OutputResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputResponseSingle streamLiveInputsCreateANewOutputConnectedToALiveInput(CreateOutputRequest body, String liveInputIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<OutputResponseSingle> resp = streamLiveInputsCreateANewOutputConnectedToALiveInputWithHttpInfo(body, liveInputIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create a new output, connected to a live input
     * Creates a new output that can be used to simulcast or restream live video to other RTMP or SRT destinations. Outputs are always linked to a specific live input — one live input can have many outputs.
     * @param body  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;OutputResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputResponseSingle> streamLiveInputsCreateANewOutputConnectedToALiveInputWithHttpInfo(CreateOutputRequest body, String liveInputIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = streamLiveInputsCreateANewOutputConnectedToALiveInputValidateBeforeCall(body, liveInputIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<OutputResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new output, connected to a live input (asynchronously)
     * Creates a new output that can be used to simulcast or restream live video to other RTMP or SRT destinations. Outputs are always linked to a specific live input — one live input can have many outputs.
     * @param body  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsCreateANewOutputConnectedToALiveInputAsync(CreateOutputRequest body, String liveInputIdentifier, String accountIdentifier, final ApiCallback<OutputResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = streamLiveInputsCreateANewOutputConnectedToALiveInputValidateBeforeCall(body, liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for streamLiveInputsDeleteALiveInput
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsDeleteALiveInputCall(String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/stream/live_inputs/{live_input_identifier}"
            .replaceAll("\\{" + "live_input_identifier" + "\\}", apiClient.escapeString(liveInputIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call streamLiveInputsDeleteALiveInputValidateBeforeCall(String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsDeleteALiveInput(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling streamLiveInputsDeleteALiveInput(Async)");
        }
        
        com.squareup.okhttp.Call call = streamLiveInputsDeleteALiveInputCall(liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a live input
     * Prevents a live input from being streamed to and makes the live input inaccessible to any future API calls.
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void streamLiveInputsDeleteALiveInput(String liveInputIdentifier, String accountIdentifier) throws ApiException {
        streamLiveInputsDeleteALiveInputWithHttpInfo(liveInputIdentifier, accountIdentifier);
    }

    /**
     * Delete a live input
     * Prevents a live input from being streamed to and makes the live input inaccessible to any future API calls.
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> streamLiveInputsDeleteALiveInputWithHttpInfo(String liveInputIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = streamLiveInputsDeleteALiveInputValidateBeforeCall(liveInputIdentifier, accountIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a live input (asynchronously)
     * Prevents a live input from being streamed to and makes the live input inaccessible to any future API calls.
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsDeleteALiveInputAsync(String liveInputIdentifier, String accountIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = streamLiveInputsDeleteALiveInputValidateBeforeCall(liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for streamLiveInputsDeleteAnOutput
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsDeleteAnOutputCall(String outputIdentifier, String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/stream/live_inputs/{live_input_identifier}/outputs/{output_identifier}"
            .replaceAll("\\{" + "output_identifier" + "\\}", apiClient.escapeString(outputIdentifier.toString()))
            .replaceAll("\\{" + "live_input_identifier" + "\\}", apiClient.escapeString(liveInputIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call streamLiveInputsDeleteAnOutputValidateBeforeCall(String outputIdentifier, String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'outputIdentifier' is set
        if (outputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'outputIdentifier' when calling streamLiveInputsDeleteAnOutput(Async)");
        }
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsDeleteAnOutput(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling streamLiveInputsDeleteAnOutput(Async)");
        }
        
        com.squareup.okhttp.Call call = streamLiveInputsDeleteAnOutputCall(outputIdentifier, liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an output
     * Deletes an output and removes it from the associated live input.
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void streamLiveInputsDeleteAnOutput(String outputIdentifier, String liveInputIdentifier, String accountIdentifier) throws ApiException {
        streamLiveInputsDeleteAnOutputWithHttpInfo(outputIdentifier, liveInputIdentifier, accountIdentifier);
    }

    /**
     * Delete an output
     * Deletes an output and removes it from the associated live input.
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> streamLiveInputsDeleteAnOutputWithHttpInfo(String outputIdentifier, String liveInputIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = streamLiveInputsDeleteAnOutputValidateBeforeCall(outputIdentifier, liveInputIdentifier, accountIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an output (asynchronously)
     * Deletes an output and removes it from the associated live input.
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsDeleteAnOutputAsync(String outputIdentifier, String liveInputIdentifier, String accountIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = streamLiveInputsDeleteAnOutputValidateBeforeCall(outputIdentifier, liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInput
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputCall(String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/stream/live_inputs/{live_input_identifier}/outputs"
            .replaceAll("\\{" + "live_input_identifier" + "\\}", apiClient.escapeString(liveInputIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputValidateBeforeCall(String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInput(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInput(Async)");
        }
        
        com.squareup.okhttp.Call call = streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputCall(liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all outputs associated with a specified live input
     * Retrieves all outputs associated with a specified live input.
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return OutputResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputResponseCollection streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInput(String liveInputIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<OutputResponseCollection> resp = streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputWithHttpInfo(liveInputIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * List all outputs associated with a specified live input
     * Retrieves all outputs associated with a specified live input.
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;OutputResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputResponseCollection> streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputWithHttpInfo(String liveInputIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputValidateBeforeCall(liveInputIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<OutputResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all outputs associated with a specified live input (asynchronously)
     * Retrieves all outputs associated with a specified live input.
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputAsync(String liveInputIdentifier, String accountIdentifier, final ApiCallback<OutputResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = streamLiveInputsListAllOutputsAssociatedWithASpecifiedLiveInputValidateBeforeCall(liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for streamLiveInputsListLiveInputs
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsListLiveInputsCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/stream/live_inputs"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call streamLiveInputsListLiveInputsValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling streamLiveInputsListLiveInputs(Async)");
        }
        
        com.squareup.okhttp.Call call = streamLiveInputsListLiveInputsCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List live inputs
     * Lists the live inputs created for an account. To get the credentials needed to stream to a specific live input, request a single live input.
     * @param accountIdentifier  (required)
     * @return LiveInputResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveInputResponseCollection streamLiveInputsListLiveInputs(String accountIdentifier) throws ApiException {
        ApiResponse<LiveInputResponseCollection> resp = streamLiveInputsListLiveInputsWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List live inputs
     * Lists the live inputs created for an account. To get the credentials needed to stream to a specific live input, request a single live input.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;LiveInputResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveInputResponseCollection> streamLiveInputsListLiveInputsWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = streamLiveInputsListLiveInputsValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LiveInputResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List live inputs (asynchronously)
     * Lists the live inputs created for an account. To get the credentials needed to stream to a specific live input, request a single live input.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsListLiveInputsAsync(String accountIdentifier, final ApiCallback<LiveInputResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = streamLiveInputsListLiveInputsValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveInputResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for streamLiveInputsRetrieveALiveInput
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsRetrieveALiveInputCall(String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/stream/live_inputs/{live_input_identifier}"
            .replaceAll("\\{" + "live_input_identifier" + "\\}", apiClient.escapeString(liveInputIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call streamLiveInputsRetrieveALiveInputValidateBeforeCall(String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsRetrieveALiveInput(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling streamLiveInputsRetrieveALiveInput(Async)");
        }
        
        com.squareup.okhttp.Call call = streamLiveInputsRetrieveALiveInputCall(liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a live input
     * Retrieves details of an existing live input.
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return LiveInputResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveInputResponseSingle streamLiveInputsRetrieveALiveInput(String liveInputIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<LiveInputResponseSingle> resp = streamLiveInputsRetrieveALiveInputWithHttpInfo(liveInputIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Retrieve a live input
     * Retrieves details of an existing live input.
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;LiveInputResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveInputResponseSingle> streamLiveInputsRetrieveALiveInputWithHttpInfo(String liveInputIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = streamLiveInputsRetrieveALiveInputValidateBeforeCall(liveInputIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LiveInputResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a live input (asynchronously)
     * Retrieves details of an existing live input.
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsRetrieveALiveInputAsync(String liveInputIdentifier, String accountIdentifier, final ApiCallback<LiveInputResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = streamLiveInputsRetrieveALiveInputValidateBeforeCall(liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveInputResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for streamLiveInputsUpdateALiveInput
     * @param body  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsUpdateALiveInputCall(UpdateInputRequest body, String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/stream/live_inputs/{live_input_identifier}"
            .replaceAll("\\{" + "live_input_identifier" + "\\}", apiClient.escapeString(liveInputIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call streamLiveInputsUpdateALiveInputValidateBeforeCall(UpdateInputRequest body, String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling streamLiveInputsUpdateALiveInput(Async)");
        }
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsUpdateALiveInput(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling streamLiveInputsUpdateALiveInput(Async)");
        }
        
        com.squareup.okhttp.Call call = streamLiveInputsUpdateALiveInputCall(body, liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a live input
     * Updates a specified live input.
     * @param body  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return LiveInputResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveInputResponseSingle streamLiveInputsUpdateALiveInput(UpdateInputRequest body, String liveInputIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<LiveInputResponseSingle> resp = streamLiveInputsUpdateALiveInputWithHttpInfo(body, liveInputIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update a live input
     * Updates a specified live input.
     * @param body  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;LiveInputResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveInputResponseSingle> streamLiveInputsUpdateALiveInputWithHttpInfo(UpdateInputRequest body, String liveInputIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = streamLiveInputsUpdateALiveInputValidateBeforeCall(body, liveInputIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LiveInputResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a live input (asynchronously)
     * Updates a specified live input.
     * @param body  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsUpdateALiveInputAsync(UpdateInputRequest body, String liveInputIdentifier, String accountIdentifier, final ApiCallback<LiveInputResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = streamLiveInputsUpdateALiveInputValidateBeforeCall(body, liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveInputResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for streamLiveInputsUpdateAnOutput
     * @param body  (required)
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsUpdateAnOutputCall(UpdateOutputRequest body, String outputIdentifier, String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/stream/live_inputs/{live_input_identifier}/outputs/{output_identifier}"
            .replaceAll("\\{" + "output_identifier" + "\\}", apiClient.escapeString(outputIdentifier.toString()))
            .replaceAll("\\{" + "live_input_identifier" + "\\}", apiClient.escapeString(liveInputIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call streamLiveInputsUpdateAnOutputValidateBeforeCall(UpdateOutputRequest body, String outputIdentifier, String liveInputIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling streamLiveInputsUpdateAnOutput(Async)");
        }
        // verify the required parameter 'outputIdentifier' is set
        if (outputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'outputIdentifier' when calling streamLiveInputsUpdateAnOutput(Async)");
        }
        // verify the required parameter 'liveInputIdentifier' is set
        if (liveInputIdentifier == null) {
            throw new ApiException("Missing the required parameter 'liveInputIdentifier' when calling streamLiveInputsUpdateAnOutput(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling streamLiveInputsUpdateAnOutput(Async)");
        }
        
        com.squareup.okhttp.Call call = streamLiveInputsUpdateAnOutputCall(body, outputIdentifier, liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an output
     * Updates the state of an output.
     * @param body  (required)
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return OutputResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputResponseSingle streamLiveInputsUpdateAnOutput(UpdateOutputRequest body, String outputIdentifier, String liveInputIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<OutputResponseSingle> resp = streamLiveInputsUpdateAnOutputWithHttpInfo(body, outputIdentifier, liveInputIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update an output
     * Updates the state of an output.
     * @param body  (required)
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;OutputResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputResponseSingle> streamLiveInputsUpdateAnOutputWithHttpInfo(UpdateOutputRequest body, String outputIdentifier, String liveInputIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = streamLiveInputsUpdateAnOutputValidateBeforeCall(body, outputIdentifier, liveInputIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<OutputResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an output (asynchronously)
     * Updates the state of an output.
     * @param body  (required)
     * @param outputIdentifier  (required)
     * @param liveInputIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call streamLiveInputsUpdateAnOutputAsync(UpdateOutputRequest body, String outputIdentifier, String liveInputIdentifier, String accountIdentifier, final ApiCallback<OutputResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = streamLiveInputsUpdateAnOutputValidateBeforeCall(body, outputIdentifier, liveInputIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
