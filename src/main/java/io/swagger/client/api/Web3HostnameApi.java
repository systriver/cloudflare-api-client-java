/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CloudflareClientAPIApiResponseSingleId;
import io.swagger.client.model.ComponentsSchemasCollectionResponse;
import io.swagger.client.model.ContentListDetailsResponse;
import io.swagger.client.model.ContentListEntryCollectionResponse;
import io.swagger.client.model.ContentListEntryCreateRequest;
import io.swagger.client.model.ContentListEntrySingleResponse;
import io.swagger.client.model.ContentListUpdateRequest;
import io.swagger.client.model.CreateRequest;
import io.swagger.client.model.InlineResponse4xx44;
import io.swagger.client.model.InlineResponse4xx483;
import io.swagger.client.model.InlineResponse4xx484;
import io.swagger.client.model.InlineResponse4xx485;
import io.swagger.client.model.InlineResponse4xx486;
import io.swagger.client.model.InlineResponse4xx487;
import io.swagger.client.model.ModifyRequest;
import io.swagger.client.model.Web3HostnameComponentsSchemasSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Web3HostnameApi {
    private ApiClient apiClient;

    public Web3HostnameApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Web3HostnameApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for web3HostnameCreateIpfsUniversalPathGatewayContentListEntry
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameCreateIpfsUniversalPathGatewayContentListEntryCall(ContentListEntryCreateRequest body, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameCreateIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(ContentListEntryCreateRequest body, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameCreateIpfsUniversalPathGatewayContentListEntryCall(body, identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create IPFS Universal Path Gateway Content List Entry
     * 
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ContentListEntrySingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentListEntrySingleResponse web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(ContentListEntryCreateRequest body, String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<ContentListEntrySingleResponse> resp = web3HostnameCreateIpfsUniversalPathGatewayContentListEntryWithHttpInfo(body, identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Create IPFS Universal Path Gateway Content List Entry
     * 
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ContentListEntrySingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentListEntrySingleResponse> web3HostnameCreateIpfsUniversalPathGatewayContentListEntryWithHttpInfo(ContentListEntryCreateRequest body, String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameCreateIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(body, identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ContentListEntrySingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create IPFS Universal Path Gateway Content List Entry (asynchronously)
     * 
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameCreateIpfsUniversalPathGatewayContentListEntryAsync(ContentListEntryCreateRequest body, String identifier, String zoneIdentifier, final ApiCallback<ContentListEntrySingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameCreateIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(body, identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentListEntrySingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for web3HostnameCreateWeb3Hostname
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameCreateWeb3HostnameCall(CreateRequest body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameCreateWeb3HostnameValidateBeforeCall(CreateRequest body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling web3HostnameCreateWeb3Hostname(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameCreateWeb3Hostname(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameCreateWeb3HostnameCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Web3 Hostname
     * 
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return Web3HostnameComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Web3HostnameComponentsSchemasSingleResponse web3HostnameCreateWeb3Hostname(CreateRequest body, String zoneIdentifier) throws ApiException {
        ApiResponse<Web3HostnameComponentsSchemasSingleResponse> resp = web3HostnameCreateWeb3HostnameWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Create Web3 Hostname
     * 
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;Web3HostnameComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Web3HostnameComponentsSchemasSingleResponse> web3HostnameCreateWeb3HostnameWithHttpInfo(CreateRequest body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameCreateWeb3HostnameValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Web3HostnameComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Web3 Hostname (asynchronously)
     * 
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameCreateWeb3HostnameAsync(CreateRequest body, String zoneIdentifier, final ApiCallback<Web3HostnameComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameCreateWeb3HostnameValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Web3HostnameComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryCall(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}"
            .replaceAll("\\{" + "content_list_entry_identifier" + "\\}", apiClient.escapeString(contentListEntryIdentifier.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentListEntryIdentifier' is set
        if (contentListEntryIdentifier == null) {
            throw new ApiException("Missing the required parameter 'contentListEntryIdentifier' when calling web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryCall(contentListEntryIdentifier, identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete IPFS Universal Path Gateway Content List Entry
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return CloudflareClientAPIApiResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIApiResponseSingleId web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(String contentListEntryIdentifier, String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<CloudflareClientAPIApiResponseSingleId> resp = web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryWithHttpInfo(contentListEntryIdentifier, identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Delete IPFS Universal Path Gateway Content List Entry
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIApiResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIApiResponseSingleId> web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryWithHttpInfo(String contentListEntryIdentifier, String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(contentListEntryIdentifier, identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIApiResponseSingleId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete IPFS Universal Path Gateway Content List Entry (asynchronously)
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryAsync(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ApiCallback<CloudflareClientAPIApiResponseSingleId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(contentListEntryIdentifier, identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIApiResponseSingleId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for web3HostnameDeleteWeb3Hostname
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameDeleteWeb3HostnameCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameDeleteWeb3HostnameValidateBeforeCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameDeleteWeb3Hostname(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameDeleteWeb3Hostname(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameDeleteWeb3HostnameCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Web3 Hostname
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return CloudflareClientAPIApiResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIApiResponseSingleId web3HostnameDeleteWeb3Hostname(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<CloudflareClientAPIApiResponseSingleId> resp = web3HostnameDeleteWeb3HostnameWithHttpInfo(identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Delete Web3 Hostname
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIApiResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIApiResponseSingleId> web3HostnameDeleteWeb3HostnameWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameDeleteWeb3HostnameValidateBeforeCall(identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIApiResponseSingleId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Web3 Hostname (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameDeleteWeb3HostnameAsync(String identifier, String zoneIdentifier, final ApiCallback<CloudflareClientAPIApiResponseSingleId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameDeleteWeb3HostnameValidateBeforeCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIApiResponseSingleId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for web3HostnameEditIpfsUniversalPathGatewayContentListEntry
     * @param body  (required)
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameEditIpfsUniversalPathGatewayContentListEntryCall(ContentListEntryCreateRequest body, String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}"
            .replaceAll("\\{" + "content_list_entry_identifier" + "\\}", apiClient.escapeString(contentListEntryIdentifier.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameEditIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(ContentListEntryCreateRequest body, String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry(Async)");
        }
        // verify the required parameter 'contentListEntryIdentifier' is set
        if (contentListEntryIdentifier == null) {
            throw new ApiException("Missing the required parameter 'contentListEntryIdentifier' when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameEditIpfsUniversalPathGatewayContentListEntryCall(body, contentListEntryIdentifier, identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit IPFS Universal Path Gateway Content List Entry
     * 
     * @param body  (required)
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ContentListEntrySingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentListEntrySingleResponse web3HostnameEditIpfsUniversalPathGatewayContentListEntry(ContentListEntryCreateRequest body, String contentListEntryIdentifier, String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<ContentListEntrySingleResponse> resp = web3HostnameEditIpfsUniversalPathGatewayContentListEntryWithHttpInfo(body, contentListEntryIdentifier, identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Edit IPFS Universal Path Gateway Content List Entry
     * 
     * @param body  (required)
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ContentListEntrySingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentListEntrySingleResponse> web3HostnameEditIpfsUniversalPathGatewayContentListEntryWithHttpInfo(ContentListEntryCreateRequest body, String contentListEntryIdentifier, String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameEditIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(body, contentListEntryIdentifier, identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ContentListEntrySingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit IPFS Universal Path Gateway Content List Entry (asynchronously)
     * 
     * @param body  (required)
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameEditIpfsUniversalPathGatewayContentListEntryAsync(ContentListEntryCreateRequest body, String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ApiCallback<ContentListEntrySingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameEditIpfsUniversalPathGatewayContentListEntryValidateBeforeCall(body, contentListEntryIdentifier, identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentListEntrySingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for web3HostnameEditWeb3Hostname
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameEditWeb3HostnameCall(ModifyRequest body, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameEditWeb3HostnameValidateBeforeCall(ModifyRequest body, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling web3HostnameEditWeb3Hostname(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameEditWeb3Hostname(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameEditWeb3Hostname(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameEditWeb3HostnameCall(body, identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit Web3 Hostname
     * 
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return Web3HostnameComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Web3HostnameComponentsSchemasSingleResponse web3HostnameEditWeb3Hostname(ModifyRequest body, String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<Web3HostnameComponentsSchemasSingleResponse> resp = web3HostnameEditWeb3HostnameWithHttpInfo(body, identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Edit Web3 Hostname
     * 
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;Web3HostnameComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Web3HostnameComponentsSchemasSingleResponse> web3HostnameEditWeb3HostnameWithHttpInfo(ModifyRequest body, String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameEditWeb3HostnameValidateBeforeCall(body, identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Web3HostnameComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit Web3 Hostname (asynchronously)
     * 
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameEditWeb3HostnameAsync(ModifyRequest body, String identifier, String zoneIdentifier, final ApiCallback<Web3HostnameComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameEditWeb3HostnameValidateBeforeCall(body, identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Web3HostnameComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for web3HostnameIpfsUniversalPathGatewayContentListDetails
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameIpfsUniversalPathGatewayContentListDetailsCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameIpfsUniversalPathGatewayContentListDetailsValidateBeforeCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameIpfsUniversalPathGatewayContentListDetails(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameIpfsUniversalPathGatewayContentListDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameIpfsUniversalPathGatewayContentListDetailsCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * IPFS Universal Path Gateway Content List Details
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ContentListDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentListDetailsResponse web3HostnameIpfsUniversalPathGatewayContentListDetails(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<ContentListDetailsResponse> resp = web3HostnameIpfsUniversalPathGatewayContentListDetailsWithHttpInfo(identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * IPFS Universal Path Gateway Content List Details
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ContentListDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentListDetailsResponse> web3HostnameIpfsUniversalPathGatewayContentListDetailsWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameIpfsUniversalPathGatewayContentListDetailsValidateBeforeCall(identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ContentListDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * IPFS Universal Path Gateway Content List Details (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameIpfsUniversalPathGatewayContentListDetailsAsync(String identifier, String zoneIdentifier, final ApiCallback<ContentListDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameIpfsUniversalPathGatewayContentListDetailsValidateBeforeCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentListDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for web3HostnameIpfsUniversalPathGatewayContentListEntryDetails
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsCall(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}"
            .replaceAll("\\{" + "content_list_entry_identifier" + "\\}", apiClient.escapeString(contentListEntryIdentifier.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsValidateBeforeCall(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentListEntryIdentifier' is set
        if (contentListEntryIdentifier == null) {
            throw new ApiException("Missing the required parameter 'contentListEntryIdentifier' when calling web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsCall(contentListEntryIdentifier, identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * IPFS Universal Path Gateway Content List Entry Details
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ContentListEntrySingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentListEntrySingleResponse web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(String contentListEntryIdentifier, String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<ContentListEntrySingleResponse> resp = web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsWithHttpInfo(contentListEntryIdentifier, identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * IPFS Universal Path Gateway Content List Entry Details
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ContentListEntrySingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentListEntrySingleResponse> web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsWithHttpInfo(String contentListEntryIdentifier, String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsValidateBeforeCall(contentListEntryIdentifier, identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ContentListEntrySingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * IPFS Universal Path Gateway Content List Entry Details (asynchronously)
     * 
     * @param contentListEntryIdentifier  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsAsync(String contentListEntryIdentifier, String identifier, String zoneIdentifier, final ApiCallback<ContentListEntrySingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsValidateBeforeCall(contentListEntryIdentifier, identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentListEntrySingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for web3HostnameListIpfsUniversalPathGatewayContentListEntries
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameListIpfsUniversalPathGatewayContentListEntriesCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameListIpfsUniversalPathGatewayContentListEntriesValidateBeforeCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameListIpfsUniversalPathGatewayContentListEntries(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameListIpfsUniversalPathGatewayContentListEntries(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameListIpfsUniversalPathGatewayContentListEntriesCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List IPFS Universal Path Gateway Content List Entries
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ContentListEntryCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentListEntryCollectionResponse web3HostnameListIpfsUniversalPathGatewayContentListEntries(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<ContentListEntryCollectionResponse> resp = web3HostnameListIpfsUniversalPathGatewayContentListEntriesWithHttpInfo(identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * List IPFS Universal Path Gateway Content List Entries
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ContentListEntryCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentListEntryCollectionResponse> web3HostnameListIpfsUniversalPathGatewayContentListEntriesWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameListIpfsUniversalPathGatewayContentListEntriesValidateBeforeCall(identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ContentListEntryCollectionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List IPFS Universal Path Gateway Content List Entries (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameListIpfsUniversalPathGatewayContentListEntriesAsync(String identifier, String zoneIdentifier, final ApiCallback<ContentListEntryCollectionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameListIpfsUniversalPathGatewayContentListEntriesValidateBeforeCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentListEntryCollectionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for web3HostnameListWeb3Hostnames
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameListWeb3HostnamesCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameListWeb3HostnamesValidateBeforeCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameListWeb3Hostnames(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameListWeb3HostnamesCall(zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Web3 Hostnames
     * 
     * @param zoneIdentifier  (required)
     * @return ComponentsSchemasCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentsSchemasCollectionResponse web3HostnameListWeb3Hostnames(String zoneIdentifier) throws ApiException {
        ApiResponse<ComponentsSchemasCollectionResponse> resp = web3HostnameListWeb3HostnamesWithHttpInfo(zoneIdentifier);
        return resp.getData();
    }

    /**
     * List Web3 Hostnames
     * 
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ComponentsSchemasCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentsSchemasCollectionResponse> web3HostnameListWeb3HostnamesWithHttpInfo(String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameListWeb3HostnamesValidateBeforeCall(zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ComponentsSchemasCollectionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Web3 Hostnames (asynchronously)
     * 
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameListWeb3HostnamesAsync(String zoneIdentifier, final ApiCallback<ComponentsSchemasCollectionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameListWeb3HostnamesValidateBeforeCall(zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentsSchemasCollectionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for web3HostnameUpdateIpfsUniversalPathGatewayContentList
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameUpdateIpfsUniversalPathGatewayContentListCall(ContentListUpdateRequest body, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameUpdateIpfsUniversalPathGatewayContentListValidateBeforeCall(ContentListUpdateRequest body, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling web3HostnameUpdateIpfsUniversalPathGatewayContentList(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameUpdateIpfsUniversalPathGatewayContentList(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameUpdateIpfsUniversalPathGatewayContentList(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameUpdateIpfsUniversalPathGatewayContentListCall(body, identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update IPFS Universal Path Gateway Content List
     * 
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ContentListDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentListDetailsResponse web3HostnameUpdateIpfsUniversalPathGatewayContentList(ContentListUpdateRequest body, String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<ContentListDetailsResponse> resp = web3HostnameUpdateIpfsUniversalPathGatewayContentListWithHttpInfo(body, identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Update IPFS Universal Path Gateway Content List
     * 
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ContentListDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentListDetailsResponse> web3HostnameUpdateIpfsUniversalPathGatewayContentListWithHttpInfo(ContentListUpdateRequest body, String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameUpdateIpfsUniversalPathGatewayContentListValidateBeforeCall(body, identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ContentListDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update IPFS Universal Path Gateway Content List (asynchronously)
     * 
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameUpdateIpfsUniversalPathGatewayContentListAsync(ContentListUpdateRequest body, String identifier, String zoneIdentifier, final ApiCallback<ContentListDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameUpdateIpfsUniversalPathGatewayContentListValidateBeforeCall(body, identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentListDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for web3HostnameWeb3HostnameDetails
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call web3HostnameWeb3HostnameDetailsCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/web3/hostnames/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call web3HostnameWeb3HostnameDetailsValidateBeforeCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling web3HostnameWeb3HostnameDetails(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling web3HostnameWeb3HostnameDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = web3HostnameWeb3HostnameDetailsCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Web3 Hostname Details
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return Web3HostnameComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Web3HostnameComponentsSchemasSingleResponse web3HostnameWeb3HostnameDetails(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<Web3HostnameComponentsSchemasSingleResponse> resp = web3HostnameWeb3HostnameDetailsWithHttpInfo(identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Web3 Hostname Details
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;Web3HostnameComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Web3HostnameComponentsSchemasSingleResponse> web3HostnameWeb3HostnameDetailsWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = web3HostnameWeb3HostnameDetailsValidateBeforeCall(identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Web3HostnameComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Web3 Hostname Details (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call web3HostnameWeb3HostnameDetailsAsync(String identifier, String zoneIdentifier, final ApiCallback<Web3HostnameComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = web3HostnameWeb3HostnameDetailsValidateBeforeCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Web3HostnameComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
