/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse20039;
import io.swagger.client.model.InlineResponse20047;
import io.swagger.client.model.InlineResponse20048;
import io.swagger.client.model.InlineResponse20049;
import io.swagger.client.model.InlineResponse20050;
import io.swagger.client.model.InlineResponse20051;
import io.swagger.client.model.InlineResponse20052;
import io.swagger.client.model.InlineResponse20053;
import io.swagger.client.model.InlineResponse20054;
import io.swagger.client.model.InlineResponse20055;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarAttacksApi {
    private ApiClient apiClient;

    public RadarAttacksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarAttacksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for radarGetAttacksLayer3Summary
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer3SummaryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAttacksLayer3SummaryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAttacksLayer3SummaryCall(name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of layer 3 attacks
     * Percentage distribution of network protocols in layer 3/4 attacks.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20047
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20047 radarGetAttacksLayer3Summary(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        ApiResponse<InlineResponse20047> resp = radarGetAttacksLayer3SummaryWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, format);
        return resp.getData();
    }

    /**
     * Get a summary of layer 3 attacks
     * Percentage distribution of network protocols in layer 3/4 attacks.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20047&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20047> radarGetAttacksLayer3SummaryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAttacksLayer3SummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of layer 3 attacks (asynchronously)
     * Percentage distribution of network protocols in layer 3/4 attacks.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer3SummaryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ApiCallback<InlineResponse20047> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAttacksLayer3SummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20047>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetAttacksLayer3Timeseries
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param attack Array of L3/4 attack types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer3TimeseriesCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, String normalization, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/timeseries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (attack != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "attack", attack));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (normalization != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("normalization", normalization));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAttacksLayer3TimeseriesValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, String normalization, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAttacksLayer3TimeseriesCall(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, normalization, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get layer 3 attacks time series
     * Get layer 3/4 attacks change over time. Values are normalized using min-max by default, with the minimum set to 0. When asking for multiple time series, you can also get the percentual relative change of the 1st/main series, with respect to the 2nd/control series - for example, to get the relative change of this week from the previous week, the 1st series would have a date range of 7d, the 2nd, a date range of 7dControl, and the normalization would be set to PERCENTAGE_CHANGE.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param attack Array of L3/4 attack types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20048
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20048 radarGetAttacksLayer3Timeseries(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, String normalization, String format) throws ApiException {
        ApiResponse<InlineResponse20048> resp = radarGetAttacksLayer3TimeseriesWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, normalization, format);
        return resp.getData();
    }

    /**
     * Get layer 3 attacks time series
     * Get layer 3/4 attacks change over time. Values are normalized using min-max by default, with the minimum set to 0. When asking for multiple time series, you can also get the percentual relative change of the 1st/main series, with respect to the 2nd/control series - for example, to get the relative change of this week from the previous week, the 1st series would have a date range of 7d, the 2nd, a date range of 7dControl, and the normalization would be set to PERCENTAGE_CHANGE.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param attack Array of L3/4 attack types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20048&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20048> radarGetAttacksLayer3TimeseriesWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, String normalization, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAttacksLayer3TimeseriesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, normalization, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20048>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get layer 3 attacks time series (asynchronously)
     * Get layer 3/4 attacks change over time. Values are normalized using min-max by default, with the minimum set to 0. When asking for multiple time series, you can also get the percentual relative change of the 1st/main series, with respect to the 2nd/control series - for example, to get the relative change of this week from the previous week, the 1st series would have a date range of 7d, the 2nd, a date range of 7dControl, and the normalization would be set to PERCENTAGE_CHANGE.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param attack Array of L3/4 attack types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer3TimeseriesAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, String normalization, String format, final ApiCallback<InlineResponse20048> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAttacksLayer3TimeseriesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, normalization, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20048>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetAttacksLayer3TimeseriesGroups
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer3TimeseriesGroupsCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/attacks/layer3/timeseries_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAttacksLayer3TimeseriesGroupsValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAttacksLayer3TimeseriesGroupsCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get layer 3 attacks by network protocol, over time
     * Get percentage of what type of network protocols are used in layer 3/4 attacks, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20049
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20049 radarGetAttacksLayer3TimeseriesGroups(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        ApiResponse<InlineResponse20049> resp = radarGetAttacksLayer3TimeseriesGroupsWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, format);
        return resp.getData();
    }

    /**
     * Get layer 3 attacks by network protocol, over time
     * Get percentage of what type of network protocols are used in layer 3/4 attacks, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20049&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20049> radarGetAttacksLayer3TimeseriesGroupsWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAttacksLayer3TimeseriesGroupsValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20049>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get layer 3 attacks by network protocol, over time (asynchronously)
     * Get percentage of what type of network protocols are used in layer 3/4 attacks, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer3TimeseriesGroupsAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ApiCallback<InlineResponse20049> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAttacksLayer3TimeseriesGroupsValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20049>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetAttacksLayer7Summary
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7SummaryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAttacksLayer7SummaryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAttacksLayer7SummaryCall(name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of layer 7 attacks
     * Percentage distribution of mitigation techniques in layer 7 attacks.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20050
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20050 radarGetAttacksLayer7Summary(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        ApiResponse<InlineResponse20050> resp = radarGetAttacksLayer7SummaryWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, format);
        return resp.getData();
    }

    /**
     * Get a summary of layer 7 attacks
     * Percentage distribution of mitigation techniques in layer 7 attacks.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20050&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20050> radarGetAttacksLayer7SummaryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAttacksLayer7SummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20050>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of layer 7 attacks (asynchronously)
     * Percentage distribution of mitigation techniques in layer 7 attacks.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7SummaryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ApiCallback<InlineResponse20050> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAttacksLayer7SummaryValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20050>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetAttacksLayer7Timeseries
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param attack Array of L7 attack types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TimeseriesCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, String normalization, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/timeseries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (attack != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "attack", attack));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (normalization != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("normalization", normalization));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAttacksLayer7TimeseriesValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, String normalization, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TimeseriesCall(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, normalization, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get attacks layer 7 time series
     * Get layer 7 attacks change over time. Values are normalized using min-max by default, with the minimum set to 0. When asking for multiple time series, you can also get the percentage relative change of the first/main series, with respect to the second/control series - for example, to get the relative change of this week from the previous week, the first series would have a date range of &#x60;7d&#x60;, the second, a date range of &#x60;7dControl&#x60;, and the normalization would be set to &#x60;PERCENTAGE_CHANGE&#x60;.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param attack Array of L7 attack types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20039
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20039 radarGetAttacksLayer7Timeseries(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, String normalization, String format) throws ApiException {
        ApiResponse<InlineResponse20039> resp = radarGetAttacksLayer7TimeseriesWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, normalization, format);
        return resp.getData();
    }

    /**
     * Get attacks layer 7 time series
     * Get layer 7 attacks change over time. Values are normalized using min-max by default, with the minimum set to 0. When asking for multiple time series, you can also get the percentage relative change of the first/main series, with respect to the second/control series - for example, to get the relative change of this week from the previous week, the first series would have a date range of &#x60;7d&#x60;, the second, a date range of &#x60;7dControl&#x60;, and the normalization would be set to &#x60;PERCENTAGE_CHANGE&#x60;.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param attack Array of L7 attack types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20039&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20039> radarGetAttacksLayer7TimeseriesWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, String normalization, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TimeseriesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, normalization, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20039>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get attacks layer 7 time series (asynchronously)
     * Get layer 7 attacks change over time. Values are normalized using min-max by default, with the minimum set to 0. When asking for multiple time series, you can also get the percentage relative change of the first/main series, with respect to the second/control series - for example, to get the relative change of this week from the previous week, the first series would have a date range of &#x60;7d&#x60;, the second, a date range of &#x60;7dControl&#x60;, and the normalization would be set to &#x60;PERCENTAGE_CHANGE&#x60;.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param attack Array of L7 attack types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TimeseriesAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> attack, List<String> asn, List<String> location, String normalization, String format, final ApiCallback<InlineResponse20039> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAttacksLayer7TimeseriesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, normalization, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20039>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetAttacksLayer7TimeseriesGroups
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TimeseriesGroupsCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/timeseries_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAttacksLayer7TimeseriesGroupsValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TimeseriesGroupsCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get layer 7 attacks by mitigation technique, over time
     * Get percentage of what type of mitigation techniques are used to block layer 7 attacks, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20051
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20051 radarGetAttacksLayer7TimeseriesGroups(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        ApiResponse<InlineResponse20051> resp = radarGetAttacksLayer7TimeseriesGroupsWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, format);
        return resp.getData();
    }

    /**
     * Get layer 7 attacks by mitigation technique, over time
     * Get percentage of what type of mitigation techniques are used to block layer 7 attacks, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20051&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20051> radarGetAttacksLayer7TimeseriesGroupsWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TimeseriesGroupsValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20051>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get layer 7 attacks by mitigation technique, over time (asynchronously)
     * Get percentage of what type of mitigation techniques are used to block layer 7 attacks, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TimeseriesGroupsAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ApiCallback<InlineResponse20051> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAttacksLayer7TimeseriesGroupsValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20051>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetAttacksLayer7TopAttacks
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param magnitude Attack magnitude can be defined by total requests mitigated or by total zones attacked. (optional)
     * @param limitDirection Array of attack origin/target location attack limits. Together with &#x60;limitPerLocation&#x60;, limits how many objects will be fetched per origin/target location. (optional)
     * @param limitPerLocation Limit the number of attacks per origin/target (refer to &#x60;limitDirection&#x60; parameter) location. (optional, default to 10)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TopAttacksCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, String magnitude, String limitDirection, Integer limitPerLocation, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/top/attacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (magnitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("magnitude", magnitude));
        if (limitDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limitDirection", limitDirection));
        if (limitPerLocation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limitPerLocation", limitPerLocation));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAttacksLayer7TopAttacksValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, String magnitude, String limitDirection, Integer limitPerLocation, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopAttacksCall(limit, name, dateRange, dateStart, dateEnd, location, magnitude, limitDirection, limitPerLocation, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get layer 7 top attack pairs (origin and target locations)
     * Get the top attacks from origin to target location. Values are a percentage out of the total layer 7 attacks (with billing country). The attack magnitude can be defined by the number of mitigated requests or by the number of zones affected. You can optionally limit the number of attacks per origin/target location (useful if all the top attacks are from or to the same location).
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param magnitude Attack magnitude can be defined by total requests mitigated or by total zones attacked. (optional)
     * @param limitDirection Array of attack origin/target location attack limits. Together with &#x60;limitPerLocation&#x60;, limits how many objects will be fetched per origin/target location. (optional)
     * @param limitPerLocation Limit the number of attacks per origin/target (refer to &#x60;limitDirection&#x60; parameter) location. (optional, default to 10)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20053
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20053 radarGetAttacksLayer7TopAttacks(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, String magnitude, String limitDirection, Integer limitPerLocation, String format) throws ApiException {
        ApiResponse<InlineResponse20053> resp = radarGetAttacksLayer7TopAttacksWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, location, magnitude, limitDirection, limitPerLocation, format);
        return resp.getData();
    }

    /**
     * Get layer 7 top attack pairs (origin and target locations)
     * Get the top attacks from origin to target location. Values are a percentage out of the total layer 7 attacks (with billing country). The attack magnitude can be defined by the number of mitigated requests or by the number of zones affected. You can optionally limit the number of attacks per origin/target location (useful if all the top attacks are from or to the same location).
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param magnitude Attack magnitude can be defined by total requests mitigated or by total zones attacked. (optional)
     * @param limitDirection Array of attack origin/target location attack limits. Together with &#x60;limitPerLocation&#x60;, limits how many objects will be fetched per origin/target location. (optional)
     * @param limitPerLocation Limit the number of attacks per origin/target (refer to &#x60;limitDirection&#x60; parameter) location. (optional, default to 10)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20053&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20053> radarGetAttacksLayer7TopAttacksWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, String magnitude, String limitDirection, Integer limitPerLocation, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopAttacksValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, magnitude, limitDirection, limitPerLocation, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20053>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get layer 7 top attack pairs (origin and target locations) (asynchronously)
     * Get the top attacks from origin to target location. Values are a percentage out of the total layer 7 attacks (with billing country). The attack magnitude can be defined by the number of mitigated requests or by the number of zones affected. You can optionally limit the number of attacks per origin/target location (useful if all the top attacks are from or to the same location).
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param magnitude Attack magnitude can be defined by total requests mitigated or by total zones attacked. (optional)
     * @param limitDirection Array of attack origin/target location attack limits. Together with &#x60;limitPerLocation&#x60;, limits how many objects will be fetched per origin/target location. (optional)
     * @param limitPerLocation Limit the number of attacks per origin/target (refer to &#x60;limitDirection&#x60; parameter) location. (optional, default to 10)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TopAttacksAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, String magnitude, String limitDirection, Integer limitPerLocation, String format, final ApiCallback<InlineResponse20053> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopAttacksValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, magnitude, limitDirection, limitPerLocation, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20053>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetAttacksLayer7TopOriginASes
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param location Array of locations (alpha-2 country codes). (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TopOriginASesCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/top/ases/origin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAttacksLayer7TopOriginASesValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopOriginASesCall(limit, name, dateRange, dateStart, dateEnd, location, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get layer 7 top origin ASes
     * Get the top origin ASes by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin location is determined by the client IP.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param location Array of locations (alpha-2 country codes). (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20052
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20052 radarGetAttacksLayer7TopOriginASes(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, String format) throws ApiException {
        ApiResponse<InlineResponse20052> resp = radarGetAttacksLayer7TopOriginASesWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, location, format);
        return resp.getData();
    }

    /**
     * Get layer 7 top origin ASes
     * Get the top origin ASes by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin location is determined by the client IP.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param location Array of locations (alpha-2 country codes). (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20052&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20052> radarGetAttacksLayer7TopOriginASesWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopOriginASesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20052>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get layer 7 top origin ASes (asynchronously)
     * Get the top origin ASes by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin location is determined by the client IP.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param location Array of locations (alpha-2 country codes). (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TopOriginASesAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> location, String format, final ApiCallback<InlineResponse20052> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopOriginASesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, location, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20052>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetAttacksLayer7TopOriginLocations
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TopOriginLocationsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/top/locations/origin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAttacksLayer7TopOriginLocationsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopOriginLocationsCall(limit, name, dateRange, dateStart, dateEnd, asn, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get layer 7 top origin locations
     * Get the top origin locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin location is determined by the client IP.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20054
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20054 radarGetAttacksLayer7TopOriginLocations(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, String format) throws ApiException {
        ApiResponse<InlineResponse20054> resp = radarGetAttacksLayer7TopOriginLocationsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, format);
        return resp.getData();
    }

    /**
     * Get layer 7 top origin locations
     * Get the top origin locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin location is determined by the client IP.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20054&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20054> radarGetAttacksLayer7TopOriginLocationsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopOriginLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20054>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get layer 7 top origin locations (asynchronously)
     * Get the top origin locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin location is determined by the client IP.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TopOriginLocationsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, String format, final ApiCallback<InlineResponse20054> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopOriginLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20054>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetAttacksLayer7TopTargetLocations
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TopTargetLocationsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/attacks/layer7/top/locations/target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAttacksLayer7TopTargetLocationsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopTargetLocationsCall(limit, name, dateRange, dateStart, dateEnd, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get layer 7 top target locations
     * Get the top target locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The target location is determined by the attacked zone&#x27;s billing country, when available.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20055
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20055 radarGetAttacksLayer7TopTargetLocations(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, String format) throws ApiException {
        ApiResponse<InlineResponse20055> resp = radarGetAttacksLayer7TopTargetLocationsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, format);
        return resp.getData();
    }

    /**
     * Get layer 7 top target locations
     * Get the top target locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The target location is determined by the attacked zone&#x27;s billing country, when available.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20055&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20055> radarGetAttacksLayer7TopTargetLocationsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopTargetLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20055>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get layer 7 top target locations (asynchronously)
     * Get the top target locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The target location is determined by the attacked zone&#x27;s billing country, when available.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAttacksLayer7TopTargetLocationsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, String format, final ApiCallback<InlineResponse20055> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAttacksLayer7TopTargetLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20055>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
