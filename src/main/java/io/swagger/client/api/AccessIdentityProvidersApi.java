/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccessIdentityProvidersBody;
import io.swagger.client.model.CloudflareClientAPIIdentityProvidersComponentsSchemasResponseCollection;
import io.swagger.client.model.CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse;
import io.swagger.client.model.IdentityProvidersComponentsSchemasIdentifier;
import io.swagger.client.model.IdentityProvidersUuidBody;
import io.swagger.client.model.InlineResponse4xx219;
import io.swagger.client.model.InlineResponse4xx220;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessIdentityProvidersApi {
    private ApiClient apiClient;

    public AccessIdentityProvidersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessIdentityProvidersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for accessIdentityProvidersAddAnAccessIdentityProvider
     * @param body  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accessIdentityProvidersAddAnAccessIdentityProviderCall(AccessIdentityProvidersBody body, IdentityProvidersComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/identity_providers"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accessIdentityProvidersAddAnAccessIdentityProviderValidateBeforeCall(AccessIdentityProvidersBody body, IdentityProvidersComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accessIdentityProvidersAddAnAccessIdentityProvider(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessIdentityProvidersAddAnAccessIdentityProvider(Async)");
        }
        
        com.squareup.okhttp.Call call = accessIdentityProvidersAddAnAccessIdentityProviderCall(body, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add an Access identity provider
     * Adds a new identity provider to Access.
     * @param body  (required)
     * @param identifier  (required)
     * @return CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse accessIdentityProvidersAddAnAccessIdentityProvider(AccessIdentityProvidersBody body, IdentityProvidersComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> resp = accessIdentityProvidersAddAnAccessIdentityProviderWithHttpInfo(body, identifier);
        return resp.getData();
    }

    /**
     * Add an Access identity provider
     * Adds a new identity provider to Access.
     * @param body  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> accessIdentityProvidersAddAnAccessIdentityProviderWithHttpInfo(AccessIdentityProvidersBody body, IdentityProvidersComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = accessIdentityProvidersAddAnAccessIdentityProviderValidateBeforeCall(body, identifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an Access identity provider (asynchronously)
     * Adds a new identity provider to Access.
     * @param body  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accessIdentityProvidersAddAnAccessIdentityProviderAsync(AccessIdentityProvidersBody body, IdentityProvidersComponentsSchemasIdentifier identifier, final ApiCallback<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accessIdentityProvidersAddAnAccessIdentityProviderValidateBeforeCall(body, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accessIdentityProvidersDeleteAnAccessIdentityProvider
     * @param uuid  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accessIdentityProvidersDeleteAnAccessIdentityProviderCall(String uuid, IdentityProvidersComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/identity_providers/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accessIdentityProvidersDeleteAnAccessIdentityProviderValidateBeforeCall(String uuid, IdentityProvidersComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessIdentityProvidersDeleteAnAccessIdentityProvider(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessIdentityProvidersDeleteAnAccessIdentityProvider(Async)");
        }
        
        com.squareup.okhttp.Call call = accessIdentityProvidersDeleteAnAccessIdentityProviderCall(uuid, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Access identity provider
     * Deletes an identity provider from Access.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse accessIdentityProvidersDeleteAnAccessIdentityProvider(String uuid, IdentityProvidersComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> resp = accessIdentityProvidersDeleteAnAccessIdentityProviderWithHttpInfo(uuid, identifier);
        return resp.getData();
    }

    /**
     * Delete an Access identity provider
     * Deletes an identity provider from Access.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> accessIdentityProvidersDeleteAnAccessIdentityProviderWithHttpInfo(String uuid, IdentityProvidersComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = accessIdentityProvidersDeleteAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an Access identity provider (asynchronously)
     * Deletes an identity provider from Access.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accessIdentityProvidersDeleteAnAccessIdentityProviderAsync(String uuid, IdentityProvidersComponentsSchemasIdentifier identifier, final ApiCallback<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accessIdentityProvidersDeleteAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accessIdentityProvidersGetAnAccessIdentityProvider
     * @param uuid  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accessIdentityProvidersGetAnAccessIdentityProviderCall(String uuid, IdentityProvidersComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/identity_providers/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accessIdentityProvidersGetAnAccessIdentityProviderValidateBeforeCall(String uuid, IdentityProvidersComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessIdentityProvidersGetAnAccessIdentityProvider(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessIdentityProvidersGetAnAccessIdentityProvider(Async)");
        }
        
        com.squareup.okhttp.Call call = accessIdentityProvidersGetAnAccessIdentityProviderCall(uuid, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an Access identity provider
     * Fetches a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse accessIdentityProvidersGetAnAccessIdentityProvider(String uuid, IdentityProvidersComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> resp = accessIdentityProvidersGetAnAccessIdentityProviderWithHttpInfo(uuid, identifier);
        return resp.getData();
    }

    /**
     * Get an Access identity provider
     * Fetches a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> accessIdentityProvidersGetAnAccessIdentityProviderWithHttpInfo(String uuid, IdentityProvidersComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = accessIdentityProvidersGetAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Access identity provider (asynchronously)
     * Fetches a configured identity provider.
     * @param uuid  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accessIdentityProvidersGetAnAccessIdentityProviderAsync(String uuid, IdentityProvidersComponentsSchemasIdentifier identifier, final ApiCallback<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accessIdentityProvidersGetAnAccessIdentityProviderValidateBeforeCall(uuid, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accessIdentityProvidersListAccessIdentityProviders
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accessIdentityProvidersListAccessIdentityProvidersCall(IdentityProvidersComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/identity_providers"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accessIdentityProvidersListAccessIdentityProvidersValidateBeforeCall(IdentityProvidersComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessIdentityProvidersListAccessIdentityProviders(Async)");
        }
        
        com.squareup.okhttp.Call call = accessIdentityProvidersListAccessIdentityProvidersCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Access identity providers
     * Lists all configured identity providers.
     * @param identifier  (required)
     * @return CloudflareClientAPIIdentityProvidersComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIIdentityProvidersComponentsSchemasResponseCollection accessIdentityProvidersListAccessIdentityProviders(IdentityProvidersComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<CloudflareClientAPIIdentityProvidersComponentsSchemasResponseCollection> resp = accessIdentityProvidersListAccessIdentityProvidersWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * List Access identity providers
     * Lists all configured identity providers.
     * @param identifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIIdentityProvidersComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIIdentityProvidersComponentsSchemasResponseCollection> accessIdentityProvidersListAccessIdentityProvidersWithHttpInfo(IdentityProvidersComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = accessIdentityProvidersListAccessIdentityProvidersValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIIdentityProvidersComponentsSchemasResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Access identity providers (asynchronously)
     * Lists all configured identity providers.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accessIdentityProvidersListAccessIdentityProvidersAsync(IdentityProvidersComponentsSchemasIdentifier identifier, final ApiCallback<CloudflareClientAPIIdentityProvidersComponentsSchemasResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accessIdentityProvidersListAccessIdentityProvidersValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIIdentityProvidersComponentsSchemasResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accessIdentityProvidersUpdateAnAccessIdentityProvider
     * @param body  (required)
     * @param uuid  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accessIdentityProvidersUpdateAnAccessIdentityProviderCall(IdentityProvidersUuidBody body, String uuid, IdentityProvidersComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/access/identity_providers/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accessIdentityProvidersUpdateAnAccessIdentityProviderValidateBeforeCall(IdentityProvidersUuidBody body, String uuid, IdentityProvidersComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accessIdentityProvidersUpdateAnAccessIdentityProvider(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling accessIdentityProvidersUpdateAnAccessIdentityProvider(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accessIdentityProvidersUpdateAnAccessIdentityProvider(Async)");
        }
        
        com.squareup.okhttp.Call call = accessIdentityProvidersUpdateAnAccessIdentityProviderCall(body, uuid, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Access identity provider
     * Updates a configured identity provider.
     * @param body  (required)
     * @param uuid  (required)
     * @param identifier  (required)
     * @return CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse accessIdentityProvidersUpdateAnAccessIdentityProvider(IdentityProvidersUuidBody body, String uuid, IdentityProvidersComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> resp = accessIdentityProvidersUpdateAnAccessIdentityProviderWithHttpInfo(body, uuid, identifier);
        return resp.getData();
    }

    /**
     * Update an Access identity provider
     * Updates a configured identity provider.
     * @param body  (required)
     * @param uuid  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> accessIdentityProvidersUpdateAnAccessIdentityProviderWithHttpInfo(IdentityProvidersUuidBody body, String uuid, IdentityProvidersComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = accessIdentityProvidersUpdateAnAccessIdentityProviderValidateBeforeCall(body, uuid, identifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Access identity provider (asynchronously)
     * Updates a configured identity provider.
     * @param body  (required)
     * @param uuid  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accessIdentityProvidersUpdateAnAccessIdentityProviderAsync(IdentityProvidersUuidBody body, String uuid, IdentityProvidersComponentsSchemasIdentifier identifier, final ApiCallback<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accessIdentityProvidersUpdateAnAccessIdentityProviderValidateBeforeCall(body, uuid, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIIdentityProvidersComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
