/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse20072;
import io.swagger.client.model.InlineResponse20073;
import io.swagger.client.model.InlineResponse20074;
import io.swagger.client.model.InlineResponse20075;
import io.swagger.client.model.InlineResponse20076;
import io.swagger.client.model.InlineResponse404;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarEntitiesApi {
    private ApiClient apiClient;

    public RadarEntitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarEntitiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for radarGetASNId
     * @param asn Autonomous System Number (ASN). (required)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetASNIdCall(Integer asn, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/entities/asns/{asn}"
            .replaceAll("\\{" + "asn" + "\\}", apiClient.escapeString(asn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetASNIdValidateBeforeCall(Integer asn, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'asn' is set
        if (asn == null) {
            throw new ApiException("Missing the required parameter 'asn' when calling radarGetASNId(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetASNIdCall(asn, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get autonomous system information by AS number
     * Get the requested autonomous system information. A confidence level below &#x60;5&#x60; indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this AS). Population estimates come from APNIC (refer to https://labs.apnic.net/?p&#x3D;526).
     * @param asn Autonomous System Number (ASN). (required)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20074
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20074 radarGetASNId(Integer asn, String format) throws ApiException {
        ApiResponse<InlineResponse20074> resp = radarGetASNIdWithHttpInfo(asn, format);
        return resp.getData();
    }

    /**
     * Get autonomous system information by AS number
     * Get the requested autonomous system information. A confidence level below &#x60;5&#x60; indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this AS). Population estimates come from APNIC (refer to https://labs.apnic.net/?p&#x3D;526).
     * @param asn Autonomous System Number (ASN). (required)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20074&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20074> radarGetASNIdWithHttpInfo(Integer asn, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetASNIdValidateBeforeCall(asn, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20074>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get autonomous system information by AS number (asynchronously)
     * Get the requested autonomous system information. A confidence level below &#x60;5&#x60; indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this AS). Population estimates come from APNIC (refer to https://labs.apnic.net/?p&#x3D;526).
     * @param asn Autonomous System Number (ASN). (required)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetASNIdAsync(Integer asn, String format, final ApiCallback<InlineResponse20074> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetASNIdValidateBeforeCall(asn, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20074>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetASNIp
     * @param ip IP address. (required)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetASNIpCall(String ip, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/entities/asns/ip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ip", ip));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetASNIpValidateBeforeCall(String ip, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling radarGetASNIp(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetASNIpCall(ip, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get autonomous system information by IP address
     * Get the requested autonomous system information based on IP address. Population estimates come from APNIC (refer to https://labs.apnic.net/?p&#x3D;526).
     * @param ip IP address. (required)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20073
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20073 radarGetASNIp(String ip, String format) throws ApiException {
        ApiResponse<InlineResponse20073> resp = radarGetASNIpWithHttpInfo(ip, format);
        return resp.getData();
    }

    /**
     * Get autonomous system information by IP address
     * Get the requested autonomous system information based on IP address. Population estimates come from APNIC (refer to https://labs.apnic.net/?p&#x3D;526).
     * @param ip IP address. (required)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20073&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20073> radarGetASNIpWithHttpInfo(String ip, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetASNIpValidateBeforeCall(ip, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20073>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get autonomous system information by IP address (asynchronously)
     * Get the requested autonomous system information based on IP address. Population estimates come from APNIC (refer to https://labs.apnic.net/?p&#x3D;526).
     * @param ip IP address. (required)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetASNIpAsync(String ip, String format, final ApiCallback<InlineResponse20073> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetASNIpValidateBeforeCall(ip, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20073>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetASNsList
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param asn Comma separated list of ASNs. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetASNsListCall(Integer limit, Integer offset, String asn, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/entities/asns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (asn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asn", asn));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetASNsListValidateBeforeCall(Integer limit, Integer offset, String asn, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetASNsListCall(limit, offset, asn, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get autonomous systems
     * Gets a list of autonomous systems (AS).
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param asn Comma separated list of ASNs. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20072
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20072 radarGetASNsList(Integer limit, Integer offset, String asn, String format) throws ApiException {
        ApiResponse<InlineResponse20072> resp = radarGetASNsListWithHttpInfo(limit, offset, asn, format);
        return resp.getData();
    }

    /**
     * Get autonomous systems
     * Gets a list of autonomous systems (AS).
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param asn Comma separated list of ASNs. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20072&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20072> radarGetASNsListWithHttpInfo(Integer limit, Integer offset, String asn, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetASNsListValidateBeforeCall(limit, offset, asn, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20072>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get autonomous systems (asynchronously)
     * Gets a list of autonomous systems (AS).
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param asn Comma separated list of ASNs. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetASNsListAsync(Integer limit, Integer offset, String asn, String format, final ApiCallback<InlineResponse20072> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetASNsListValidateBeforeCall(limit, offset, asn, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20072>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetLocationsList
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param location Comma separated list of locations. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetLocationsListCall(Integer limit, Integer offset, String location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/entities/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (location != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location", location));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetLocationsListValidateBeforeCall(Integer limit, Integer offset, String location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetLocationsListCall(limit, offset, location, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get locations
     * Get a list of locations.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param location Comma separated list of locations. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20075
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20075 radarGetLocationsList(Integer limit, Integer offset, String location, String format) throws ApiException {
        ApiResponse<InlineResponse20075> resp = radarGetLocationsListWithHttpInfo(limit, offset, location, format);
        return resp.getData();
    }

    /**
     * Get locations
     * Get a list of locations.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param location Comma separated list of locations. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20075&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20075> radarGetLocationsListWithHttpInfo(Integer limit, Integer offset, String location, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetLocationsListValidateBeforeCall(limit, offset, location, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20075>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get locations (asynchronously)
     * Get a list of locations.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param location Comma separated list of locations. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetLocationsListAsync(Integer limit, Integer offset, String location, String format, final ApiCallback<InlineResponse20075> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetLocationsListValidateBeforeCall(limit, offset, location, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20075>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetLocationsOne
     * @param location Alpha-2 country code. (required)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetLocationsOneCall(String location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/entities/locations/{location}"
            .replaceAll("\\{" + "location" + "\\}", apiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetLocationsOneValidateBeforeCall(String location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling radarGetLocationsOne(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetLocationsOneCall(location, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get location
     * Get the requested location information. A confidence level below &#x60;5&#x60; indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this location).
     * @param location Alpha-2 country code. (required)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20076
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20076 radarGetLocationsOne(String location, String format) throws ApiException {
        ApiResponse<InlineResponse20076> resp = radarGetLocationsOneWithHttpInfo(location, format);
        return resp.getData();
    }

    /**
     * Get location
     * Get the requested location information. A confidence level below &#x60;5&#x60; indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this location).
     * @param location Alpha-2 country code. (required)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20076&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20076> radarGetLocationsOneWithHttpInfo(String location, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetLocationsOneValidateBeforeCall(location, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20076>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get location (asynchronously)
     * Get the requested location information. A confidence level below &#x60;5&#x60; indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this location).
     * @param location Alpha-2 country code. (required)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetLocationsOneAsync(String location, String format, final ApiCallback<InlineResponse20076> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetLocationsOneValidateBeforeCall(location, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20076>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
