/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DestinationExistsBody1;
import io.swagger.client.model.DestinationExistsResponse;
import io.swagger.client.model.GetOwnershipResponse;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse4xx77;
import io.swagger.client.model.InlineResponse4xx78;
import io.swagger.client.model.InlineResponse4xx79;
import io.swagger.client.model.InlineResponse4xx80;
import io.swagger.client.model.InlineResponse4xx81;
import io.swagger.client.model.InlineResponse4xx82;
import io.swagger.client.model.InlineResponse4xx83;
import io.swagger.client.model.InlineResponse4xx84;
import io.swagger.client.model.JobsJobIdentifierBody1;
import io.swagger.client.model.LogpushFieldResponseCollection;
import io.swagger.client.model.LogpushJobResponseCollection;
import io.swagger.client.model.LogpushJobResponseSingle;
import io.swagger.client.model.LogpushJobsBody1;
import io.swagger.client.model.LogpushOwnershipBody1;
import io.swagger.client.model.OwnershipValidateBody1;
import io.swagger.client.model.ValidateOriginBody1;
import io.swagger.client.model.ValidateOwnershipResponse;
import io.swagger.client.model.ValidateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogpushJobsForAZoneApi {
    private ApiClient apiClient;

    public LogpushJobsForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogpushJobsForAZoneApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteZonesZoneIdentifierLogpushJobsJobIdentifier
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteZonesZoneIdentifierLogpushJobsJobIdentifierCall(String jobIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logpush/jobs/{job_identifier}"
            .replaceAll("\\{" + "job_identifier" + "\\}", apiClient.escapeString(jobIdentifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(String jobIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobIdentifier' is set
        if (jobIdentifier == null) {
            throw new ApiException("Missing the required parameter 'jobIdentifier' when calling deleteZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling deleteZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteZonesZoneIdentifierLogpushJobsJobIdentifierCall(jobIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Logpush job
     * Deletes a Logpush job.
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 deleteZonesZoneIdentifierLogpushJobsJobIdentifier(String jobIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<InlineResponse2004> resp = deleteZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(jobIdentifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Delete Logpush job
     * Deletes a Logpush job.
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> deleteZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(String jobIdentifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobIdentifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Logpush job (asynchronously)
     * Deletes a Logpush job.
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteZonesZoneIdentifierLogpushJobsJobIdentifierAsync(String jobIdentifier, String zoneIdentifier, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getZonesZoneIdentifierLogpushDatasetsDatasetFields
     * @param dataset  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getZonesZoneIdentifierLogpushDatasetsDatasetFieldsCall(String dataset, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logpush/datasets/{dataset}/fields"
            .replaceAll("\\{" + "dataset" + "\\}", apiClient.escapeString(dataset.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getZonesZoneIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(String dataset, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling getZonesZoneIdentifierLogpushDatasetsDatasetFields(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling getZonesZoneIdentifierLogpushDatasetsDatasetFields(Async)");
        }
        
        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushDatasetsDatasetFieldsCall(dataset, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List fields
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param dataset  (required)
     * @param zoneIdentifier  (required)
     * @return LogpushFieldResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushFieldResponseCollection getZonesZoneIdentifierLogpushDatasetsDatasetFields(String dataset, String zoneIdentifier) throws ApiException {
        ApiResponse<LogpushFieldResponseCollection> resp = getZonesZoneIdentifierLogpushDatasetsDatasetFieldsWithHttpInfo(dataset, zoneIdentifier);
        return resp.getData();
    }

    /**
     * List fields
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param dataset  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;LogpushFieldResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushFieldResponseCollection> getZonesZoneIdentifierLogpushDatasetsDatasetFieldsWithHttpInfo(String dataset, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(dataset, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushFieldResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List fields (asynchronously)
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param dataset  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getZonesZoneIdentifierLogpushDatasetsDatasetFieldsAsync(String dataset, String zoneIdentifier, final ApiCallback<LogpushFieldResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(dataset, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushFieldResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getZonesZoneIdentifierLogpushDatasetsDatasetJobs
     * @param dataset  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getZonesZoneIdentifierLogpushDatasetsDatasetJobsCall(String dataset, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logpush/datasets/{dataset}/jobs"
            .replaceAll("\\{" + "dataset" + "\\}", apiClient.escapeString(dataset.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getZonesZoneIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(String dataset, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling getZonesZoneIdentifierLogpushDatasetsDatasetJobs(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling getZonesZoneIdentifierLogpushDatasetsDatasetJobs(Async)");
        }
        
        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushDatasetsDatasetJobsCall(dataset, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Logpush jobs for a dataset
     * Lists Logpush jobs for a zone for a dataset.
     * @param dataset  (required)
     * @param zoneIdentifier  (required)
     * @return LogpushJobResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushJobResponseCollection getZonesZoneIdentifierLogpushDatasetsDatasetJobs(String dataset, String zoneIdentifier) throws ApiException {
        ApiResponse<LogpushJobResponseCollection> resp = getZonesZoneIdentifierLogpushDatasetsDatasetJobsWithHttpInfo(dataset, zoneIdentifier);
        return resp.getData();
    }

    /**
     * List Logpush jobs for a dataset
     * Lists Logpush jobs for a zone for a dataset.
     * @param dataset  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;LogpushJobResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushJobResponseCollection> getZonesZoneIdentifierLogpushDatasetsDatasetJobsWithHttpInfo(String dataset, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(dataset, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushJobResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Logpush jobs for a dataset (asynchronously)
     * Lists Logpush jobs for a zone for a dataset.
     * @param dataset  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getZonesZoneIdentifierLogpushDatasetsDatasetJobsAsync(String dataset, String zoneIdentifier, final ApiCallback<LogpushJobResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(dataset, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushJobResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getZonesZoneIdentifierLogpushJobs
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getZonesZoneIdentifierLogpushJobsCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logpush/jobs"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getZonesZoneIdentifierLogpushJobsValidateBeforeCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling getZonesZoneIdentifierLogpushJobs(Async)");
        }
        
        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushJobsCall(zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Logpush jobs
     * Lists Logpush jobs for a zone.
     * @param zoneIdentifier  (required)
     * @return LogpushJobResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushJobResponseCollection getZonesZoneIdentifierLogpushJobs(String zoneIdentifier) throws ApiException {
        ApiResponse<LogpushJobResponseCollection> resp = getZonesZoneIdentifierLogpushJobsWithHttpInfo(zoneIdentifier);
        return resp.getData();
    }

    /**
     * List Logpush jobs
     * Lists Logpush jobs for a zone.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;LogpushJobResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushJobResponseCollection> getZonesZoneIdentifierLogpushJobsWithHttpInfo(String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushJobsValidateBeforeCall(zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushJobResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Logpush jobs (asynchronously)
     * Lists Logpush jobs for a zone.
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getZonesZoneIdentifierLogpushJobsAsync(String zoneIdentifier, final ApiCallback<LogpushJobResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushJobsValidateBeforeCall(zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushJobResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getZonesZoneIdentifierLogpushJobsJobIdentifier
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getZonesZoneIdentifierLogpushJobsJobIdentifierCall(String jobIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logpush/jobs/{job_identifier}"
            .replaceAll("\\{" + "job_identifier" + "\\}", apiClient.escapeString(jobIdentifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(String jobIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobIdentifier' is set
        if (jobIdentifier == null) {
            throw new ApiException("Missing the required parameter 'jobIdentifier' when calling getZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling getZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }
        
        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushJobsJobIdentifierCall(jobIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Logpush job details
     * Gets the details of a Logpush job.
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return LogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushJobResponseSingle getZonesZoneIdentifierLogpushJobsJobIdentifier(String jobIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<LogpushJobResponseSingle> resp = getZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(jobIdentifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Get Logpush job details
     * Gets the details of a Logpush job.
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;LogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushJobResponseSingle> getZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(String jobIdentifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobIdentifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Logpush job details (asynchronously)
     * Gets the details of a Logpush job.
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getZonesZoneIdentifierLogpushJobsJobIdentifierAsync(String jobIdentifier, String zoneIdentifier, final ApiCallback<LogpushJobResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postZonesZoneIdentifierLogpushJobs
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postZonesZoneIdentifierLogpushJobsCall(LogpushJobsBody1 body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logpush/jobs"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postZonesZoneIdentifierLogpushJobsValidateBeforeCall(LogpushJobsBody1 body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postZonesZoneIdentifierLogpushJobs(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling postZonesZoneIdentifierLogpushJobs(Async)");
        }
        
        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushJobsCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Logpush job
     * Creates a new Logpush job for a zone.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return LogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushJobResponseSingle postZonesZoneIdentifierLogpushJobs(LogpushJobsBody1 body, String zoneIdentifier) throws ApiException {
        ApiResponse<LogpushJobResponseSingle> resp = postZonesZoneIdentifierLogpushJobsWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Create Logpush job
     * Creates a new Logpush job for a zone.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;LogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushJobResponseSingle> postZonesZoneIdentifierLogpushJobsWithHttpInfo(LogpushJobsBody1 body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushJobsValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Logpush job (asynchronously)
     * Creates a new Logpush job for a zone.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postZonesZoneIdentifierLogpushJobsAsync(LogpushJobsBody1 body, String zoneIdentifier, final ApiCallback<LogpushJobResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushJobsValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postZonesZoneIdentifierLogpushOwnership
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postZonesZoneIdentifierLogpushOwnershipCall(LogpushOwnershipBody1 body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logpush/ownership"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postZonesZoneIdentifierLogpushOwnershipValidateBeforeCall(LogpushOwnershipBody1 body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postZonesZoneIdentifierLogpushOwnership(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling postZonesZoneIdentifierLogpushOwnership(Async)");
        }
        
        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushOwnershipCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get ownership challenge
     * Gets a new ownership challenge sent to your destination.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return GetOwnershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetOwnershipResponse postZonesZoneIdentifierLogpushOwnership(LogpushOwnershipBody1 body, String zoneIdentifier) throws ApiException {
        ApiResponse<GetOwnershipResponse> resp = postZonesZoneIdentifierLogpushOwnershipWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Get ownership challenge
     * Gets a new ownership challenge sent to your destination.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;GetOwnershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetOwnershipResponse> postZonesZoneIdentifierLogpushOwnershipWithHttpInfo(LogpushOwnershipBody1 body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushOwnershipValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<GetOwnershipResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get ownership challenge (asynchronously)
     * Gets a new ownership challenge sent to your destination.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postZonesZoneIdentifierLogpushOwnershipAsync(LogpushOwnershipBody1 body, String zoneIdentifier, final ApiCallback<GetOwnershipResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushOwnershipValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOwnershipResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postZonesZoneIdentifierLogpushOwnershipValidate
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postZonesZoneIdentifierLogpushOwnershipValidateCall(OwnershipValidateBody1 body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logpush/ownership/validate"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postZonesZoneIdentifierLogpushOwnershipValidateValidateBeforeCall(OwnershipValidateBody1 body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postZonesZoneIdentifierLogpushOwnershipValidate(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling postZonesZoneIdentifierLogpushOwnershipValidate(Async)");
        }
        
        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushOwnershipValidateCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Validate ownership challenge
     * Validates ownership challenge of the destination.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ValidateOwnershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidateOwnershipResponse postZonesZoneIdentifierLogpushOwnershipValidate(OwnershipValidateBody1 body, String zoneIdentifier) throws ApiException {
        ApiResponse<ValidateOwnershipResponse> resp = postZonesZoneIdentifierLogpushOwnershipValidateWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Validate ownership challenge
     * Validates ownership challenge of the destination.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ValidateOwnershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidateOwnershipResponse> postZonesZoneIdentifierLogpushOwnershipValidateWithHttpInfo(OwnershipValidateBody1 body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushOwnershipValidateValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ValidateOwnershipResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate ownership challenge (asynchronously)
     * Validates ownership challenge of the destination.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postZonesZoneIdentifierLogpushOwnershipValidateAsync(OwnershipValidateBody1 body, String zoneIdentifier, final ApiCallback<ValidateOwnershipResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushOwnershipValidateValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidateOwnershipResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postZonesZoneIdentifierLogpushValidateDestinationExists
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postZonesZoneIdentifierLogpushValidateDestinationExistsCall(DestinationExistsBody1 body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logpush/validate/destination/exists"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postZonesZoneIdentifierLogpushValidateDestinationExistsValidateBeforeCall(DestinationExistsBody1 body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postZonesZoneIdentifierLogpushValidateDestinationExists(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling postZonesZoneIdentifierLogpushValidateDestinationExists(Async)");
        }
        
        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushValidateDestinationExistsCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check destination exists
     * Checks if there is an existing job with a destination.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return DestinationExistsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DestinationExistsResponse postZonesZoneIdentifierLogpushValidateDestinationExists(DestinationExistsBody1 body, String zoneIdentifier) throws ApiException {
        ApiResponse<DestinationExistsResponse> resp = postZonesZoneIdentifierLogpushValidateDestinationExistsWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Check destination exists
     * Checks if there is an existing job with a destination.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;DestinationExistsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DestinationExistsResponse> postZonesZoneIdentifierLogpushValidateDestinationExistsWithHttpInfo(DestinationExistsBody1 body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushValidateDestinationExistsValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<DestinationExistsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check destination exists (asynchronously)
     * Checks if there is an existing job with a destination.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postZonesZoneIdentifierLogpushValidateDestinationExistsAsync(DestinationExistsBody1 body, String zoneIdentifier, final ApiCallback<DestinationExistsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushValidateDestinationExistsValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DestinationExistsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postZonesZoneIdentifierLogpushValidateOrigin
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postZonesZoneIdentifierLogpushValidateOriginCall(ValidateOriginBody1 body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logpush/validate/origin"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postZonesZoneIdentifierLogpushValidateOriginValidateBeforeCall(ValidateOriginBody1 body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postZonesZoneIdentifierLogpushValidateOrigin(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling postZonesZoneIdentifierLogpushValidateOrigin(Async)");
        }
        
        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushValidateOriginCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Validate origin
     * Validates logpull origin with logpull_options.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ValidateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidateResponse postZonesZoneIdentifierLogpushValidateOrigin(ValidateOriginBody1 body, String zoneIdentifier) throws ApiException {
        ApiResponse<ValidateResponse> resp = postZonesZoneIdentifierLogpushValidateOriginWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Validate origin
     * Validates logpull origin with logpull_options.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ValidateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidateResponse> postZonesZoneIdentifierLogpushValidateOriginWithHttpInfo(ValidateOriginBody1 body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushValidateOriginValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ValidateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate origin (asynchronously)
     * Validates logpull origin with logpull_options.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postZonesZoneIdentifierLogpushValidateOriginAsync(ValidateOriginBody1 body, String zoneIdentifier, final ApiCallback<ValidateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postZonesZoneIdentifierLogpushValidateOriginValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putZonesZoneIdentifierLogpushJobsJobIdentifier
     * @param body  (required)
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putZonesZoneIdentifierLogpushJobsJobIdentifierCall(JobsJobIdentifierBody1 body, String jobIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/logpush/jobs/{job_identifier}"
            .replaceAll("\\{" + "job_identifier" + "\\}", apiClient.escapeString(jobIdentifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(JobsJobIdentifierBody1 body, String jobIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }
        // verify the required parameter 'jobIdentifier' is set
        if (jobIdentifier == null) {
            throw new ApiException("Missing the required parameter 'jobIdentifier' when calling putZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling putZonesZoneIdentifierLogpushJobsJobIdentifier(Async)");
        }
        
        com.squareup.okhttp.Call call = putZonesZoneIdentifierLogpushJobsJobIdentifierCall(body, jobIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Logpush job
     * Updates a Logpush job.
     * @param body  (required)
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return LogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushJobResponseSingle putZonesZoneIdentifierLogpushJobsJobIdentifier(JobsJobIdentifierBody1 body, String jobIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<LogpushJobResponseSingle> resp = putZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(body, jobIdentifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Update Logpush job
     * Updates a Logpush job.
     * @param body  (required)
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;LogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushJobResponseSingle> putZonesZoneIdentifierLogpushJobsJobIdentifierWithHttpInfo(JobsJobIdentifierBody1 body, String jobIdentifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = putZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(body, jobIdentifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Logpush job (asynchronously)
     * Updates a Logpush job.
     * @param body  (required)
     * @param jobIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putZonesZoneIdentifierLogpushJobsJobIdentifierAsync(JobsJobIdentifierBody1 body, String jobIdentifier, String zoneIdentifier, final ApiCallback<LogpushJobResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putZonesZoneIdentifierLogpushJobsJobIdentifierValidateBeforeCall(body, jobIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
