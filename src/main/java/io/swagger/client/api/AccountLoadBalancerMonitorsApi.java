/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CloudflareClientAPIPreviewResponse;
import io.swagger.client.model.IdentifierPreviewBody;
import io.swagger.client.model.InlineResponse4xx63;
import io.swagger.client.model.InlineResponse4xx64;
import io.swagger.client.model.InlineResponse4xx65;
import io.swagger.client.model.InlineResponse4xx66;
import io.swagger.client.model.InlineResponse4xx67;
import io.swagger.client.model.InlineResponse4xx73;
import io.swagger.client.model.LoadBalancersMonitorsBody;
import io.swagger.client.model.MonitorComponentsSchemasIdResponse;
import io.swagger.client.model.MonitorComponentsSchemasIdentifier;
import io.swagger.client.model.MonitorComponentsSchemasResponseCollection2;
import io.swagger.client.model.MonitorComponentsSchemasSingleResponse2;
import io.swagger.client.model.MonitorsIdentifierBody;
import io.swagger.client.model.MonitorsIdentifierBody1;
import io.swagger.client.model.PreviewResultResponse;
import io.swagger.client.model.ReferencesResponse;
import io.swagger.client.model.SchemasPreviewId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountLoadBalancerMonitorsApi {
    private ApiClient apiClient;

    public AccountLoadBalancerMonitorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountLoadBalancerMonitorsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for accountLoadBalancerMonitorsCreateMonitor
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsCreateMonitorCall(LoadBalancersMonitorsBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/load_balancers/monitors"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountLoadBalancerMonitorsCreateMonitorValidateBeforeCall(LoadBalancersMonitorsBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountLoadBalancerMonitorsCreateMonitor(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountLoadBalancerMonitorsCreateMonitor(Async)");
        }
        
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsCreateMonitorCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Monitor
     * Create a configured monitor.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return MonitorComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitorComponentsSchemasSingleResponse2 accountLoadBalancerMonitorsCreateMonitor(LoadBalancersMonitorsBody body, String accountIdentifier) throws ApiException {
        ApiResponse<MonitorComponentsSchemasSingleResponse2> resp = accountLoadBalancerMonitorsCreateMonitorWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create Monitor
     * Create a configured monitor.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MonitorComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitorComponentsSchemasSingleResponse2> accountLoadBalancerMonitorsCreateMonitorWithHttpInfo(LoadBalancersMonitorsBody body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsCreateMonitorValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasSingleResponse2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Monitor (asynchronously)
     * Create a configured monitor.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsCreateMonitorAsync(LoadBalancersMonitorsBody body, String accountIdentifier, final ApiCallback<MonitorComponentsSchemasSingleResponse2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsCreateMonitorValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasSingleResponse2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountLoadBalancerMonitorsDeleteMonitor
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsDeleteMonitorCall(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/load_balancers/monitors/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountLoadBalancerMonitorsDeleteMonitorValidateBeforeCall(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accountLoadBalancerMonitorsDeleteMonitor(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountLoadBalancerMonitorsDeleteMonitor(Async)");
        }
        
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsDeleteMonitorCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Monitor
     * Delete a configured monitor.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return MonitorComponentsSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitorComponentsSchemasIdResponse accountLoadBalancerMonitorsDeleteMonitor(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        ApiResponse<MonitorComponentsSchemasIdResponse> resp = accountLoadBalancerMonitorsDeleteMonitorWithHttpInfo(identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete Monitor
     * Delete a configured monitor.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MonitorComponentsSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitorComponentsSchemasIdResponse> accountLoadBalancerMonitorsDeleteMonitorWithHttpInfo(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsDeleteMonitorValidateBeforeCall(identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Monitor (asynchronously)
     * Delete a configured monitor.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsDeleteMonitorAsync(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ApiCallback<MonitorComponentsSchemasIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsDeleteMonitorValidateBeforeCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountLoadBalancerMonitorsListMonitorReferences
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsListMonitorReferencesCall(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/load_balancers/monitors/{identifier}/references"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountLoadBalancerMonitorsListMonitorReferencesValidateBeforeCall(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accountLoadBalancerMonitorsListMonitorReferences(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountLoadBalancerMonitorsListMonitorReferences(Async)");
        }
        
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsListMonitorReferencesCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Monitor References
     * Get the list of resources that reference the provided monitor.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ReferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReferencesResponse accountLoadBalancerMonitorsListMonitorReferences(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        ApiResponse<ReferencesResponse> resp = accountLoadBalancerMonitorsListMonitorReferencesWithHttpInfo(identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * List Monitor References
     * Get the list of resources that reference the provided monitor.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ReferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReferencesResponse> accountLoadBalancerMonitorsListMonitorReferencesWithHttpInfo(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsListMonitorReferencesValidateBeforeCall(identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ReferencesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Monitor References (asynchronously)
     * Get the list of resources that reference the provided monitor.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsListMonitorReferencesAsync(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ApiCallback<ReferencesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsListMonitorReferencesValidateBeforeCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReferencesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountLoadBalancerMonitorsListMonitors
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsListMonitorsCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/load_balancers/monitors"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountLoadBalancerMonitorsListMonitorsValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountLoadBalancerMonitorsListMonitors(Async)");
        }
        
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsListMonitorsCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Monitors
     * List configured monitors for an account.
     * @param accountIdentifier  (required)
     * @return MonitorComponentsSchemasResponseCollection2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitorComponentsSchemasResponseCollection2 accountLoadBalancerMonitorsListMonitors(String accountIdentifier) throws ApiException {
        ApiResponse<MonitorComponentsSchemasResponseCollection2> resp = accountLoadBalancerMonitorsListMonitorsWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List Monitors
     * List configured monitors for an account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MonitorComponentsSchemasResponseCollection2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitorComponentsSchemasResponseCollection2> accountLoadBalancerMonitorsListMonitorsWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsListMonitorsValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasResponseCollection2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Monitors (asynchronously)
     * List configured monitors for an account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsListMonitorsAsync(String accountIdentifier, final ApiCallback<MonitorComponentsSchemasResponseCollection2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsListMonitorsValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasResponseCollection2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountLoadBalancerMonitorsMonitorDetails
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsMonitorDetailsCall(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/load_balancers/monitors/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountLoadBalancerMonitorsMonitorDetailsValidateBeforeCall(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accountLoadBalancerMonitorsMonitorDetails(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountLoadBalancerMonitorsMonitorDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsMonitorDetailsCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Monitor Details
     * List a single configured monitor for an account.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return MonitorComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitorComponentsSchemasSingleResponse2 accountLoadBalancerMonitorsMonitorDetails(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        ApiResponse<MonitorComponentsSchemasSingleResponse2> resp = accountLoadBalancerMonitorsMonitorDetailsWithHttpInfo(identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Monitor Details
     * List a single configured monitor for an account.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MonitorComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitorComponentsSchemasSingleResponse2> accountLoadBalancerMonitorsMonitorDetailsWithHttpInfo(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsMonitorDetailsValidateBeforeCall(identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasSingleResponse2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Monitor Details (asynchronously)
     * List a single configured monitor for an account.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsMonitorDetailsAsync(MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ApiCallback<MonitorComponentsSchemasSingleResponse2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsMonitorDetailsValidateBeforeCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasSingleResponse2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountLoadBalancerMonitorsPatchMonitor
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsPatchMonitorCall(MonitorsIdentifierBody1 body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/load_balancers/monitors/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountLoadBalancerMonitorsPatchMonitorValidateBeforeCall(MonitorsIdentifierBody1 body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountLoadBalancerMonitorsPatchMonitor(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accountLoadBalancerMonitorsPatchMonitor(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountLoadBalancerMonitorsPatchMonitor(Async)");
        }
        
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsPatchMonitorCall(body, identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Patch Monitor
     * Apply changes to an existing monitor, overwriting the supplied properties.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return MonitorComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitorComponentsSchemasSingleResponse2 accountLoadBalancerMonitorsPatchMonitor(MonitorsIdentifierBody1 body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        ApiResponse<MonitorComponentsSchemasSingleResponse2> resp = accountLoadBalancerMonitorsPatchMonitorWithHttpInfo(body, identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Patch Monitor
     * Apply changes to an existing monitor, overwriting the supplied properties.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MonitorComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitorComponentsSchemasSingleResponse2> accountLoadBalancerMonitorsPatchMonitorWithHttpInfo(MonitorsIdentifierBody1 body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsPatchMonitorValidateBeforeCall(body, identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasSingleResponse2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Patch Monitor (asynchronously)
     * Apply changes to an existing monitor, overwriting the supplied properties.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsPatchMonitorAsync(MonitorsIdentifierBody1 body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ApiCallback<MonitorComponentsSchemasSingleResponse2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsPatchMonitorValidateBeforeCall(body, identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasSingleResponse2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountLoadBalancerMonitorsPreviewMonitor
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsPreviewMonitorCall(IdentifierPreviewBody body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/load_balancers/monitors/{identifier}/preview"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountLoadBalancerMonitorsPreviewMonitorValidateBeforeCall(IdentifierPreviewBody body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountLoadBalancerMonitorsPreviewMonitor(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accountLoadBalancerMonitorsPreviewMonitor(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountLoadBalancerMonitorsPreviewMonitor(Async)");
        }
        
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsPreviewMonitorCall(body, identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Preview Monitor
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return CloudflareClientAPIPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIPreviewResponse accountLoadBalancerMonitorsPreviewMonitor(IdentifierPreviewBody body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        ApiResponse<CloudflareClientAPIPreviewResponse> resp = accountLoadBalancerMonitorsPreviewMonitorWithHttpInfo(body, identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Preview Monitor
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIPreviewResponse> accountLoadBalancerMonitorsPreviewMonitorWithHttpInfo(IdentifierPreviewBody body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsPreviewMonitorValidateBeforeCall(body, identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIPreviewResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Preview Monitor (asynchronously)
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsPreviewMonitorAsync(IdentifierPreviewBody body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ApiCallback<CloudflareClientAPIPreviewResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsPreviewMonitorValidateBeforeCall(body, identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIPreviewResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountLoadBalancerMonitorsPreviewResult
     * @param previewId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsPreviewResultCall(SchemasPreviewId previewId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/load_balancers/preview/{preview_id}"
            .replaceAll("\\{" + "preview_id" + "\\}", apiClient.escapeString(previewId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountLoadBalancerMonitorsPreviewResultValidateBeforeCall(SchemasPreviewId previewId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'previewId' is set
        if (previewId == null) {
            throw new ApiException("Missing the required parameter 'previewId' when calling accountLoadBalancerMonitorsPreviewResult(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountLoadBalancerMonitorsPreviewResult(Async)");
        }
        
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsPreviewResultCall(previewId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Preview Result
     * Get the result of a previous preview operation using the provided preview_id.
     * @param previewId  (required)
     * @param accountIdentifier  (required)
     * @return PreviewResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PreviewResultResponse accountLoadBalancerMonitorsPreviewResult(SchemasPreviewId previewId, String accountIdentifier) throws ApiException {
        ApiResponse<PreviewResultResponse> resp = accountLoadBalancerMonitorsPreviewResultWithHttpInfo(previewId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Preview Result
     * Get the result of a previous preview operation using the provided preview_id.
     * @param previewId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;PreviewResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PreviewResultResponse> accountLoadBalancerMonitorsPreviewResultWithHttpInfo(SchemasPreviewId previewId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsPreviewResultValidateBeforeCall(previewId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<PreviewResultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Preview Result (asynchronously)
     * Get the result of a previous preview operation using the provided preview_id.
     * @param previewId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsPreviewResultAsync(SchemasPreviewId previewId, String accountIdentifier, final ApiCallback<PreviewResultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsPreviewResultValidateBeforeCall(previewId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PreviewResultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountLoadBalancerMonitorsUpdateMonitor
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsUpdateMonitorCall(MonitorsIdentifierBody body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/load_balancers/monitors/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountLoadBalancerMonitorsUpdateMonitorValidateBeforeCall(MonitorsIdentifierBody body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountLoadBalancerMonitorsUpdateMonitor(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling accountLoadBalancerMonitorsUpdateMonitor(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling accountLoadBalancerMonitorsUpdateMonitor(Async)");
        }
        
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsUpdateMonitorCall(body, identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Monitor
     * Modify a configured monitor.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return MonitorComponentsSchemasSingleResponse2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitorComponentsSchemasSingleResponse2 accountLoadBalancerMonitorsUpdateMonitor(MonitorsIdentifierBody body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        ApiResponse<MonitorComponentsSchemasSingleResponse2> resp = accountLoadBalancerMonitorsUpdateMonitorWithHttpInfo(body, identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update Monitor
     * Modify a configured monitor.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MonitorComponentsSchemasSingleResponse2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitorComponentsSchemasSingleResponse2> accountLoadBalancerMonitorsUpdateMonitorWithHttpInfo(MonitorsIdentifierBody body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsUpdateMonitorValidateBeforeCall(body, identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasSingleResponse2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Monitor (asynchronously)
     * Modify a configured monitor.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountLoadBalancerMonitorsUpdateMonitorAsync(MonitorsIdentifierBody body, MonitorComponentsSchemasIdentifier identifier, String accountIdentifier, final ApiCallback<MonitorComponentsSchemasSingleResponse2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountLoadBalancerMonitorsUpdateMonitorValidateBeforeCall(body, identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitorComponentsSchemasSingleResponse2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
