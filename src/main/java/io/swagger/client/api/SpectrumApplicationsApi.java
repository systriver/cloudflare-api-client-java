/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AppComponentsSchemasResponseCollection;
import io.swagger.client.model.AppsAppIdBody;
import io.swagger.client.model.InlineResponse200178;
import io.swagger.client.model.InlineResponse4xx339;
import io.swagger.client.model.InlineResponse4xx519;
import io.swagger.client.model.InlineResponse4xx520;
import io.swagger.client.model.InlineResponse4xx521;
import io.swagger.client.model.ResponseSingleOriginDns;
import io.swagger.client.model.SchemasResponseSingle;
import io.swagger.client.model.SpectrumAppsBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpectrumApplicationsApi {
    private ApiClient apiClient;

    public SpectrumApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpectrumApplicationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOrigin
     * @param body  (required)
     * @param zone  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginCall(SpectrumAppsBody body, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone}/spectrum/apps"
            .replaceAll("\\{" + "zone" + "\\}", apiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginValidateBeforeCall(SpectrumAppsBody body, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOrigin(Async)");
        }
        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOrigin(Async)");
        }
        
        com.squareup.okhttp.Call call = spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginCall(body, zone, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Spectrum application using a name for the origin
     * Creates a new Spectrum application from a configuration using a name for the origin.
     * @param body  (required)
     * @param zone  (required)
     * @return ResponseSingleOriginDns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseSingleOriginDns spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOrigin(SpectrumAppsBody body, String zone) throws ApiException {
        ApiResponse<ResponseSingleOriginDns> resp = spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginWithHttpInfo(body, zone);
        return resp.getData();
    }

    /**
     * Create Spectrum application using a name for the origin
     * Creates a new Spectrum application from a configuration using a name for the origin.
     * @param body  (required)
     * @param zone  (required)
     * @return ApiResponse&lt;ResponseSingleOriginDns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseSingleOriginDns> spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginWithHttpInfo(SpectrumAppsBody body, String zone) throws ApiException {
        com.squareup.okhttp.Call call = spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginValidateBeforeCall(body, zone, null, null);
        Type localVarReturnType = new TypeToken<ResponseSingleOriginDns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Spectrum application using a name for the origin (asynchronously)
     * Creates a new Spectrum application from a configuration using a name for the origin.
     * @param body  (required)
     * @param zone  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginAsync(SpectrumAppsBody body, String zone, final ApiCallback<ResponseSingleOriginDns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spectrumApplicationsCreateSpectrumApplicationUsingANameForTheOriginValidateBeforeCall(body, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseSingleOriginDns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spectrumApplicationsDeleteSpectrumApplication
     * @param appId  (required)
     * @param zone  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spectrumApplicationsDeleteSpectrumApplicationCall(String appId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone}/spectrum/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "zone" + "\\}", apiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spectrumApplicationsDeleteSpectrumApplicationValidateBeforeCall(String appId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling spectrumApplicationsDeleteSpectrumApplication(Async)");
        }
        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling spectrumApplicationsDeleteSpectrumApplication(Async)");
        }
        
        com.squareup.okhttp.Call call = spectrumApplicationsDeleteSpectrumApplicationCall(appId, zone, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Spectrum application
     * Deletes a previously existing application.
     * @param appId  (required)
     * @param zone  (required)
     * @return InlineResponse200178
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200178 spectrumApplicationsDeleteSpectrumApplication(String appId, String zone) throws ApiException {
        ApiResponse<InlineResponse200178> resp = spectrumApplicationsDeleteSpectrumApplicationWithHttpInfo(appId, zone);
        return resp.getData();
    }

    /**
     * Delete Spectrum application
     * Deletes a previously existing application.
     * @param appId  (required)
     * @param zone  (required)
     * @return ApiResponse&lt;InlineResponse200178&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200178> spectrumApplicationsDeleteSpectrumApplicationWithHttpInfo(String appId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = spectrumApplicationsDeleteSpectrumApplicationValidateBeforeCall(appId, zone, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200178>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Spectrum application (asynchronously)
     * Deletes a previously existing application.
     * @param appId  (required)
     * @param zone  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spectrumApplicationsDeleteSpectrumApplicationAsync(String appId, String zone, final ApiCallback<InlineResponse200178> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spectrumApplicationsDeleteSpectrumApplicationValidateBeforeCall(appId, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200178>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spectrumApplicationsGetSpectrumApplicationConfiguration
     * @param appId  (required)
     * @param zone  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spectrumApplicationsGetSpectrumApplicationConfigurationCall(String appId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone}/spectrum/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "zone" + "\\}", apiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spectrumApplicationsGetSpectrumApplicationConfigurationValidateBeforeCall(String appId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling spectrumApplicationsGetSpectrumApplicationConfiguration(Async)");
        }
        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling spectrumApplicationsGetSpectrumApplicationConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = spectrumApplicationsGetSpectrumApplicationConfigurationCall(appId, zone, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Spectrum application configuration
     * Gets the application configuration of a specific application inside a zone.
     * @param appId  (required)
     * @param zone  (required)
     * @return SchemasResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasResponseSingle spectrumApplicationsGetSpectrumApplicationConfiguration(String appId, String zone) throws ApiException {
        ApiResponse<SchemasResponseSingle> resp = spectrumApplicationsGetSpectrumApplicationConfigurationWithHttpInfo(appId, zone);
        return resp.getData();
    }

    /**
     * Get Spectrum application configuration
     * Gets the application configuration of a specific application inside a zone.
     * @param appId  (required)
     * @param zone  (required)
     * @return ApiResponse&lt;SchemasResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasResponseSingle> spectrumApplicationsGetSpectrumApplicationConfigurationWithHttpInfo(String appId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = spectrumApplicationsGetSpectrumApplicationConfigurationValidateBeforeCall(appId, zone, null, null);
        Type localVarReturnType = new TypeToken<SchemasResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Spectrum application configuration (asynchronously)
     * Gets the application configuration of a specific application inside a zone.
     * @param appId  (required)
     * @param zone  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spectrumApplicationsGetSpectrumApplicationConfigurationAsync(String appId, String zone, final ApiCallback<SchemasResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spectrumApplicationsGetSpectrumApplicationConfigurationValidateBeforeCall(appId, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spectrumApplicationsListSpectrumApplications
     * @param zone  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spectrumApplicationsListSpectrumApplicationsCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone}/spectrum/apps"
            .replaceAll("\\{" + "zone" + "\\}", apiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spectrumApplicationsListSpectrumApplicationsValidateBeforeCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling spectrumApplicationsListSpectrumApplications(Async)");
        }
        
        com.squareup.okhttp.Call call = spectrumApplicationsListSpectrumApplicationsCall(zone, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Spectrum applications
     * Retrieves a list of currently existing Spectrum applications inside a zone.
     * @param zone  (required)
     * @return AppComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AppComponentsSchemasResponseCollection spectrumApplicationsListSpectrumApplications(String zone) throws ApiException {
        ApiResponse<AppComponentsSchemasResponseCollection> resp = spectrumApplicationsListSpectrumApplicationsWithHttpInfo(zone);
        return resp.getData();
    }

    /**
     * List Spectrum applications
     * Retrieves a list of currently existing Spectrum applications inside a zone.
     * @param zone  (required)
     * @return ApiResponse&lt;AppComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AppComponentsSchemasResponseCollection> spectrumApplicationsListSpectrumApplicationsWithHttpInfo(String zone) throws ApiException {
        com.squareup.okhttp.Call call = spectrumApplicationsListSpectrumApplicationsValidateBeforeCall(zone, null, null);
        Type localVarReturnType = new TypeToken<AppComponentsSchemasResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Spectrum applications (asynchronously)
     * Retrieves a list of currently existing Spectrum applications inside a zone.
     * @param zone  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spectrumApplicationsListSpectrumApplicationsAsync(String zone, final ApiCallback<AppComponentsSchemasResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spectrumApplicationsListSpectrumApplicationsValidateBeforeCall(zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AppComponentsSchemasResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOrigin
     * @param body  (required)
     * @param appId  (required)
     * @param zone  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginCall(AppsAppIdBody body, String appId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone}/spectrum/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "zone" + "\\}", apiClient.escapeString(zone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginValidateBeforeCall(AppsAppIdBody body, String appId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOrigin(Async)");
        }
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOrigin(Async)");
        }
        // verify the required parameter 'zone' is set
        if (zone == null) {
            throw new ApiException("Missing the required parameter 'zone' when calling spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOrigin(Async)");
        }
        
        com.squareup.okhttp.Call call = spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginCall(body, appId, zone, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Spectrum application configuration using a name for the origin
     * Updates a previously existing application&#x27;s configuration that uses a name for the origin.
     * @param body  (required)
     * @param appId  (required)
     * @param zone  (required)
     * @return ResponseSingleOriginDns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseSingleOriginDns spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOrigin(AppsAppIdBody body, String appId, String zone) throws ApiException {
        ApiResponse<ResponseSingleOriginDns> resp = spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginWithHttpInfo(body, appId, zone);
        return resp.getData();
    }

    /**
     * Update Spectrum application configuration using a name for the origin
     * Updates a previously existing application&#x27;s configuration that uses a name for the origin.
     * @param body  (required)
     * @param appId  (required)
     * @param zone  (required)
     * @return ApiResponse&lt;ResponseSingleOriginDns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseSingleOriginDns> spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginWithHttpInfo(AppsAppIdBody body, String appId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginValidateBeforeCall(body, appId, zone, null, null);
        Type localVarReturnType = new TypeToken<ResponseSingleOriginDns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Spectrum application configuration using a name for the origin (asynchronously)
     * Updates a previously existing application&#x27;s configuration that uses a name for the origin.
     * @param body  (required)
     * @param appId  (required)
     * @param zone  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginAsync(AppsAppIdBody body, String appId, String zone, final ApiCallback<ResponseSingleOriginDns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spectrumApplicationsUpdateSpectrumApplicationConfigurationUsingANameForTheOriginValidateBeforeCall(body, appId, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseSingleOriginDns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
