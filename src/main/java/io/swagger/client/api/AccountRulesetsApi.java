/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateRuleset;
import io.swagger.client.model.CreateUpdateRule;
import io.swagger.client.model.InlineResponse4xx196;
import io.swagger.client.model.InlineResponse4xx197;
import io.swagger.client.model.RulesetResponse;
import io.swagger.client.model.RulesetsResponse;
import io.swagger.client.model.UpdateRuleset;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountRulesetsApi {
    private ApiClient apiClient;

    public AccountRulesetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountRulesetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for accountRulesetsCreateAnAccountRuleset
     * @param body  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsCreateAnAccountRulesetCall(CreateRuleset body, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsCreateAnAccountRulesetValidateBeforeCall(CreateRuleset body, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountRulesetsCreateAnAccountRuleset(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsCreateAnAccountRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsCreateAnAccountRulesetCall(body, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an account ruleset
     * Creates a ruleset at the account level.
     * @param body  (required)
     * @param accountId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse accountRulesetsCreateAnAccountRuleset(CreateRuleset body, String accountId) throws ApiException {
        ApiResponse<RulesetResponse> resp = accountRulesetsCreateAnAccountRulesetWithHttpInfo(body, accountId);
        return resp.getData();
    }

    /**
     * Create an account ruleset
     * Creates a ruleset at the account level.
     * @param body  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> accountRulesetsCreateAnAccountRulesetWithHttpInfo(CreateRuleset body, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsCreateAnAccountRulesetValidateBeforeCall(body, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account ruleset (asynchronously)
     * Creates a ruleset at the account level.
     * @param body  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsCreateAnAccountRulesetAsync(CreateRuleset body, String accountId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsCreateAnAccountRulesetValidateBeforeCall(body, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsCreateAnAccountRulesetRule
     * @param body  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsCreateAnAccountRulesetRuleCall(CreateUpdateRule body, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/rules"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsCreateAnAccountRulesetRuleValidateBeforeCall(CreateUpdateRule body, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountRulesetsCreateAnAccountRulesetRule(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling accountRulesetsCreateAnAccountRulesetRule(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsCreateAnAccountRulesetRule(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsCreateAnAccountRulesetRuleCall(body, rulesetId, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an account ruleset rule
     * Adds a new rule to an account ruleset. The rule will be added to the end of the existing list of rules in the ruleset.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse accountRulesetsCreateAnAccountRulesetRule(CreateUpdateRule body, String rulesetId, String accountId) throws ApiException {
        ApiResponse<RulesetResponse> resp = accountRulesetsCreateAnAccountRulesetRuleWithHttpInfo(body, rulesetId, accountId);
        return resp.getData();
    }

    /**
     * Create an account ruleset rule
     * Adds a new rule to an account ruleset. The rule will be added to the end of the existing list of rules in the ruleset.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> accountRulesetsCreateAnAccountRulesetRuleWithHttpInfo(CreateUpdateRule body, String rulesetId, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsCreateAnAccountRulesetRuleValidateBeforeCall(body, rulesetId, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account ruleset rule (asynchronously)
     * Adds a new rule to an account ruleset. The rule will be added to the end of the existing list of rules in the ruleset.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsCreateAnAccountRulesetRuleAsync(CreateUpdateRule body, String rulesetId, String accountId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsCreateAnAccountRulesetRuleValidateBeforeCall(body, rulesetId, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsDeleteAnAccountRuleset
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsDeleteAnAccountRulesetCall(String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsDeleteAnAccountRulesetValidateBeforeCall(String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling accountRulesetsDeleteAnAccountRuleset(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsDeleteAnAccountRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsDeleteAnAccountRulesetCall(rulesetId, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an account ruleset
     * Deletes all versions of an existing account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void accountRulesetsDeleteAnAccountRuleset(String rulesetId, String accountId) throws ApiException {
        accountRulesetsDeleteAnAccountRulesetWithHttpInfo(rulesetId, accountId);
    }

    /**
     * Delete an account ruleset
     * Deletes all versions of an existing account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> accountRulesetsDeleteAnAccountRulesetWithHttpInfo(String rulesetId, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsDeleteAnAccountRulesetValidateBeforeCall(rulesetId, accountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account ruleset (asynchronously)
     * Deletes all versions of an existing account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsDeleteAnAccountRulesetAsync(String rulesetId, String accountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsDeleteAnAccountRulesetValidateBeforeCall(rulesetId, accountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsDeleteAnAccountRulesetRule
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsDeleteAnAccountRulesetRuleCall(String ruleId, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/rules/{rule_id}"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()))
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsDeleteAnAccountRulesetRuleValidateBeforeCall(String ruleId, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling accountRulesetsDeleteAnAccountRulesetRule(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling accountRulesetsDeleteAnAccountRulesetRule(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsDeleteAnAccountRulesetRule(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsDeleteAnAccountRulesetRuleCall(ruleId, rulesetId, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an account ruleset rule
     * Deletes an existing rule from an account ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse accountRulesetsDeleteAnAccountRulesetRule(String ruleId, String rulesetId, String accountId) throws ApiException {
        ApiResponse<RulesetResponse> resp = accountRulesetsDeleteAnAccountRulesetRuleWithHttpInfo(ruleId, rulesetId, accountId);
        return resp.getData();
    }

    /**
     * Delete an account ruleset rule
     * Deletes an existing rule from an account ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> accountRulesetsDeleteAnAccountRulesetRuleWithHttpInfo(String ruleId, String rulesetId, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsDeleteAnAccountRulesetRuleValidateBeforeCall(ruleId, rulesetId, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an account ruleset rule (asynchronously)
     * Deletes an existing rule from an account ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsDeleteAnAccountRulesetRuleAsync(String ruleId, String rulesetId, String accountId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsDeleteAnAccountRulesetRuleValidateBeforeCall(ruleId, rulesetId, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsDeleteAnAccountRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsDeleteAnAccountRulesetVersionCall(String rulesetVersion, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}"
            .replaceAll("\\{" + "ruleset_version" + "\\}", apiClient.escapeString(rulesetVersion.toString()))
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsDeleteAnAccountRulesetVersionValidateBeforeCall(String rulesetVersion, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling accountRulesetsDeleteAnAccountRulesetVersion(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling accountRulesetsDeleteAnAccountRulesetVersion(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsDeleteAnAccountRulesetVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsDeleteAnAccountRulesetVersionCall(rulesetVersion, rulesetId, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an account ruleset version
     * Deletes an existing version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void accountRulesetsDeleteAnAccountRulesetVersion(String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        accountRulesetsDeleteAnAccountRulesetVersionWithHttpInfo(rulesetVersion, rulesetId, accountId);
    }

    /**
     * Delete an account ruleset version
     * Deletes an existing version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> accountRulesetsDeleteAnAccountRulesetVersionWithHttpInfo(String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsDeleteAnAccountRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, accountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account ruleset version (asynchronously)
     * Deletes an existing version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsDeleteAnAccountRulesetVersionAsync(String rulesetVersion, String rulesetId, String accountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsDeleteAnAccountRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, accountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsGetAnAccountEntryPointRuleset
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsGetAnAccountEntryPointRulesetCall(String rulesetPhase, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint"
            .replaceAll("\\{" + "ruleset_phase" + "\\}", apiClient.escapeString(rulesetPhase.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsGetAnAccountEntryPointRulesetValidateBeforeCall(String rulesetPhase, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling accountRulesetsGetAnAccountEntryPointRuleset(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsGetAnAccountEntryPointRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountEntryPointRulesetCall(rulesetPhase, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an account entry point ruleset
     * Fetches the latest version of the account entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse accountRulesetsGetAnAccountEntryPointRuleset(String rulesetPhase, String accountId) throws ApiException {
        ApiResponse<RulesetResponse> resp = accountRulesetsGetAnAccountEntryPointRulesetWithHttpInfo(rulesetPhase, accountId);
        return resp.getData();
    }

    /**
     * Get an account entry point ruleset
     * Fetches the latest version of the account entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> accountRulesetsGetAnAccountEntryPointRulesetWithHttpInfo(String rulesetPhase, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountEntryPointRulesetValidateBeforeCall(rulesetPhase, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an account entry point ruleset (asynchronously)
     * Fetches the latest version of the account entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsGetAnAccountEntryPointRulesetAsync(String rulesetPhase, String accountId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountEntryPointRulesetValidateBeforeCall(rulesetPhase, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsGetAnAccountEntryPointRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsGetAnAccountEntryPointRulesetVersionCall(String rulesetVersion, String rulesetPhase, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions/{ruleset_version}"
            .replaceAll("\\{" + "ruleset_version" + "\\}", apiClient.escapeString(rulesetVersion.toString()))
            .replaceAll("\\{" + "ruleset_phase" + "\\}", apiClient.escapeString(rulesetPhase.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsGetAnAccountEntryPointRulesetVersionValidateBeforeCall(String rulesetVersion, String rulesetPhase, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling accountRulesetsGetAnAccountEntryPointRulesetVersion(Async)");
        }
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling accountRulesetsGetAnAccountEntryPointRulesetVersion(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsGetAnAccountEntryPointRulesetVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountEntryPointRulesetVersionCall(rulesetVersion, rulesetPhase, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an account entry point ruleset version
     * Fetches a specific version of an account entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse accountRulesetsGetAnAccountEntryPointRulesetVersion(String rulesetVersion, String rulesetPhase, String accountId) throws ApiException {
        ApiResponse<RulesetResponse> resp = accountRulesetsGetAnAccountEntryPointRulesetVersionWithHttpInfo(rulesetVersion, rulesetPhase, accountId);
        return resp.getData();
    }

    /**
     * Get an account entry point ruleset version
     * Fetches a specific version of an account entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> accountRulesetsGetAnAccountEntryPointRulesetVersionWithHttpInfo(String rulesetVersion, String rulesetPhase, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountEntryPointRulesetVersionValidateBeforeCall(rulesetVersion, rulesetPhase, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an account entry point ruleset version (asynchronously)
     * Fetches a specific version of an account entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsGetAnAccountEntryPointRulesetVersionAsync(String rulesetVersion, String rulesetPhase, String accountId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountEntryPointRulesetVersionValidateBeforeCall(rulesetVersion, rulesetPhase, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsGetAnAccountRuleset
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsGetAnAccountRulesetCall(String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsGetAnAccountRulesetValidateBeforeCall(String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling accountRulesetsGetAnAccountRuleset(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsGetAnAccountRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountRulesetCall(rulesetId, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an account ruleset
     * Fetches the latest version of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse accountRulesetsGetAnAccountRuleset(String rulesetId, String accountId) throws ApiException {
        ApiResponse<RulesetResponse> resp = accountRulesetsGetAnAccountRulesetWithHttpInfo(rulesetId, accountId);
        return resp.getData();
    }

    /**
     * Get an account ruleset
     * Fetches the latest version of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> accountRulesetsGetAnAccountRulesetWithHttpInfo(String rulesetId, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountRulesetValidateBeforeCall(rulesetId, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an account ruleset (asynchronously)
     * Fetches the latest version of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsGetAnAccountRulesetAsync(String rulesetId, String accountId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountRulesetValidateBeforeCall(rulesetId, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsGetAnAccountRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsGetAnAccountRulesetVersionCall(String rulesetVersion, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}"
            .replaceAll("\\{" + "ruleset_version" + "\\}", apiClient.escapeString(rulesetVersion.toString()))
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsGetAnAccountRulesetVersionValidateBeforeCall(String rulesetVersion, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling accountRulesetsGetAnAccountRulesetVersion(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling accountRulesetsGetAnAccountRulesetVersion(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsGetAnAccountRulesetVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountRulesetVersionCall(rulesetVersion, rulesetId, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an account ruleset version
     * Fetches a specific version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse accountRulesetsGetAnAccountRulesetVersion(String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        ApiResponse<RulesetResponse> resp = accountRulesetsGetAnAccountRulesetVersionWithHttpInfo(rulesetVersion, rulesetId, accountId);
        return resp.getData();
    }

    /**
     * Get an account ruleset version
     * Fetches a specific version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> accountRulesetsGetAnAccountRulesetVersionWithHttpInfo(String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an account ruleset version (asynchronously)
     * Fetches a specific version of an account ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsGetAnAccountRulesetVersionAsync(String rulesetVersion, String rulesetId, String accountId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsGetAnAccountRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsListAccountRulesets
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsListAccountRulesetsCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsListAccountRulesetsValidateBeforeCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsListAccountRulesets(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsListAccountRulesetsCall(accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List account rulesets
     * Fetches all rulesets at the account level.
     * @param accountId  (required)
     * @return RulesetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetsResponse accountRulesetsListAccountRulesets(String accountId) throws ApiException {
        ApiResponse<RulesetsResponse> resp = accountRulesetsListAccountRulesetsWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * List account rulesets
     * Fetches all rulesets at the account level.
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetsResponse> accountRulesetsListAccountRulesetsWithHttpInfo(String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsListAccountRulesetsValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List account rulesets (asynchronously)
     * Fetches all rulesets at the account level.
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsListAccountRulesetsAsync(String accountId, final ApiCallback<RulesetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsListAccountRulesetsValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsListAnAccountEntryPointRulesetSVersions
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsListAnAccountEntryPointRulesetSVersionsCall(String rulesetPhase, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions"
            .replaceAll("\\{" + "ruleset_phase" + "\\}", apiClient.escapeString(rulesetPhase.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsListAnAccountEntryPointRulesetSVersionsValidateBeforeCall(String rulesetPhase, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling accountRulesetsListAnAccountEntryPointRulesetSVersions(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsListAnAccountEntryPointRulesetSVersions(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsListAnAccountEntryPointRulesetSVersionsCall(rulesetPhase, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List an account entry point ruleset&#x27;s versions
     * Fetches the versions of an account entry point ruleset.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return RulesetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetsResponse accountRulesetsListAnAccountEntryPointRulesetSVersions(String rulesetPhase, String accountId) throws ApiException {
        ApiResponse<RulesetsResponse> resp = accountRulesetsListAnAccountEntryPointRulesetSVersionsWithHttpInfo(rulesetPhase, accountId);
        return resp.getData();
    }

    /**
     * List an account entry point ruleset&#x27;s versions
     * Fetches the versions of an account entry point ruleset.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetsResponse> accountRulesetsListAnAccountEntryPointRulesetSVersionsWithHttpInfo(String rulesetPhase, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsListAnAccountEntryPointRulesetSVersionsValidateBeforeCall(rulesetPhase, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List an account entry point ruleset&#x27;s versions (asynchronously)
     * Fetches the versions of an account entry point ruleset.
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsListAnAccountEntryPointRulesetSVersionsAsync(String rulesetPhase, String accountId, final ApiCallback<RulesetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsListAnAccountEntryPointRulesetSVersionsValidateBeforeCall(rulesetPhase, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsListAnAccountRulesetSVersions
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsListAnAccountRulesetSVersionsCall(String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/versions"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsListAnAccountRulesetSVersionsValidateBeforeCall(String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling accountRulesetsListAnAccountRulesetSVersions(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsListAnAccountRulesetSVersions(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsListAnAccountRulesetSVersionsCall(rulesetId, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List an account ruleset&#x27;s versions
     * Fetches the versions of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return RulesetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetsResponse accountRulesetsListAnAccountRulesetSVersions(String rulesetId, String accountId) throws ApiException {
        ApiResponse<RulesetsResponse> resp = accountRulesetsListAnAccountRulesetSVersionsWithHttpInfo(rulesetId, accountId);
        return resp.getData();
    }

    /**
     * List an account ruleset&#x27;s versions
     * Fetches the versions of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetsResponse> accountRulesetsListAnAccountRulesetSVersionsWithHttpInfo(String rulesetId, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsListAnAccountRulesetSVersionsValidateBeforeCall(rulesetId, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List an account ruleset&#x27;s versions (asynchronously)
     * Fetches the versions of an account ruleset.
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsListAnAccountRulesetSVersionsAsync(String rulesetId, String accountId, final ApiCallback<RulesetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsListAnAccountRulesetSVersionsValidateBeforeCall(rulesetId, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsListAnAccountRulesetVersionSRulesByTag
     * @param ruleTag  (required)
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsListAnAccountRulesetVersionSRulesByTagCall(String ruleTag, String rulesetVersion, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}/by_tag/{rule_tag}"
            .replaceAll("\\{" + "rule_tag" + "\\}", apiClient.escapeString(ruleTag.toString()))
            .replaceAll("\\{" + "ruleset_version" + "\\}", apiClient.escapeString(rulesetVersion.toString()))
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsListAnAccountRulesetVersionSRulesByTagValidateBeforeCall(String ruleTag, String rulesetVersion, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleTag' is set
        if (ruleTag == null) {
            throw new ApiException("Missing the required parameter 'ruleTag' when calling accountRulesetsListAnAccountRulesetVersionSRulesByTag(Async)");
        }
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling accountRulesetsListAnAccountRulesetVersionSRulesByTag(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling accountRulesetsListAnAccountRulesetVersionSRulesByTag(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsListAnAccountRulesetVersionSRulesByTag(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsListAnAccountRulesetVersionSRulesByTagCall(ruleTag, rulesetVersion, rulesetId, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List an account ruleset version&#x27;s rules by tag
     * Fetches the rules of a managed account ruleset version for a given tag.
     * @param ruleTag  (required)
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse accountRulesetsListAnAccountRulesetVersionSRulesByTag(String ruleTag, String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        ApiResponse<RulesetResponse> resp = accountRulesetsListAnAccountRulesetVersionSRulesByTagWithHttpInfo(ruleTag, rulesetVersion, rulesetId, accountId);
        return resp.getData();
    }

    /**
     * List an account ruleset version&#x27;s rules by tag
     * Fetches the rules of a managed account ruleset version for a given tag.
     * @param ruleTag  (required)
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> accountRulesetsListAnAccountRulesetVersionSRulesByTagWithHttpInfo(String ruleTag, String rulesetVersion, String rulesetId, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsListAnAccountRulesetVersionSRulesByTagValidateBeforeCall(ruleTag, rulesetVersion, rulesetId, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List an account ruleset version&#x27;s rules by tag (asynchronously)
     * Fetches the rules of a managed account ruleset version for a given tag.
     * @param ruleTag  (required)
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsListAnAccountRulesetVersionSRulesByTagAsync(String ruleTag, String rulesetVersion, String rulesetId, String accountId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsListAnAccountRulesetVersionSRulesByTagValidateBeforeCall(ruleTag, rulesetVersion, rulesetId, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsUpdateAnAccountEntryPointRuleset
     * @param body  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsUpdateAnAccountEntryPointRulesetCall(UpdateRuleset body, String rulesetPhase, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint"
            .replaceAll("\\{" + "ruleset_phase" + "\\}", apiClient.escapeString(rulesetPhase.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsUpdateAnAccountEntryPointRulesetValidateBeforeCall(UpdateRuleset body, String rulesetPhase, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountRulesetsUpdateAnAccountEntryPointRuleset(Async)");
        }
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling accountRulesetsUpdateAnAccountEntryPointRuleset(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsUpdateAnAccountEntryPointRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsUpdateAnAccountEntryPointRulesetCall(body, rulesetPhase, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an account entry point ruleset
     * Updates an account entry point ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse accountRulesetsUpdateAnAccountEntryPointRuleset(UpdateRuleset body, String rulesetPhase, String accountId) throws ApiException {
        ApiResponse<RulesetResponse> resp = accountRulesetsUpdateAnAccountEntryPointRulesetWithHttpInfo(body, rulesetPhase, accountId);
        return resp.getData();
    }

    /**
     * Update an account entry point ruleset
     * Updates an account entry point ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> accountRulesetsUpdateAnAccountEntryPointRulesetWithHttpInfo(UpdateRuleset body, String rulesetPhase, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsUpdateAnAccountEntryPointRulesetValidateBeforeCall(body, rulesetPhase, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account entry point ruleset (asynchronously)
     * Updates an account entry point ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetPhase  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsUpdateAnAccountEntryPointRulesetAsync(UpdateRuleset body, String rulesetPhase, String accountId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsUpdateAnAccountEntryPointRulesetValidateBeforeCall(body, rulesetPhase, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsUpdateAnAccountRuleset
     * @param body  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsUpdateAnAccountRulesetCall(UpdateRuleset body, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsUpdateAnAccountRulesetValidateBeforeCall(UpdateRuleset body, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountRulesetsUpdateAnAccountRuleset(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling accountRulesetsUpdateAnAccountRuleset(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsUpdateAnAccountRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsUpdateAnAccountRulesetCall(body, rulesetId, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an account ruleset
     * Updates an account ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse accountRulesetsUpdateAnAccountRuleset(UpdateRuleset body, String rulesetId, String accountId) throws ApiException {
        ApiResponse<RulesetResponse> resp = accountRulesetsUpdateAnAccountRulesetWithHttpInfo(body, rulesetId, accountId);
        return resp.getData();
    }

    /**
     * Update an account ruleset
     * Updates an account ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> accountRulesetsUpdateAnAccountRulesetWithHttpInfo(UpdateRuleset body, String rulesetId, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsUpdateAnAccountRulesetValidateBeforeCall(body, rulesetId, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account ruleset (asynchronously)
     * Updates an account ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsUpdateAnAccountRulesetAsync(UpdateRuleset body, String rulesetId, String accountId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsUpdateAnAccountRulesetValidateBeforeCall(body, rulesetId, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for accountRulesetsUpdateAnAccountRulesetRule
     * @param body  (required)
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsUpdateAnAccountRulesetRuleCall(CreateUpdateRule body, String ruleId, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/rulesets/{ruleset_id}/rules/{rule_id}"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()))
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accountRulesetsUpdateAnAccountRulesetRuleValidateBeforeCall(CreateUpdateRule body, String ruleId, String rulesetId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountRulesetsUpdateAnAccountRulesetRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling accountRulesetsUpdateAnAccountRulesetRule(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling accountRulesetsUpdateAnAccountRulesetRule(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountRulesetsUpdateAnAccountRulesetRule(Async)");
        }
        
        com.squareup.okhttp.Call call = accountRulesetsUpdateAnAccountRulesetRuleCall(body, ruleId, rulesetId, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an account ruleset rule
     * Updates an existing rule in an account ruleset.
     * @param body  (required)
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse accountRulesetsUpdateAnAccountRulesetRule(CreateUpdateRule body, String ruleId, String rulesetId, String accountId) throws ApiException {
        ApiResponse<RulesetResponse> resp = accountRulesetsUpdateAnAccountRulesetRuleWithHttpInfo(body, ruleId, rulesetId, accountId);
        return resp.getData();
    }

    /**
     * Update an account ruleset rule
     * Updates an existing rule in an account ruleset.
     * @param body  (required)
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> accountRulesetsUpdateAnAccountRulesetRuleWithHttpInfo(CreateUpdateRule body, String ruleId, String rulesetId, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = accountRulesetsUpdateAnAccountRulesetRuleValidateBeforeCall(body, ruleId, rulesetId, accountId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account ruleset rule (asynchronously)
     * Updates an existing rule in an account ruleset.
     * @param body  (required)
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accountRulesetsUpdateAnAccountRulesetRuleAsync(CreateUpdateRule body, String ruleId, String rulesetId, String accountId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accountRulesetsUpdateAnAccountRulesetRuleValidateBeforeCall(body, ruleId, rulesetId, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
