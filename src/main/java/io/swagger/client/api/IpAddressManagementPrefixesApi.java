/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AddressingPrefixesBody;
import io.swagger.client.model.ApiResponseCollection;
import io.swagger.client.model.InlineResponse4xx1;
import io.swagger.client.model.InlineResponse4xx5;
import io.swagger.client.model.InlineResponse4xx6;
import io.swagger.client.model.InlineResponse4xx7;
import io.swagger.client.model.InlineResponse4xx8;
import io.swagger.client.model.IpamPrefixesComponentsSchemasResponseCollection;
import io.swagger.client.model.IpamPrefixesComponentsSchemasSingleResponse;
import io.swagger.client.model.LoaUploadResponse;
import io.swagger.client.model.PrefixesPrefixIdentifierBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpAddressManagementPrefixesApi {
    private ApiClient apiClient;

    public IpAddressManagementPrefixesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpAddressManagementPrefixesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ipAddressManagementPrefixesAddPrefix
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesAddPrefixCall(AddressingPrefixesBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/prefixes"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementPrefixesAddPrefixValidateBeforeCall(AddressingPrefixesBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ipAddressManagementPrefixesAddPrefix(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementPrefixesAddPrefix(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesAddPrefixCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Prefix
     * Add a prefix under the account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return IpamPrefixesComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpamPrefixesComponentsSchemasSingleResponse ipAddressManagementPrefixesAddPrefix(AddressingPrefixesBody body, String accountIdentifier) throws ApiException {
        ApiResponse<IpamPrefixesComponentsSchemasSingleResponse> resp = ipAddressManagementPrefixesAddPrefixWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Add Prefix
     * Add a prefix under the account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;IpamPrefixesComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpamPrefixesComponentsSchemasSingleResponse> ipAddressManagementPrefixesAddPrefixWithHttpInfo(AddressingPrefixesBody body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesAddPrefixValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<IpamPrefixesComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Prefix (asynchronously)
     * Add a prefix under the account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesAddPrefixAsync(AddressingPrefixesBody body, String accountIdentifier, final ApiCallback<IpamPrefixesComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementPrefixesAddPrefixValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpamPrefixesComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementPrefixesDeletePrefix
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesDeletePrefixCall(String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}"
            .replaceAll("\\{" + "prefix_identifier" + "\\}", apiClient.escapeString(prefixIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementPrefixesDeletePrefixValidateBeforeCall(String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'prefixIdentifier' is set
        if (prefixIdentifier == null) {
            throw new ApiException("Missing the required parameter 'prefixIdentifier' when calling ipAddressManagementPrefixesDeletePrefix(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementPrefixesDeletePrefix(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesDeletePrefixCall(prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Prefix
     * Delete an unapproved prefix owned by the account.
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseCollection ipAddressManagementPrefixesDeletePrefix(String prefixIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseCollection> resp = ipAddressManagementPrefixesDeletePrefixWithHttpInfo(prefixIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete Prefix
     * Delete an unapproved prefix owned by the account.
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseCollection> ipAddressManagementPrefixesDeletePrefixWithHttpInfo(String prefixIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesDeletePrefixValidateBeforeCall(prefixIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Prefix (asynchronously)
     * Delete an unapproved prefix owned by the account.
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesDeletePrefixAsync(String prefixIdentifier, String accountIdentifier, final ApiCallback<ApiResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementPrefixesDeletePrefixValidateBeforeCall(prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementPrefixesDownloadLoaDocument
     * @param loaDocumentIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesDownloadLoaDocumentCall(String loaDocumentIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/loa_documents/{loa_document_identifier}/download"
            .replaceAll("\\{" + "loa_document_identifier" + "\\}", apiClient.escapeString(loaDocumentIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementPrefixesDownloadLoaDocumentValidateBeforeCall(String loaDocumentIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loaDocumentIdentifier' is set
        if (loaDocumentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'loaDocumentIdentifier' when calling ipAddressManagementPrefixesDownloadLoaDocument(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementPrefixesDownloadLoaDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesDownloadLoaDocumentCall(loaDocumentIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Download LOA Document
     * Download specified LOA document under the account.
     * @param loaDocumentIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object ipAddressManagementPrefixesDownloadLoaDocument(String loaDocumentIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<Object> resp = ipAddressManagementPrefixesDownloadLoaDocumentWithHttpInfo(loaDocumentIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Download LOA Document
     * Download specified LOA document under the account.
     * @param loaDocumentIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> ipAddressManagementPrefixesDownloadLoaDocumentWithHttpInfo(String loaDocumentIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesDownloadLoaDocumentValidateBeforeCall(loaDocumentIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download LOA Document (asynchronously)
     * Download specified LOA document under the account.
     * @param loaDocumentIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesDownloadLoaDocumentAsync(String loaDocumentIdentifier, String accountIdentifier, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementPrefixesDownloadLoaDocumentValidateBeforeCall(loaDocumentIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementPrefixesListPrefixes
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesListPrefixesCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/prefixes"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementPrefixesListPrefixesValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementPrefixesListPrefixes(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesListPrefixesCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Prefixes
     * List all prefixes owned by the account.
     * @param accountIdentifier  (required)
     * @return IpamPrefixesComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpamPrefixesComponentsSchemasResponseCollection ipAddressManagementPrefixesListPrefixes(String accountIdentifier) throws ApiException {
        ApiResponse<IpamPrefixesComponentsSchemasResponseCollection> resp = ipAddressManagementPrefixesListPrefixesWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List Prefixes
     * List all prefixes owned by the account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;IpamPrefixesComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpamPrefixesComponentsSchemasResponseCollection> ipAddressManagementPrefixesListPrefixesWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesListPrefixesValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<IpamPrefixesComponentsSchemasResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Prefixes (asynchronously)
     * List all prefixes owned by the account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesListPrefixesAsync(String accountIdentifier, final ApiCallback<IpamPrefixesComponentsSchemasResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementPrefixesListPrefixesValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpamPrefixesComponentsSchemasResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementPrefixesPrefixDetails
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesPrefixDetailsCall(String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}"
            .replaceAll("\\{" + "prefix_identifier" + "\\}", apiClient.escapeString(prefixIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementPrefixesPrefixDetailsValidateBeforeCall(String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'prefixIdentifier' is set
        if (prefixIdentifier == null) {
            throw new ApiException("Missing the required parameter 'prefixIdentifier' when calling ipAddressManagementPrefixesPrefixDetails(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementPrefixesPrefixDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesPrefixDetailsCall(prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Prefix Details
     * List a particular prefix owned by the account.
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return IpamPrefixesComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpamPrefixesComponentsSchemasSingleResponse ipAddressManagementPrefixesPrefixDetails(String prefixIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<IpamPrefixesComponentsSchemasSingleResponse> resp = ipAddressManagementPrefixesPrefixDetailsWithHttpInfo(prefixIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Prefix Details
     * List a particular prefix owned by the account.
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;IpamPrefixesComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpamPrefixesComponentsSchemasSingleResponse> ipAddressManagementPrefixesPrefixDetailsWithHttpInfo(String prefixIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesPrefixDetailsValidateBeforeCall(prefixIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<IpamPrefixesComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Prefix Details (asynchronously)
     * List a particular prefix owned by the account.
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesPrefixDetailsAsync(String prefixIdentifier, String accountIdentifier, final ApiCallback<IpamPrefixesComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementPrefixesPrefixDetailsValidateBeforeCall(prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpamPrefixesComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementPrefixesUpdatePrefixDescription
     * @param body  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesUpdatePrefixDescriptionCall(PrefixesPrefixIdentifierBody body, String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}"
            .replaceAll("\\{" + "prefix_identifier" + "\\}", apiClient.escapeString(prefixIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementPrefixesUpdatePrefixDescriptionValidateBeforeCall(PrefixesPrefixIdentifierBody body, String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ipAddressManagementPrefixesUpdatePrefixDescription(Async)");
        }
        // verify the required parameter 'prefixIdentifier' is set
        if (prefixIdentifier == null) {
            throw new ApiException("Missing the required parameter 'prefixIdentifier' when calling ipAddressManagementPrefixesUpdatePrefixDescription(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementPrefixesUpdatePrefixDescription(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesUpdatePrefixDescriptionCall(body, prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Prefix Description
     * Modify the description for a prefix owned by the account.
     * @param body  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return IpamPrefixesComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpamPrefixesComponentsSchemasSingleResponse ipAddressManagementPrefixesUpdatePrefixDescription(PrefixesPrefixIdentifierBody body, String prefixIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<IpamPrefixesComponentsSchemasSingleResponse> resp = ipAddressManagementPrefixesUpdatePrefixDescriptionWithHttpInfo(body, prefixIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update Prefix Description
     * Modify the description for a prefix owned by the account.
     * @param body  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;IpamPrefixesComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpamPrefixesComponentsSchemasSingleResponse> ipAddressManagementPrefixesUpdatePrefixDescriptionWithHttpInfo(PrefixesPrefixIdentifierBody body, String prefixIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesUpdatePrefixDescriptionValidateBeforeCall(body, prefixIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<IpamPrefixesComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Prefix Description (asynchronously)
     * Modify the description for a prefix owned by the account.
     * @param body  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesUpdatePrefixDescriptionAsync(PrefixesPrefixIdentifierBody body, String prefixIdentifier, String accountIdentifier, final ApiCallback<IpamPrefixesComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementPrefixesUpdatePrefixDescriptionValidateBeforeCall(body, prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpamPrefixesComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementPrefixesUploadLoaDocument
     * @param loaDocument  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesUploadLoaDocumentCall(String loaDocument, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/loa_documents"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (loaDocument != null)
        localVarFormParams.put("loa_document", loaDocument);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementPrefixesUploadLoaDocumentValidateBeforeCall(String loaDocument, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'loaDocument' is set
        if (loaDocument == null) {
            throw new ApiException("Missing the required parameter 'loaDocument' when calling ipAddressManagementPrefixesUploadLoaDocument(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementPrefixesUploadLoaDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesUploadLoaDocumentCall(loaDocument, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload LOA Document
     * Submit LOA document (pdf format) under the account.
     * @param loaDocument  (required)
     * @param accountIdentifier  (required)
     * @return LoaUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoaUploadResponse ipAddressManagementPrefixesUploadLoaDocument(String loaDocument, String accountIdentifier) throws ApiException {
        ApiResponse<LoaUploadResponse> resp = ipAddressManagementPrefixesUploadLoaDocumentWithHttpInfo(loaDocument, accountIdentifier);
        return resp.getData();
    }

    /**
     * Upload LOA Document
     * Submit LOA document (pdf format) under the account.
     * @param loaDocument  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;LoaUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoaUploadResponse> ipAddressManagementPrefixesUploadLoaDocumentWithHttpInfo(String loaDocument, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementPrefixesUploadLoaDocumentValidateBeforeCall(loaDocument, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LoaUploadResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload LOA Document (asynchronously)
     * Submit LOA document (pdf format) under the account.
     * @param loaDocument  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixesUploadLoaDocumentAsync(String loaDocument, String accountIdentifier, final ApiCallback<LoaUploadResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementPrefixesUploadLoaDocumentValidateBeforeCall(loaDocument, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoaUploadResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
