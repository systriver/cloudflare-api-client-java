/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CloudflareClientAPIQueryWaitingroom;
import io.swagger.client.model.CloudflareClientAPIStatusResponse;
import io.swagger.client.model.CreateRule;
import io.swagger.client.model.EventDetailsResponse;
import io.swagger.client.model.EventId;
import io.swagger.client.model.EventIdResponse;
import io.swagger.client.model.EventResponse;
import io.swagger.client.model.EventResponseCollection;
import io.swagger.client.model.InlineResponse4xx473;
import io.swagger.client.model.InlineResponse4xx474;
import io.swagger.client.model.InlineResponse4xx475;
import io.swagger.client.model.InlineResponse4xx476;
import io.swagger.client.model.InlineResponse4xx477;
import io.swagger.client.model.InlineResponse4xx478;
import io.swagger.client.model.InlineResponse4xx479;
import io.swagger.client.model.InlineResponse4xx480;
import io.swagger.client.model.InlineResponse4xx481;
import io.swagger.client.model.InlineResponse4xx482;
import io.swagger.client.model.PatchRule;
import io.swagger.client.model.QueryEvent;
import io.swagger.client.model.QueryPreview;
import io.swagger.client.model.SchemasPreviewResponse;
import io.swagger.client.model.SchemasRulesResponseCollection;
import io.swagger.client.model.WaitingRoomId;
import io.swagger.client.model.WaitingRoomIdResponse;
import io.swagger.client.model.WaitingroomComponentsSchemasResponseCollection;
import io.swagger.client.model.WaitingroomComponentsSchemasSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WaitingRoomApi {
    private ApiClient apiClient;

    public WaitingRoomApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WaitingRoomApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for waitingRoomCreateACustomWaitingRoomPagePreview
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomCreateACustomWaitingRoomPagePreviewCall(QueryPreview body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/preview"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomCreateACustomWaitingRoomPagePreviewValidateBeforeCall(QueryPreview body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling waitingRoomCreateACustomWaitingRoomPagePreview(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomCreateACustomWaitingRoomPagePreview(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomCreateACustomWaitingRoomPagePreviewCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a custom waiting room page preview
     * Creates a waiting room page preview. Upload a custom waiting room page for preview. You will receive a preview URL in the form &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;&#x60;. You can use the following query parameters to change the state of the preview: 1. &#x60;force_queue&#x60;: Boolean indicating if all users will be queued in the waiting room and no one will be let into the origin website (also known as queueAll). 2. &#x60;queue_is_full&#x60;: Boolean indicating if the waiting room&#x27;s queue is currently full and not accepting new users at the moment. 3. &#x60;queueing_method&#x60;: The queueing method currently used by the waiting room.  - **fifo** indicates a FIFO queue.  - **random** indicates a Random queue.  - **passthrough** indicates a Passthrough queue. Keep in mind that the waiting room page will only be displayed if &#x60;force_queue&#x3D;true&#x60; or &#x60;event&#x3D;prequeueing&#x60; â€” for other cases the request will pass through to the origin. For our preview, this will be a fake origin website returning \&quot;Welcome\&quot;.   - **reject** indicates a Reject queue. 4. &#x60;event&#x60;: Used to preview a waiting room event.  - **none** indicates no event is occurring.  - **prequeueing** indicates that an event is prequeueing (between &#x60;prequeue_start_time&#x60; and &#x60;event_start_time&#x60;).  - **started** indicates that an event has started (between &#x60;event_start_time&#x60; and &#x60;event_end_time&#x60;). 5. &#x60;shuffle_at_event_start&#x60;: Boolean indicating if the event will shuffle users in the prequeue when it starts. This can only be set to **true** if an event is active (&#x60;event&#x60; is not **none**).  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?force_queue&#x3D;false&amp;queue_is_full&#x3D;false&amp;queueing_method&#x3D;random&amp;event&#x3D;started&amp;shuffle_at_event_start&#x3D;true&#x60; 6. &#x60;waitTime&#x60;: Non-zero, positive integer indicating the estimated wait time in minutes. The default value is 10 minutes.  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?waitTime&#x3D;50&#x60; to configure the estimated wait time as 50 minutes.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return SchemasPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasPreviewResponse waitingRoomCreateACustomWaitingRoomPagePreview(QueryPreview body, String zoneIdentifier) throws ApiException {
        ApiResponse<SchemasPreviewResponse> resp = waitingRoomCreateACustomWaitingRoomPagePreviewWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Create a custom waiting room page preview
     * Creates a waiting room page preview. Upload a custom waiting room page for preview. You will receive a preview URL in the form &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;&#x60;. You can use the following query parameters to change the state of the preview: 1. &#x60;force_queue&#x60;: Boolean indicating if all users will be queued in the waiting room and no one will be let into the origin website (also known as queueAll). 2. &#x60;queue_is_full&#x60;: Boolean indicating if the waiting room&#x27;s queue is currently full and not accepting new users at the moment. 3. &#x60;queueing_method&#x60;: The queueing method currently used by the waiting room.  - **fifo** indicates a FIFO queue.  - **random** indicates a Random queue.  - **passthrough** indicates a Passthrough queue. Keep in mind that the waiting room page will only be displayed if &#x60;force_queue&#x3D;true&#x60; or &#x60;event&#x3D;prequeueing&#x60; â€” for other cases the request will pass through to the origin. For our preview, this will be a fake origin website returning \&quot;Welcome\&quot;.   - **reject** indicates a Reject queue. 4. &#x60;event&#x60;: Used to preview a waiting room event.  - **none** indicates no event is occurring.  - **prequeueing** indicates that an event is prequeueing (between &#x60;prequeue_start_time&#x60; and &#x60;event_start_time&#x60;).  - **started** indicates that an event has started (between &#x60;event_start_time&#x60; and &#x60;event_end_time&#x60;). 5. &#x60;shuffle_at_event_start&#x60;: Boolean indicating if the event will shuffle users in the prequeue when it starts. This can only be set to **true** if an event is active (&#x60;event&#x60; is not **none**).  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?force_queue&#x3D;false&amp;queue_is_full&#x3D;false&amp;queueing_method&#x3D;random&amp;event&#x3D;started&amp;shuffle_at_event_start&#x3D;true&#x60; 6. &#x60;waitTime&#x60;: Non-zero, positive integer indicating the estimated wait time in minutes. The default value is 10 minutes.  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?waitTime&#x3D;50&#x60; to configure the estimated wait time as 50 minutes.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;SchemasPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasPreviewResponse> waitingRoomCreateACustomWaitingRoomPagePreviewWithHttpInfo(QueryPreview body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomCreateACustomWaitingRoomPagePreviewValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasPreviewResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a custom waiting room page preview (asynchronously)
     * Creates a waiting room page preview. Upload a custom waiting room page for preview. You will receive a preview URL in the form &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;&#x60;. You can use the following query parameters to change the state of the preview: 1. &#x60;force_queue&#x60;: Boolean indicating if all users will be queued in the waiting room and no one will be let into the origin website (also known as queueAll). 2. &#x60;queue_is_full&#x60;: Boolean indicating if the waiting room&#x27;s queue is currently full and not accepting new users at the moment. 3. &#x60;queueing_method&#x60;: The queueing method currently used by the waiting room.  - **fifo** indicates a FIFO queue.  - **random** indicates a Random queue.  - **passthrough** indicates a Passthrough queue. Keep in mind that the waiting room page will only be displayed if &#x60;force_queue&#x3D;true&#x60; or &#x60;event&#x3D;prequeueing&#x60; â€” for other cases the request will pass through to the origin. For our preview, this will be a fake origin website returning \&quot;Welcome\&quot;.   - **reject** indicates a Reject queue. 4. &#x60;event&#x60;: Used to preview a waiting room event.  - **none** indicates no event is occurring.  - **prequeueing** indicates that an event is prequeueing (between &#x60;prequeue_start_time&#x60; and &#x60;event_start_time&#x60;).  - **started** indicates that an event has started (between &#x60;event_start_time&#x60; and &#x60;event_end_time&#x60;). 5. &#x60;shuffle_at_event_start&#x60;: Boolean indicating if the event will shuffle users in the prequeue when it starts. This can only be set to **true** if an event is active (&#x60;event&#x60; is not **none**).  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?force_queue&#x3D;false&amp;queue_is_full&#x3D;false&amp;queueing_method&#x3D;random&amp;event&#x3D;started&amp;shuffle_at_event_start&#x3D;true&#x60; 6. &#x60;waitTime&#x60;: Non-zero, positive integer indicating the estimated wait time in minutes. The default value is 10 minutes.  For example, you can make a request to &#x60;http://waitingrooms.dev/preview/&lt;uuid&gt;?waitTime&#x3D;50&#x60; to configure the estimated wait time as 50 minutes.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomCreateACustomWaitingRoomPagePreviewAsync(QueryPreview body, String zoneIdentifier, final ApiCallback<SchemasPreviewResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomCreateACustomWaitingRoomPagePreviewValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasPreviewResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomCreateEvent
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomCreateEventCall(QueryEvent body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/events"
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomCreateEventValidateBeforeCall(QueryEvent body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling waitingRoomCreateEvent(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomCreateEvent(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomCreateEvent(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomCreateEventCall(body, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create event
     * Only available for the Waiting Room Advanced subscription. Creates an event for a waiting room. An event takes place during a specified period of time, temporarily changing the behavior of a waiting room. While the event is active, some of the properties in the event&#x27;s configuration may either override or inherit from the waiting room&#x27;s configuration. Note that events cannot overlap with each other, so only one event can be active at a time.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return EventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventResponse waitingRoomCreateEvent(QueryEvent body, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<EventResponse> resp = waitingRoomCreateEventWithHttpInfo(body, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Create event
     * Only available for the Waiting Room Advanced subscription. Creates an event for a waiting room. An event takes place during a specified period of time, temporarily changing the behavior of a waiting room. While the event is active, some of the properties in the event&#x27;s configuration may either override or inherit from the waiting room&#x27;s configuration. Note that events cannot overlap with each other, so only one event can be active at a time.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventResponse> waitingRoomCreateEventWithHttpInfo(QueryEvent body, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomCreateEventValidateBeforeCall(body, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create event (asynchronously)
     * Only available for the Waiting Room Advanced subscription. Creates an event for a waiting room. An event takes place during a specified period of time, temporarily changing the behavior of a waiting room. While the event is active, some of the properties in the event&#x27;s configuration may either override or inherit from the waiting room&#x27;s configuration. Note that events cannot overlap with each other, so only one event can be active at a time.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomCreateEventAsync(QueryEvent body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<EventResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomCreateEventValidateBeforeCall(body, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomCreateWaitingRoom
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomCreateWaitingRoomCall(CloudflareClientAPIQueryWaitingroom body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomCreateWaitingRoomValidateBeforeCall(CloudflareClientAPIQueryWaitingroom body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling waitingRoomCreateWaitingRoom(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomCreateWaitingRoom(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomCreateWaitingRoomCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create waiting room
     * Creates a new waiting room.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return WaitingroomComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WaitingroomComponentsSchemasSingleResponse waitingRoomCreateWaitingRoom(CloudflareClientAPIQueryWaitingroom body, String zoneIdentifier) throws ApiException {
        ApiResponse<WaitingroomComponentsSchemasSingleResponse> resp = waitingRoomCreateWaitingRoomWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Create waiting room
     * Creates a new waiting room.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;WaitingroomComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WaitingroomComponentsSchemasSingleResponse> waitingRoomCreateWaitingRoomWithHttpInfo(CloudflareClientAPIQueryWaitingroom body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomCreateWaitingRoomValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<WaitingroomComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create waiting room (asynchronously)
     * Creates a new waiting room.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomCreateWaitingRoomAsync(CloudflareClientAPIQueryWaitingroom body, String zoneIdentifier, final ApiCallback<WaitingroomComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomCreateWaitingRoomValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WaitingroomComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomCreateWaitingRoomRule
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomCreateWaitingRoomRuleCall(CreateRule body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/rules"
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomCreateWaitingRoomRuleValidateBeforeCall(CreateRule body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling waitingRoomCreateWaitingRoomRule(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomCreateWaitingRoomRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomCreateWaitingRoomRule(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomCreateWaitingRoomRuleCall(body, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Waiting Room Rule
     * Only available for the Waiting Room Advanced subscription. Creates a rule for a waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return SchemasRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasRulesResponseCollection waitingRoomCreateWaitingRoomRule(CreateRule body, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<SchemasRulesResponseCollection> resp = waitingRoomCreateWaitingRoomRuleWithHttpInfo(body, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Create Waiting Room Rule
     * Only available for the Waiting Room Advanced subscription. Creates a rule for a waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;SchemasRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasRulesResponseCollection> waitingRoomCreateWaitingRoomRuleWithHttpInfo(CreateRule body, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomCreateWaitingRoomRuleValidateBeforeCall(body, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasRulesResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Waiting Room Rule (asynchronously)
     * Only available for the Waiting Room Advanced subscription. Creates a rule for a waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomCreateWaitingRoomRuleAsync(CreateRule body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<SchemasRulesResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomCreateWaitingRoomRuleValidateBeforeCall(body, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasRulesResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomDeleteEvent
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomDeleteEventCall(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/events/{event_id}"
            .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomDeleteEventValidateBeforeCall(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling waitingRoomDeleteEvent(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomDeleteEvent(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomDeleteEvent(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomDeleteEventCall(eventId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete event
     * Deletes an event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return EventIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventIdResponse waitingRoomDeleteEvent(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<EventIdResponse> resp = waitingRoomDeleteEventWithHttpInfo(eventId, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Delete event
     * Deletes an event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EventIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventIdResponse> waitingRoomDeleteEventWithHttpInfo(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomDeleteEventValidateBeforeCall(eventId, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<EventIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete event (asynchronously)
     * Deletes an event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomDeleteEventAsync(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<EventIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomDeleteEventValidateBeforeCall(eventId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomDeleteWaitingRoom
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomDeleteWaitingRoomCall(WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}"
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomDeleteWaitingRoomValidateBeforeCall(WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomDeleteWaitingRoom(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomDeleteWaitingRoom(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomDeleteWaitingRoomCall(waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete waiting room
     * Deletes a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return WaitingRoomIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WaitingRoomIdResponse waitingRoomDeleteWaitingRoom(WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<WaitingRoomIdResponse> resp = waitingRoomDeleteWaitingRoomWithHttpInfo(waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Delete waiting room
     * Deletes a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;WaitingRoomIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WaitingRoomIdResponse> waitingRoomDeleteWaitingRoomWithHttpInfo(WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomDeleteWaitingRoomValidateBeforeCall(waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<WaitingRoomIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete waiting room (asynchronously)
     * Deletes a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomDeleteWaitingRoomAsync(WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<WaitingRoomIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomDeleteWaitingRoomValidateBeforeCall(waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WaitingRoomIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomDeleteWaitingRoomRule
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomDeleteWaitingRoomRuleCall(String ruleId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/rules/{rule_id}"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()))
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomDeleteWaitingRoomRuleValidateBeforeCall(String ruleId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling waitingRoomDeleteWaitingRoomRule(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomDeleteWaitingRoomRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomDeleteWaitingRoomRule(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomDeleteWaitingRoomRuleCall(ruleId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Waiting Room Rule
     * Deletes a rule for a waiting room.
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return SchemasRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasRulesResponseCollection waitingRoomDeleteWaitingRoomRule(String ruleId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<SchemasRulesResponseCollection> resp = waitingRoomDeleteWaitingRoomRuleWithHttpInfo(ruleId, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Delete Waiting Room Rule
     * Deletes a rule for a waiting room.
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;SchemasRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasRulesResponseCollection> waitingRoomDeleteWaitingRoomRuleWithHttpInfo(String ruleId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomDeleteWaitingRoomRuleValidateBeforeCall(ruleId, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasRulesResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Waiting Room Rule (asynchronously)
     * Deletes a rule for a waiting room.
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomDeleteWaitingRoomRuleAsync(String ruleId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<SchemasRulesResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomDeleteWaitingRoomRuleValidateBeforeCall(ruleId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasRulesResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomEventDetails
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomEventDetailsCall(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/events/{event_id}"
            .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomEventDetailsValidateBeforeCall(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling waitingRoomEventDetails(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomEventDetails(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomEventDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomEventDetailsCall(eventId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Event details
     * Fetches a single configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return EventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventResponse waitingRoomEventDetails(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<EventResponse> resp = waitingRoomEventDetailsWithHttpInfo(eventId, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Event details
     * Fetches a single configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventResponse> waitingRoomEventDetailsWithHttpInfo(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomEventDetailsValidateBeforeCall(eventId, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Event details (asynchronously)
     * Fetches a single configured event for a waiting room.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomEventDetailsAsync(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<EventResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomEventDetailsValidateBeforeCall(eventId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomGetWaitingRoomStatus
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomGetWaitingRoomStatusCall(WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/status"
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomGetWaitingRoomStatusValidateBeforeCall(WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomGetWaitingRoomStatus(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomGetWaitingRoomStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomGetWaitingRoomStatusCall(waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get waiting room status
     * Fetches the status of a configured waiting room. Response fields include: 1. &#x60;status&#x60;: String indicating the status of the waiting room. The possible status are:  - **not_queueing** indicates that the configured thresholds have not been met and all users are going through to the origin.  - **queueing** indicates that the thresholds have been met and some users are held in the waiting room.  - **event_prequeueing** indicates that an event is active and is currently prequeueing users before it starts. 2. &#x60;event_id&#x60;: String of the current event&#x27;s &#x60;id&#x60; if an event is active, otherwise an empty string. 3. &#x60;estimated_queued_users&#x60;: Integer of the estimated number of users currently waiting in the queue. 4. &#x60;estimated_total_active_users&#x60;: Integer of the estimated number of users currently active on the origin. 5. &#x60;max_estimated_time_minutes&#x60;: Integer of the maximum estimated time currently presented to the users.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return CloudflareClientAPIStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIStatusResponse waitingRoomGetWaitingRoomStatus(WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<CloudflareClientAPIStatusResponse> resp = waitingRoomGetWaitingRoomStatusWithHttpInfo(waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Get waiting room status
     * Fetches the status of a configured waiting room. Response fields include: 1. &#x60;status&#x60;: String indicating the status of the waiting room. The possible status are:  - **not_queueing** indicates that the configured thresholds have not been met and all users are going through to the origin.  - **queueing** indicates that the thresholds have been met and some users are held in the waiting room.  - **event_prequeueing** indicates that an event is active and is currently prequeueing users before it starts. 2. &#x60;event_id&#x60;: String of the current event&#x27;s &#x60;id&#x60; if an event is active, otherwise an empty string. 3. &#x60;estimated_queued_users&#x60;: Integer of the estimated number of users currently waiting in the queue. 4. &#x60;estimated_total_active_users&#x60;: Integer of the estimated number of users currently active on the origin. 5. &#x60;max_estimated_time_minutes&#x60;: Integer of the maximum estimated time currently presented to the users.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIStatusResponse> waitingRoomGetWaitingRoomStatusWithHttpInfo(WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomGetWaitingRoomStatusValidateBeforeCall(waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get waiting room status (asynchronously)
     * Fetches the status of a configured waiting room. Response fields include: 1. &#x60;status&#x60;: String indicating the status of the waiting room. The possible status are:  - **not_queueing** indicates that the configured thresholds have not been met and all users are going through to the origin.  - **queueing** indicates that the thresholds have been met and some users are held in the waiting room.  - **event_prequeueing** indicates that an event is active and is currently prequeueing users before it starts. 2. &#x60;event_id&#x60;: String of the current event&#x27;s &#x60;id&#x60; if an event is active, otherwise an empty string. 3. &#x60;estimated_queued_users&#x60;: Integer of the estimated number of users currently waiting in the queue. 4. &#x60;estimated_total_active_users&#x60;: Integer of the estimated number of users currently active on the origin. 5. &#x60;max_estimated_time_minutes&#x60;: Integer of the maximum estimated time currently presented to the users.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomGetWaitingRoomStatusAsync(WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<CloudflareClientAPIStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomGetWaitingRoomStatusValidateBeforeCall(waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomListEvents
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomListEventsCall(WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/events"
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomListEventsValidateBeforeCall(WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomListEvents(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomListEvents(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomListEventsCall(waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List events
     * Lists events for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return EventResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventResponseCollection waitingRoomListEvents(WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<EventResponseCollection> resp = waitingRoomListEventsWithHttpInfo(waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * List events
     * Lists events for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EventResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventResponseCollection> waitingRoomListEventsWithHttpInfo(WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomListEventsValidateBeforeCall(waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<EventResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List events (asynchronously)
     * Lists events for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomListEventsAsync(WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<EventResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomListEventsValidateBeforeCall(waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomListWaitingRoomRules
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomListWaitingRoomRulesCall(WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/rules"
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomListWaitingRoomRulesValidateBeforeCall(WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomListWaitingRoomRules(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomListWaitingRoomRules(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomListWaitingRoomRulesCall(waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Waiting Room Rules
     * Lists rules for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return SchemasRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasRulesResponseCollection waitingRoomListWaitingRoomRules(WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<SchemasRulesResponseCollection> resp = waitingRoomListWaitingRoomRulesWithHttpInfo(waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * List Waiting Room Rules
     * Lists rules for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;SchemasRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasRulesResponseCollection> waitingRoomListWaitingRoomRulesWithHttpInfo(WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomListWaitingRoomRulesValidateBeforeCall(waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasRulesResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Waiting Room Rules (asynchronously)
     * Lists rules for a waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomListWaitingRoomRulesAsync(WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<SchemasRulesResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomListWaitingRoomRulesValidateBeforeCall(waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasRulesResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomListWaitingRooms
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomListWaitingRoomsCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomListWaitingRoomsValidateBeforeCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomListWaitingRooms(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomListWaitingRoomsCall(zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List waiting rooms
     * Lists waiting rooms.
     * @param zoneIdentifier  (required)
     * @return WaitingroomComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WaitingroomComponentsSchemasResponseCollection waitingRoomListWaitingRooms(String zoneIdentifier) throws ApiException {
        ApiResponse<WaitingroomComponentsSchemasResponseCollection> resp = waitingRoomListWaitingRoomsWithHttpInfo(zoneIdentifier);
        return resp.getData();
    }

    /**
     * List waiting rooms
     * Lists waiting rooms.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;WaitingroomComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WaitingroomComponentsSchemasResponseCollection> waitingRoomListWaitingRoomsWithHttpInfo(String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomListWaitingRoomsValidateBeforeCall(zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<WaitingroomComponentsSchemasResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List waiting rooms (asynchronously)
     * Lists waiting rooms.
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomListWaitingRoomsAsync(String zoneIdentifier, final ApiCallback<WaitingroomComponentsSchemasResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomListWaitingRoomsValidateBeforeCall(zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WaitingroomComponentsSchemasResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomPatchEvent
     * @param body  (required)
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomPatchEventCall(QueryEvent body, EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/events/{event_id}"
            .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomPatchEventValidateBeforeCall(QueryEvent body, EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling waitingRoomPatchEvent(Async)");
        }
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling waitingRoomPatchEvent(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomPatchEvent(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomPatchEvent(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomPatchEventCall(body, eventId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Patch event
     * Patches a configured event for a waiting room.
     * @param body  (required)
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return EventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventResponse waitingRoomPatchEvent(QueryEvent body, EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<EventResponse> resp = waitingRoomPatchEventWithHttpInfo(body, eventId, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Patch event
     * Patches a configured event for a waiting room.
     * @param body  (required)
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventResponse> waitingRoomPatchEventWithHttpInfo(QueryEvent body, EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomPatchEventValidateBeforeCall(body, eventId, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Patch event (asynchronously)
     * Patches a configured event for a waiting room.
     * @param body  (required)
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomPatchEventAsync(QueryEvent body, EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<EventResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomPatchEventValidateBeforeCall(body, eventId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomPatchWaitingRoom
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomPatchWaitingRoomCall(CloudflareClientAPIQueryWaitingroom body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}"
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomPatchWaitingRoomValidateBeforeCall(CloudflareClientAPIQueryWaitingroom body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling waitingRoomPatchWaitingRoom(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomPatchWaitingRoom(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomPatchWaitingRoom(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomPatchWaitingRoomCall(body, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Patch waiting room
     * Patches a configured waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return WaitingroomComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WaitingroomComponentsSchemasSingleResponse waitingRoomPatchWaitingRoom(CloudflareClientAPIQueryWaitingroom body, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<WaitingroomComponentsSchemasSingleResponse> resp = waitingRoomPatchWaitingRoomWithHttpInfo(body, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Patch waiting room
     * Patches a configured waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;WaitingroomComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WaitingroomComponentsSchemasSingleResponse> waitingRoomPatchWaitingRoomWithHttpInfo(CloudflareClientAPIQueryWaitingroom body, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomPatchWaitingRoomValidateBeforeCall(body, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<WaitingroomComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Patch waiting room (asynchronously)
     * Patches a configured waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomPatchWaitingRoomAsync(CloudflareClientAPIQueryWaitingroom body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<WaitingroomComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomPatchWaitingRoomValidateBeforeCall(body, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WaitingroomComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomPatchWaitingRoomRule
     * @param body  (required)
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomPatchWaitingRoomRuleCall(PatchRule body, String ruleId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/rules/{rule_id}"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()))
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomPatchWaitingRoomRuleValidateBeforeCall(PatchRule body, String ruleId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling waitingRoomPatchWaitingRoomRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling waitingRoomPatchWaitingRoomRule(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomPatchWaitingRoomRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomPatchWaitingRoomRule(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomPatchWaitingRoomRuleCall(body, ruleId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Patch Waiting Room Rule
     * Patches a rule for a waiting room.
     * @param body  (required)
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return SchemasRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasRulesResponseCollection waitingRoomPatchWaitingRoomRule(PatchRule body, String ruleId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<SchemasRulesResponseCollection> resp = waitingRoomPatchWaitingRoomRuleWithHttpInfo(body, ruleId, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Patch Waiting Room Rule
     * Patches a rule for a waiting room.
     * @param body  (required)
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;SchemasRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasRulesResponseCollection> waitingRoomPatchWaitingRoomRuleWithHttpInfo(PatchRule body, String ruleId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomPatchWaitingRoomRuleValidateBeforeCall(body, ruleId, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasRulesResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Patch Waiting Room Rule (asynchronously)
     * Patches a rule for a waiting room.
     * @param body  (required)
     * @param ruleId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomPatchWaitingRoomRuleAsync(PatchRule body, String ruleId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<SchemasRulesResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomPatchWaitingRoomRuleValidateBeforeCall(body, ruleId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasRulesResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomPreviewActiveEventDetails
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomPreviewActiveEventDetailsCall(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/events/{event_id}/details"
            .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomPreviewActiveEventDetailsValidateBeforeCall(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling waitingRoomPreviewActiveEventDetails(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomPreviewActiveEventDetails(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomPreviewActiveEventDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomPreviewActiveEventDetailsCall(eventId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Preview active event details
     * Previews an event&#x27;s configuration as if it was active. Inherited fields from the waiting room will be displayed with their current values.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return EventDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventDetailsResponse waitingRoomPreviewActiveEventDetails(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<EventDetailsResponse> resp = waitingRoomPreviewActiveEventDetailsWithHttpInfo(eventId, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Preview active event details
     * Previews an event&#x27;s configuration as if it was active. Inherited fields from the waiting room will be displayed with their current values.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EventDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventDetailsResponse> waitingRoomPreviewActiveEventDetailsWithHttpInfo(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomPreviewActiveEventDetailsValidateBeforeCall(eventId, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<EventDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Preview active event details (asynchronously)
     * Previews an event&#x27;s configuration as if it was active. Inherited fields from the waiting room will be displayed with their current values.
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomPreviewActiveEventDetailsAsync(EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<EventDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomPreviewActiveEventDetailsValidateBeforeCall(eventId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomReplaceWaitingRoomRules
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomReplaceWaitingRoomRulesCall(List<CreateRule> body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/rules"
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomReplaceWaitingRoomRulesValidateBeforeCall(List<CreateRule> body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling waitingRoomReplaceWaitingRoomRules(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomReplaceWaitingRoomRules(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomReplaceWaitingRoomRules(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomReplaceWaitingRoomRulesCall(body, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace Waiting Room Rules
     * Only available for the Waiting Room Advanced subscription. Replaces all rules for a waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return SchemasRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasRulesResponseCollection waitingRoomReplaceWaitingRoomRules(List<CreateRule> body, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<SchemasRulesResponseCollection> resp = waitingRoomReplaceWaitingRoomRulesWithHttpInfo(body, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Replace Waiting Room Rules
     * Only available for the Waiting Room Advanced subscription. Replaces all rules for a waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;SchemasRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasRulesResponseCollection> waitingRoomReplaceWaitingRoomRulesWithHttpInfo(List<CreateRule> body, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomReplaceWaitingRoomRulesValidateBeforeCall(body, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasRulesResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace Waiting Room Rules (asynchronously)
     * Only available for the Waiting Room Advanced subscription. Replaces all rules for a waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomReplaceWaitingRoomRulesAsync(List<CreateRule> body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<SchemasRulesResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomReplaceWaitingRoomRulesValidateBeforeCall(body, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasRulesResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomUpdateEvent
     * @param body  (required)
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomUpdateEventCall(QueryEvent body, EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}/events/{event_id}"
            .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomUpdateEventValidateBeforeCall(QueryEvent body, EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling waitingRoomUpdateEvent(Async)");
        }
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling waitingRoomUpdateEvent(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomUpdateEvent(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomUpdateEvent(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomUpdateEventCall(body, eventId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update event
     * Updates a configured event for a waiting room.
     * @param body  (required)
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return EventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventResponse waitingRoomUpdateEvent(QueryEvent body, EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<EventResponse> resp = waitingRoomUpdateEventWithHttpInfo(body, eventId, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Update event
     * Updates a configured event for a waiting room.
     * @param body  (required)
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;EventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventResponse> waitingRoomUpdateEventWithHttpInfo(QueryEvent body, EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomUpdateEventValidateBeforeCall(body, eventId, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update event (asynchronously)
     * Updates a configured event for a waiting room.
     * @param body  (required)
     * @param eventId  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomUpdateEventAsync(QueryEvent body, EventId eventId, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<EventResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomUpdateEventValidateBeforeCall(body, eventId, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomUpdateWaitingRoom
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomUpdateWaitingRoomCall(CloudflareClientAPIQueryWaitingroom body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}"
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomUpdateWaitingRoomValidateBeforeCall(CloudflareClientAPIQueryWaitingroom body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling waitingRoomUpdateWaitingRoom(Async)");
        }
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomUpdateWaitingRoom(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomUpdateWaitingRoom(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomUpdateWaitingRoomCall(body, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update waiting room
     * Updates a configured waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return WaitingroomComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WaitingroomComponentsSchemasSingleResponse waitingRoomUpdateWaitingRoom(CloudflareClientAPIQueryWaitingroom body, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<WaitingroomComponentsSchemasSingleResponse> resp = waitingRoomUpdateWaitingRoomWithHttpInfo(body, waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Update waiting room
     * Updates a configured waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;WaitingroomComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WaitingroomComponentsSchemasSingleResponse> waitingRoomUpdateWaitingRoomWithHttpInfo(CloudflareClientAPIQueryWaitingroom body, WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomUpdateWaitingRoomValidateBeforeCall(body, waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<WaitingroomComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update waiting room (asynchronously)
     * Updates a configured waiting room.
     * @param body  (required)
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomUpdateWaitingRoomAsync(CloudflareClientAPIQueryWaitingroom body, WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<WaitingroomComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomUpdateWaitingRoomValidateBeforeCall(body, waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WaitingroomComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for waitingRoomWaitingRoomDetails
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call waitingRoomWaitingRoomDetailsCall(WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/waiting_rooms/{waiting_room_id}"
            .replaceAll("\\{" + "waiting_room_id" + "\\}", apiClient.escapeString(waitingRoomId.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call waitingRoomWaitingRoomDetailsValidateBeforeCall(WaitingRoomId waitingRoomId, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'waitingRoomId' is set
        if (waitingRoomId == null) {
            throw new ApiException("Missing the required parameter 'waitingRoomId' when calling waitingRoomWaitingRoomDetails(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling waitingRoomWaitingRoomDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = waitingRoomWaitingRoomDetailsCall(waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Waiting room details
     * Fetches a single configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return WaitingroomComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WaitingroomComponentsSchemasSingleResponse waitingRoomWaitingRoomDetails(WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        ApiResponse<WaitingroomComponentsSchemasSingleResponse> resp = waitingRoomWaitingRoomDetailsWithHttpInfo(waitingRoomId, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Waiting room details
     * Fetches a single configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;WaitingroomComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WaitingroomComponentsSchemasSingleResponse> waitingRoomWaitingRoomDetailsWithHttpInfo(WaitingRoomId waitingRoomId, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = waitingRoomWaitingRoomDetailsValidateBeforeCall(waitingRoomId, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<WaitingroomComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Waiting room details (asynchronously)
     * Fetches a single configured waiting room.
     * @param waitingRoomId  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call waitingRoomWaitingRoomDetailsAsync(WaitingRoomId waitingRoomId, String zoneIdentifier, final ApiCallback<WaitingroomComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = waitingRoomWaitingRoomDetailsValidateBeforeCall(waitingRoomId, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WaitingroomComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
