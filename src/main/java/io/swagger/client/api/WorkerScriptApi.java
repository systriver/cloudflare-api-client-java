/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse4xx188;
import io.swagger.client.model.InlineResponse4xx189;
import io.swagger.client.model.InlineResponse4xx193;
import io.swagger.client.model.ScriptResponseCollection;
import io.swagger.client.model.UsageModelResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkerScriptApi {
    private ApiClient apiClient;

    public WorkerScriptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkerScriptApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for workerScriptDeleteWorker
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workerScriptDeleteWorkerCall(String scriptName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/workers/scripts/{script_name}"
            .replaceAll("\\{" + "script_name" + "\\}", apiClient.escapeString(scriptName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workerScriptDeleteWorkerValidateBeforeCall(String scriptName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptDeleteWorker(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workerScriptDeleteWorker(Async)");
        }
        
        com.squareup.okhttp.Call call = workerScriptDeleteWorkerCall(scriptName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Worker
     * Delete your worker. This call has no response body on a successful delete.  **Query paramaters**:  1.  &#x60;force&#x60;: boolean;   If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script.
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void workerScriptDeleteWorker(String scriptName, String accountIdentifier) throws ApiException {
        workerScriptDeleteWorkerWithHttpInfo(scriptName, accountIdentifier);
    }

    /**
     * Delete Worker
     * Delete your worker. This call has no response body on a successful delete.  **Query paramaters**:  1.  &#x60;force&#x60;: boolean;   If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script.
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> workerScriptDeleteWorkerWithHttpInfo(String scriptName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workerScriptDeleteWorkerValidateBeforeCall(scriptName, accountIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Worker (asynchronously)
     * Delete your worker. This call has no response body on a successful delete.  **Query paramaters**:  1.  &#x60;force&#x60;: boolean;   If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script.
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workerScriptDeleteWorkerAsync(String scriptName, String accountIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workerScriptDeleteWorkerValidateBeforeCall(scriptName, accountIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for workerScriptDownloadWorker
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workerScriptDownloadWorkerCall(String scriptName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/workers/scripts/{script_name}"
            .replaceAll("\\{" + "script_name" + "\\}", apiClient.escapeString(scriptName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "undefined"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workerScriptDownloadWorkerValidateBeforeCall(String scriptName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptDownloadWorker(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workerScriptDownloadWorker(Async)");
        }
        
        com.squareup.okhttp.Call call = workerScriptDownloadWorkerCall(scriptName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Download Worker
     * Fetch raw script content for your worker. Note this is the original script content, not JSON encoded.
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object workerScriptDownloadWorker(String scriptName, String accountIdentifier) throws ApiException {
        ApiResponse<Object> resp = workerScriptDownloadWorkerWithHttpInfo(scriptName, accountIdentifier);
        return resp.getData();
    }

    /**
     * Download Worker
     * Fetch raw script content for your worker. Note this is the original script content, not JSON encoded.
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> workerScriptDownloadWorkerWithHttpInfo(String scriptName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workerScriptDownloadWorkerValidateBeforeCall(scriptName, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download Worker (asynchronously)
     * Fetch raw script content for your worker. Note this is the original script content, not JSON encoded.
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workerScriptDownloadWorkerAsync(String scriptName, String accountIdentifier, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workerScriptDownloadWorkerValidateBeforeCall(scriptName, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workerScriptFetchUsageModel
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workerScriptFetchUsageModelCall(String scriptName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/workers/scripts/{script_name}/usage-model"
            .replaceAll("\\{" + "script_name" + "\\}", apiClient.escapeString(scriptName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workerScriptFetchUsageModelValidateBeforeCall(String scriptName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptFetchUsageModel(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workerScriptFetchUsageModel(Async)");
        }
        
        com.squareup.okhttp.Call call = workerScriptFetchUsageModelCall(scriptName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch Usage Model
     * Fetches the Usage Model for a given Worker.
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @return UsageModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UsageModelResponse workerScriptFetchUsageModel(String scriptName, String accountIdentifier) throws ApiException {
        ApiResponse<UsageModelResponse> resp = workerScriptFetchUsageModelWithHttpInfo(scriptName, accountIdentifier);
        return resp.getData();
    }

    /**
     * Fetch Usage Model
     * Fetches the Usage Model for a given Worker.
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;UsageModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UsageModelResponse> workerScriptFetchUsageModelWithHttpInfo(String scriptName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workerScriptFetchUsageModelValidateBeforeCall(scriptName, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<UsageModelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch Usage Model (asynchronously)
     * Fetches the Usage Model for a given Worker.
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workerScriptFetchUsageModelAsync(String scriptName, String accountIdentifier, final ApiCallback<UsageModelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workerScriptFetchUsageModelValidateBeforeCall(scriptName, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UsageModelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workerScriptListWorkers
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workerScriptListWorkersCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/workers/scripts"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workerScriptListWorkersValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workerScriptListWorkers(Async)");
        }
        
        com.squareup.okhttp.Call call = workerScriptListWorkersCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Workers
     * Fetch a list of uploaded workers.
     * @param accountIdentifier  (required)
     * @return ScriptResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScriptResponseCollection workerScriptListWorkers(String accountIdentifier) throws ApiException {
        ApiResponse<ScriptResponseCollection> resp = workerScriptListWorkersWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List Workers
     * Fetch a list of uploaded workers.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ScriptResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScriptResponseCollection> workerScriptListWorkersWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workerScriptListWorkersValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ScriptResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Workers (asynchronously)
     * Fetch a list of uploaded workers.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workerScriptListWorkersAsync(String accountIdentifier, final ApiCallback<ScriptResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workerScriptListWorkersValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScriptResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workerScriptUpdateUsageModel
     * @param body  (required)
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workerScriptUpdateUsageModelCall(Object body, String scriptName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/workers/scripts/{script_name}/usage-model"
            .replaceAll("\\{" + "script_name" + "\\}", apiClient.escapeString(scriptName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workerScriptUpdateUsageModelValidateBeforeCall(Object body, String scriptName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workerScriptUpdateUsageModel(Async)");
        }
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptUpdateUsageModel(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workerScriptUpdateUsageModel(Async)");
        }
        
        com.squareup.okhttp.Call call = workerScriptUpdateUsageModelCall(body, scriptName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Usage Model
     * Updates the Usage Model for a given Worker. Requires a Workers Paid subscription.
     * @param body  (required)
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @return UsageModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UsageModelResponse workerScriptUpdateUsageModel(Object body, String scriptName, String accountIdentifier) throws ApiException {
        ApiResponse<UsageModelResponse> resp = workerScriptUpdateUsageModelWithHttpInfo(body, scriptName, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update Usage Model
     * Updates the Usage Model for a given Worker. Requires a Workers Paid subscription.
     * @param body  (required)
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;UsageModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UsageModelResponse> workerScriptUpdateUsageModelWithHttpInfo(Object body, String scriptName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workerScriptUpdateUsageModelValidateBeforeCall(body, scriptName, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<UsageModelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Usage Model (asynchronously)
     * Updates the Usage Model for a given Worker. Requires a Workers Paid subscription.
     * @param body  (required)
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workerScriptUpdateUsageModelAsync(Object body, String scriptName, String accountIdentifier, final ApiCallback<UsageModelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workerScriptUpdateUsageModelValidateBeforeCall(body, scriptName, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UsageModelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workerScriptUploadWorkerModule
     * @param secondFileJs  (required)
     * @param workerJs  (required)
     * @param metadata  (required)
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workerScriptUploadWorkerModuleCall(String secondFileJs, String workerJs, String metadata, String scriptName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/workers/scripts/{script_name}"
            .replaceAll("\\{" + "script_name" + "\\}", apiClient.escapeString(scriptName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (secondFileJs != null)
        localVarFormParams.put("&quot;second-file.js&quot;", secondFileJs);
        if (workerJs != null)
        localVarFormParams.put("&quot;worker.js&quot;", workerJs);
        if (metadata != null)
        localVarFormParams.put("metadata", metadata);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workerScriptUploadWorkerModuleValidateBeforeCall(String secondFileJs, String workerJs, String metadata, String scriptName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'secondFileJs' is set
        if (secondFileJs == null) {
            throw new ApiException("Missing the required parameter 'secondFileJs' when calling workerScriptUploadWorkerModule(Async)");
        }
        // verify the required parameter 'workerJs' is set
        if (workerJs == null) {
            throw new ApiException("Missing the required parameter 'workerJs' when calling workerScriptUploadWorkerModule(Async)");
        }
        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling workerScriptUploadWorkerModule(Async)");
        }
        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling workerScriptUploadWorkerModule(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workerScriptUploadWorkerModule(Async)");
        }
        
        com.squareup.okhttp.Call call = workerScriptUploadWorkerModuleCall(secondFileJs, workerJs, metadata, scriptName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload Worker Module
     * Upload a worker module.
     * @param secondFileJs  (required)
     * @param workerJs  (required)
     * @param metadata  (required)
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object workerScriptUploadWorkerModule(String secondFileJs, String workerJs, String metadata, String scriptName, String accountIdentifier) throws ApiException {
        ApiResponse<Object> resp = workerScriptUploadWorkerModuleWithHttpInfo(secondFileJs, workerJs, metadata, scriptName, accountIdentifier);
        return resp.getData();
    }

    /**
     * Upload Worker Module
     * Upload a worker module.
     * @param secondFileJs  (required)
     * @param workerJs  (required)
     * @param metadata  (required)
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> workerScriptUploadWorkerModuleWithHttpInfo(String secondFileJs, String workerJs, String metadata, String scriptName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workerScriptUploadWorkerModuleValidateBeforeCall(secondFileJs, workerJs, metadata, scriptName, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload Worker Module (asynchronously)
     * Upload a worker module.
     * @param secondFileJs  (required)
     * @param workerJs  (required)
     * @param metadata  (required)
     * @param scriptName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workerScriptUploadWorkerModuleAsync(String secondFileJs, String workerJs, String metadata, String scriptName, String accountIdentifier, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workerScriptUploadWorkerModuleValidateBeforeCall(secondFileJs, workerJs, metadata, scriptName, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
