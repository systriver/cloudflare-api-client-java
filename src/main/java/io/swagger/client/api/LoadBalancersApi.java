/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.IdentifierLoadBalancersBody;
import io.swagger.client.model.InlineResponse4xx320;
import io.swagger.client.model.InlineResponse4xx321;
import io.swagger.client.model.InlineResponse4xx325;
import io.swagger.client.model.LoadBalancerComponentsSchemasIdResponse;
import io.swagger.client.model.LoadBalancerComponentsSchemasIdentifier;
import io.swagger.client.model.LoadBalancerComponentsSchemasResponseCollection;
import io.swagger.client.model.LoadBalancerComponentsSchemasSingleResponse;
import io.swagger.client.model.LoadBalancersIdentifierBody;
import io.swagger.client.model.LoadBalancersIdentifierBody1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoadBalancersApi {
    private ApiClient apiClient;

    public LoadBalancersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoadBalancersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for loadBalancersCreateLoadBalancer
     * @param body  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loadBalancersCreateLoadBalancerCall(IdentifierLoadBalancersBody body, LoadBalancerComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/load_balancers"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loadBalancersCreateLoadBalancerValidateBeforeCall(IdentifierLoadBalancersBody body, LoadBalancerComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling loadBalancersCreateLoadBalancer(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling loadBalancersCreateLoadBalancer(Async)");
        }
        
        com.squareup.okhttp.Call call = loadBalancersCreateLoadBalancerCall(body, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Load Balancer
     * Create a new load balancer.
     * @param body  (required)
     * @param identifier  (required)
     * @return LoadBalancerComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoadBalancerComponentsSchemasSingleResponse loadBalancersCreateLoadBalancer(IdentifierLoadBalancersBody body, LoadBalancerComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<LoadBalancerComponentsSchemasSingleResponse> resp = loadBalancersCreateLoadBalancerWithHttpInfo(body, identifier);
        return resp.getData();
    }

    /**
     * Create Load Balancer
     * Create a new load balancer.
     * @param body  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;LoadBalancerComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoadBalancerComponentsSchemasSingleResponse> loadBalancersCreateLoadBalancerWithHttpInfo(IdentifierLoadBalancersBody body, LoadBalancerComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = loadBalancersCreateLoadBalancerValidateBeforeCall(body, identifier, null, null);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Load Balancer (asynchronously)
     * Create a new load balancer.
     * @param body  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loadBalancersCreateLoadBalancerAsync(IdentifierLoadBalancersBody body, LoadBalancerComponentsSchemasIdentifier identifier, final ApiCallback<LoadBalancerComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loadBalancersCreateLoadBalancerValidateBeforeCall(body, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loadBalancersDeleteLoadBalancer
     * @param identifier  (required)
     * @param identifier1  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loadBalancersDeleteLoadBalancerCall(LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier1}/load_balancers/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "identifier1" + "\\}", apiClient.escapeString(identifier1.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loadBalancersDeleteLoadBalancerValidateBeforeCall(LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling loadBalancersDeleteLoadBalancer(Async)");
        }
        // verify the required parameter 'identifier1' is set
        if (identifier1 == null) {
            throw new ApiException("Missing the required parameter 'identifier1' when calling loadBalancersDeleteLoadBalancer(Async)");
        }
        
        com.squareup.okhttp.Call call = loadBalancersDeleteLoadBalancerCall(identifier, identifier1, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Load Balancer
     * Delete a configured load balancer.
     * @param identifier  (required)
     * @param identifier1  (required)
     * @return LoadBalancerComponentsSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoadBalancerComponentsSchemasIdResponse loadBalancersDeleteLoadBalancer(LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1) throws ApiException {
        ApiResponse<LoadBalancerComponentsSchemasIdResponse> resp = loadBalancersDeleteLoadBalancerWithHttpInfo(identifier, identifier1);
        return resp.getData();
    }

    /**
     * Delete Load Balancer
     * Delete a configured load balancer.
     * @param identifier  (required)
     * @param identifier1  (required)
     * @return ApiResponse&lt;LoadBalancerComponentsSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoadBalancerComponentsSchemasIdResponse> loadBalancersDeleteLoadBalancerWithHttpInfo(LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1) throws ApiException {
        com.squareup.okhttp.Call call = loadBalancersDeleteLoadBalancerValidateBeforeCall(identifier, identifier1, null, null);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Load Balancer (asynchronously)
     * Delete a configured load balancer.
     * @param identifier  (required)
     * @param identifier1  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loadBalancersDeleteLoadBalancerAsync(LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ApiCallback<LoadBalancerComponentsSchemasIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loadBalancersDeleteLoadBalancerValidateBeforeCall(identifier, identifier1, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loadBalancersListLoadBalancers
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loadBalancersListLoadBalancersCall(LoadBalancerComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier}/load_balancers"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loadBalancersListLoadBalancersValidateBeforeCall(LoadBalancerComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling loadBalancersListLoadBalancers(Async)");
        }
        
        com.squareup.okhttp.Call call = loadBalancersListLoadBalancersCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Load Balancers
     * List configured load balancers.
     * @param identifier  (required)
     * @return LoadBalancerComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoadBalancerComponentsSchemasResponseCollection loadBalancersListLoadBalancers(LoadBalancerComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<LoadBalancerComponentsSchemasResponseCollection> resp = loadBalancersListLoadBalancersWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * List Load Balancers
     * List configured load balancers.
     * @param identifier  (required)
     * @return ApiResponse&lt;LoadBalancerComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoadBalancerComponentsSchemasResponseCollection> loadBalancersListLoadBalancersWithHttpInfo(LoadBalancerComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = loadBalancersListLoadBalancersValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Load Balancers (asynchronously)
     * List configured load balancers.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loadBalancersListLoadBalancersAsync(LoadBalancerComponentsSchemasIdentifier identifier, final ApiCallback<LoadBalancerComponentsSchemasResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loadBalancersListLoadBalancersValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loadBalancersLoadBalancerDetails
     * @param identifier  (required)
     * @param identifier1  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loadBalancersLoadBalancerDetailsCall(LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier1}/load_balancers/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "identifier1" + "\\}", apiClient.escapeString(identifier1.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loadBalancersLoadBalancerDetailsValidateBeforeCall(LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling loadBalancersLoadBalancerDetails(Async)");
        }
        // verify the required parameter 'identifier1' is set
        if (identifier1 == null) {
            throw new ApiException("Missing the required parameter 'identifier1' when calling loadBalancersLoadBalancerDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = loadBalancersLoadBalancerDetailsCall(identifier, identifier1, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Load Balancer Details
     * Fetch a single configured load balancer.
     * @param identifier  (required)
     * @param identifier1  (required)
     * @return LoadBalancerComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoadBalancerComponentsSchemasSingleResponse loadBalancersLoadBalancerDetails(LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1) throws ApiException {
        ApiResponse<LoadBalancerComponentsSchemasSingleResponse> resp = loadBalancersLoadBalancerDetailsWithHttpInfo(identifier, identifier1);
        return resp.getData();
    }

    /**
     * Load Balancer Details
     * Fetch a single configured load balancer.
     * @param identifier  (required)
     * @param identifier1  (required)
     * @return ApiResponse&lt;LoadBalancerComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoadBalancerComponentsSchemasSingleResponse> loadBalancersLoadBalancerDetailsWithHttpInfo(LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1) throws ApiException {
        com.squareup.okhttp.Call call = loadBalancersLoadBalancerDetailsValidateBeforeCall(identifier, identifier1, null, null);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Load Balancer Details (asynchronously)
     * Fetch a single configured load balancer.
     * @param identifier  (required)
     * @param identifier1  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loadBalancersLoadBalancerDetailsAsync(LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ApiCallback<LoadBalancerComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loadBalancersLoadBalancerDetailsValidateBeforeCall(identifier, identifier1, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loadBalancersPatchLoadBalancer
     * @param body  (required)
     * @param identifier  (required)
     * @param identifier1  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loadBalancersPatchLoadBalancerCall(LoadBalancersIdentifierBody1 body, LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier1}/load_balancers/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "identifier1" + "\\}", apiClient.escapeString(identifier1.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loadBalancersPatchLoadBalancerValidateBeforeCall(LoadBalancersIdentifierBody1 body, LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling loadBalancersPatchLoadBalancer(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling loadBalancersPatchLoadBalancer(Async)");
        }
        // verify the required parameter 'identifier1' is set
        if (identifier1 == null) {
            throw new ApiException("Missing the required parameter 'identifier1' when calling loadBalancersPatchLoadBalancer(Async)");
        }
        
        com.squareup.okhttp.Call call = loadBalancersPatchLoadBalancerCall(body, identifier, identifier1, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Patch Load Balancer
     * Apply changes to an existing load balancer, overwriting the supplied properties.
     * @param body  (required)
     * @param identifier  (required)
     * @param identifier1  (required)
     * @return LoadBalancerComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoadBalancerComponentsSchemasSingleResponse loadBalancersPatchLoadBalancer(LoadBalancersIdentifierBody1 body, LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1) throws ApiException {
        ApiResponse<LoadBalancerComponentsSchemasSingleResponse> resp = loadBalancersPatchLoadBalancerWithHttpInfo(body, identifier, identifier1);
        return resp.getData();
    }

    /**
     * Patch Load Balancer
     * Apply changes to an existing load balancer, overwriting the supplied properties.
     * @param body  (required)
     * @param identifier  (required)
     * @param identifier1  (required)
     * @return ApiResponse&lt;LoadBalancerComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoadBalancerComponentsSchemasSingleResponse> loadBalancersPatchLoadBalancerWithHttpInfo(LoadBalancersIdentifierBody1 body, LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1) throws ApiException {
        com.squareup.okhttp.Call call = loadBalancersPatchLoadBalancerValidateBeforeCall(body, identifier, identifier1, null, null);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Patch Load Balancer (asynchronously)
     * Apply changes to an existing load balancer, overwriting the supplied properties.
     * @param body  (required)
     * @param identifier  (required)
     * @param identifier1  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loadBalancersPatchLoadBalancerAsync(LoadBalancersIdentifierBody1 body, LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ApiCallback<LoadBalancerComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loadBalancersPatchLoadBalancerValidateBeforeCall(body, identifier, identifier1, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loadBalancersUpdateLoadBalancer
     * @param body  (required)
     * @param identifier  (required)
     * @param identifier1  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loadBalancersUpdateLoadBalancerCall(LoadBalancersIdentifierBody body, LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{identifier1}/load_balancers/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "identifier1" + "\\}", apiClient.escapeString(identifier1.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loadBalancersUpdateLoadBalancerValidateBeforeCall(LoadBalancersIdentifierBody body, LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling loadBalancersUpdateLoadBalancer(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling loadBalancersUpdateLoadBalancer(Async)");
        }
        // verify the required parameter 'identifier1' is set
        if (identifier1 == null) {
            throw new ApiException("Missing the required parameter 'identifier1' when calling loadBalancersUpdateLoadBalancer(Async)");
        }
        
        com.squareup.okhttp.Call call = loadBalancersUpdateLoadBalancerCall(body, identifier, identifier1, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Load Balancer
     * Update a configured load balancer.
     * @param body  (required)
     * @param identifier  (required)
     * @param identifier1  (required)
     * @return LoadBalancerComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoadBalancerComponentsSchemasSingleResponse loadBalancersUpdateLoadBalancer(LoadBalancersIdentifierBody body, LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1) throws ApiException {
        ApiResponse<LoadBalancerComponentsSchemasSingleResponse> resp = loadBalancersUpdateLoadBalancerWithHttpInfo(body, identifier, identifier1);
        return resp.getData();
    }

    /**
     * Update Load Balancer
     * Update a configured load balancer.
     * @param body  (required)
     * @param identifier  (required)
     * @param identifier1  (required)
     * @return ApiResponse&lt;LoadBalancerComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoadBalancerComponentsSchemasSingleResponse> loadBalancersUpdateLoadBalancerWithHttpInfo(LoadBalancersIdentifierBody body, LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1) throws ApiException {
        com.squareup.okhttp.Call call = loadBalancersUpdateLoadBalancerValidateBeforeCall(body, identifier, identifier1, null, null);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Load Balancer (asynchronously)
     * Update a configured load balancer.
     * @param body  (required)
     * @param identifier  (required)
     * @param identifier1  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loadBalancersUpdateLoadBalancerAsync(LoadBalancersIdentifierBody body, LoadBalancerComponentsSchemasIdentifier identifier, LoadBalancerComponentsSchemasIdentifier identifier1, final ApiCallback<LoadBalancerComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loadBalancersUpdateLoadBalancerValidateBeforeCall(body, identifier, identifier1, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoadBalancerComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
