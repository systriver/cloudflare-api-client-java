/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ComponentsSchemasCertificateResponseSingle;
import io.swagger.client.model.HostnameAopResponseCollection;
import io.swagger.client.model.HostnameAopSingleResponse;
import io.swagger.client.model.HostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection;
import io.swagger.client.model.HostnamesCertificatesBody;
import io.swagger.client.model.InlineResponse4xx399;
import io.swagger.client.model.InlineResponse4xx400;
import io.swagger.client.model.InlineResponse4xx401;
import io.swagger.client.model.InlineResponse4xx402;
import io.swagger.client.model.OriginTlsClientAuthHostnamesBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PerHostnameAuthenticatedOriginPullApi {
    private ApiClient apiClient;

    public PerHostnameAuthenticatedOriginPullApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PerHostnameAuthenticatedOriginPullApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/origin_tls_client_auth/hostnames/certificates/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateValidateBeforeCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(Async)");
        }
        
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Hostname Client Certificate
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ComponentsSchemasCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentsSchemasCertificateResponseSingle perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<ComponentsSchemasCertificateResponseSingle> resp = perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateWithHttpInfo(identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Delete Hostname Client Certificate
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ComponentsSchemasCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentsSchemasCertificateResponseSingle> perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateValidateBeforeCall(identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ComponentsSchemasCertificateResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Hostname Client Certificate (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateAsync(String identifier, String zoneIdentifier, final ApiCallback<ComponentsSchemasCertificateResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificateValidateBeforeCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentsSchemasCertificateResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationCall(OriginTlsClientAuthHostnamesBody body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/origin_tls_client_auth/hostnames"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationValidateBeforeCall(OriginTlsClientAuthHostnamesBody body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(Async)");
        }
        
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable or Disable a Hostname for Client Authentication
     * Associate a hostname to a certificate and enable, disable or invalidate the association. If disabled, client certificate will not be sent to the hostname even if activated at the zone level. 100 maximum associations on a single certificate are allowed. Note: Use a null value for parameter *enabled* to invalidate the association.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return HostnameAopResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostnameAopResponseCollection perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(OriginTlsClientAuthHostnamesBody body, String zoneIdentifier) throws ApiException {
        ApiResponse<HostnameAopResponseCollection> resp = perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Enable or Disable a Hostname for Client Authentication
     * Associate a hostname to a certificate and enable, disable or invalidate the association. If disabled, client certificate will not be sent to the hostname even if activated at the zone level. 100 maximum associations on a single certificate are allowed. Note: Use a null value for parameter *enabled* to invalidate the association.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;HostnameAopResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostnameAopResponseCollection> perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationWithHttpInfo(OriginTlsClientAuthHostnamesBody body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<HostnameAopResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable or Disable a Hostname for Client Authentication (asynchronously)
     * Associate a hostname to a certificate and enable, disable or invalidate the association. If disabled, client certificate will not be sent to the hostname even if activated at the zone level. 100 maximum associations on a single certificate are allowed. Note: Use a null value for parameter *enabled* to invalidate the association.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationAsync(OriginTlsClientAuthHostnamesBody body, String zoneIdentifier, final ApiCallback<HostnameAopResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthenticationValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostnameAopResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/origin_tls_client_auth/hostnames/certificates/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateValidateBeforeCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(Async)");
        }
        
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Hostname Client Certificate
     * Get the certificate by ID to be used for client authentication on a hostname.
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ComponentsSchemasCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentsSchemasCertificateResponseSingle perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<ComponentsSchemasCertificateResponseSingle> resp = perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateWithHttpInfo(identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Get the Hostname Client Certificate
     * Get the certificate by ID to be used for client authentication on a hostname.
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ComponentsSchemasCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentsSchemasCertificateResponseSingle> perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateValidateBeforeCall(identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ComponentsSchemasCertificateResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Hostname Client Certificate (asynchronously)
     * Get the certificate by ID to be used for client authentication on a hostname.
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateAsync(String identifier, String zoneIdentifier, final ApiCallback<ComponentsSchemasCertificateResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificateValidateBeforeCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentsSchemasCertificateResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication
     * @param hostname  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationCall(String hostname, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/origin_tls_client_auth/hostnames/{hostname}"
            .replaceAll("\\{" + "hostname" + "\\}", apiClient.escapeString(hostname.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationValidateBeforeCall(String hostname, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'hostname' is set
        if (hostname == null) {
            throw new ApiException("Missing the required parameter 'hostname' when calling perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(Async)");
        }
        
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationCall(hostname, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Hostname Status for Client Authentication
     * 
     * @param hostname  (required)
     * @param zoneIdentifier  (required)
     * @return HostnameAopSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostnameAopSingleResponse perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(String hostname, String zoneIdentifier) throws ApiException {
        ApiResponse<HostnameAopSingleResponse> resp = perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationWithHttpInfo(hostname, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Get the Hostname Status for Client Authentication
     * 
     * @param hostname  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;HostnameAopSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostnameAopSingleResponse> perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationWithHttpInfo(String hostname, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationValidateBeforeCall(hostname, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<HostnameAopSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Hostname Status for Client Authentication (asynchronously)
     * 
     * @param hostname  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationAsync(String hostname, String zoneIdentifier, final ApiCallback<HostnameAopSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthenticationValidateBeforeCall(hostname, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostnameAopSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for perHostnameAuthenticatedOriginPullListCertificates
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullListCertificatesCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/origin_tls_client_auth/hostnames/certificates"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullListCertificatesValidateBeforeCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling perHostnameAuthenticatedOriginPullListCertificates(Async)");
        }
        
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullListCertificatesCall(zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Certificates
     * 
     * @param zoneIdentifier  (required)
     * @return HostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection perHostnameAuthenticatedOriginPullListCertificates(String zoneIdentifier) throws ApiException {
        ApiResponse<HostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection> resp = perHostnameAuthenticatedOriginPullListCertificatesWithHttpInfo(zoneIdentifier);
        return resp.getData();
    }

    /**
     * List Certificates
     * 
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;HostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection> perHostnameAuthenticatedOriginPullListCertificatesWithHttpInfo(String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullListCertificatesValidateBeforeCall(zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<HostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Certificates (asynchronously)
     * 
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullListCertificatesAsync(String zoneIdentifier, final ApiCallback<HostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullListCertificatesValidateBeforeCall(zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateCall(HostnamesCertificatesBody body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/origin_tls_client_auth/hostnames/certificates"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateValidateBeforeCall(HostnamesCertificatesBody body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(Async)");
        }
        
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload a Hostname Client Certificate
     * Upload a certificate to be used for client authentication on a hostname. 10 hostname certificates per zone are allowed.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ComponentsSchemasCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentsSchemasCertificateResponseSingle perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(HostnamesCertificatesBody body, String zoneIdentifier) throws ApiException {
        ApiResponse<ComponentsSchemasCertificateResponseSingle> resp = perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Upload a Hostname Client Certificate
     * Upload a certificate to be used for client authentication on a hostname. 10 hostname certificates per zone are allowed.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ComponentsSchemasCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentsSchemasCertificateResponseSingle> perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateWithHttpInfo(HostnamesCertificatesBody body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ComponentsSchemasCertificateResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload a Hostname Client Certificate (asynchronously)
     * Upload a certificate to be used for client authentication on a hostname. 10 hostname certificates per zone are allowed.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateAsync(HostnamesCertificatesBody body, String zoneIdentifier, final ApiCallback<ComponentsSchemasCertificateResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificateValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentsSchemasCertificateResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
