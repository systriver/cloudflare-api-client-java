/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateRuleset;
import io.swagger.client.model.CreateUpdateRule;
import io.swagger.client.model.InlineResponse4xx196;
import io.swagger.client.model.InlineResponse4xx197;
import io.swagger.client.model.RulesetResponse;
import io.swagger.client.model.RulesetsResponse;
import io.swagger.client.model.UpdateRuleset;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneRulesetsApi {
    private ApiClient apiClient;

    public ZoneRulesetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneRulesetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for zoneRulesetsCreateAZoneRuleset
     * @param body  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsCreateAZoneRulesetCall(CreateRuleset body, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets"
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsCreateAZoneRulesetValidateBeforeCall(CreateRuleset body, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zoneRulesetsCreateAZoneRuleset(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsCreateAZoneRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsCreateAZoneRulesetCall(body, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a zone ruleset
     * Creates a ruleset at the zone level.
     * @param body  (required)
     * @param zoneId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse zoneRulesetsCreateAZoneRuleset(CreateRuleset body, String zoneId) throws ApiException {
        ApiResponse<RulesetResponse> resp = zoneRulesetsCreateAZoneRulesetWithHttpInfo(body, zoneId);
        return resp.getData();
    }

    /**
     * Create a zone ruleset
     * Creates a ruleset at the zone level.
     * @param body  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> zoneRulesetsCreateAZoneRulesetWithHttpInfo(CreateRuleset body, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsCreateAZoneRulesetValidateBeforeCall(body, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a zone ruleset (asynchronously)
     * Creates a ruleset at the zone level.
     * @param body  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsCreateAZoneRulesetAsync(CreateRuleset body, String zoneId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsCreateAZoneRulesetValidateBeforeCall(body, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsCreateAZoneRulesetRule
     * @param body  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsCreateAZoneRulesetRuleCall(CreateUpdateRule body, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/rules"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsCreateAZoneRulesetRuleValidateBeforeCall(CreateUpdateRule body, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zoneRulesetsCreateAZoneRulesetRule(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling zoneRulesetsCreateAZoneRulesetRule(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsCreateAZoneRulesetRule(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsCreateAZoneRulesetRuleCall(body, rulesetId, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a zone ruleset rule
     * Adds a new rule to a zone ruleset. The rule will be added to the end of the existing list of rules in the ruleset.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse zoneRulesetsCreateAZoneRulesetRule(CreateUpdateRule body, String rulesetId, String zoneId) throws ApiException {
        ApiResponse<RulesetResponse> resp = zoneRulesetsCreateAZoneRulesetRuleWithHttpInfo(body, rulesetId, zoneId);
        return resp.getData();
    }

    /**
     * Create a zone ruleset rule
     * Adds a new rule to a zone ruleset. The rule will be added to the end of the existing list of rules in the ruleset.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> zoneRulesetsCreateAZoneRulesetRuleWithHttpInfo(CreateUpdateRule body, String rulesetId, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsCreateAZoneRulesetRuleValidateBeforeCall(body, rulesetId, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a zone ruleset rule (asynchronously)
     * Adds a new rule to a zone ruleset. The rule will be added to the end of the existing list of rules in the ruleset.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsCreateAZoneRulesetRuleAsync(CreateUpdateRule body, String rulesetId, String zoneId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsCreateAZoneRulesetRuleValidateBeforeCall(body, rulesetId, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsDeleteAZoneRuleset
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsDeleteAZoneRulesetCall(String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsDeleteAZoneRulesetValidateBeforeCall(String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling zoneRulesetsDeleteAZoneRuleset(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsDeleteAZoneRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsDeleteAZoneRulesetCall(rulesetId, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a zone ruleset
     * Deletes all versions of an existing zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void zoneRulesetsDeleteAZoneRuleset(String rulesetId, String zoneId) throws ApiException {
        zoneRulesetsDeleteAZoneRulesetWithHttpInfo(rulesetId, zoneId);
    }

    /**
     * Delete a zone ruleset
     * Deletes all versions of an existing zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> zoneRulesetsDeleteAZoneRulesetWithHttpInfo(String rulesetId, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsDeleteAZoneRulesetValidateBeforeCall(rulesetId, zoneId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a zone ruleset (asynchronously)
     * Deletes all versions of an existing zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsDeleteAZoneRulesetAsync(String rulesetId, String zoneId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsDeleteAZoneRulesetValidateBeforeCall(rulesetId, zoneId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsDeleteAZoneRulesetRule
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsDeleteAZoneRulesetRuleCall(String ruleId, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/rules/{rule_id}"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()))
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsDeleteAZoneRulesetRuleValidateBeforeCall(String ruleId, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling zoneRulesetsDeleteAZoneRulesetRule(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling zoneRulesetsDeleteAZoneRulesetRule(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsDeleteAZoneRulesetRule(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsDeleteAZoneRulesetRuleCall(ruleId, rulesetId, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a zone ruleset rule
     * Deletes an existing rule from a zone ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse zoneRulesetsDeleteAZoneRulesetRule(String ruleId, String rulesetId, String zoneId) throws ApiException {
        ApiResponse<RulesetResponse> resp = zoneRulesetsDeleteAZoneRulesetRuleWithHttpInfo(ruleId, rulesetId, zoneId);
        return resp.getData();
    }

    /**
     * Delete a zone ruleset rule
     * Deletes an existing rule from a zone ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> zoneRulesetsDeleteAZoneRulesetRuleWithHttpInfo(String ruleId, String rulesetId, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsDeleteAZoneRulesetRuleValidateBeforeCall(ruleId, rulesetId, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a zone ruleset rule (asynchronously)
     * Deletes an existing rule from a zone ruleset.
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsDeleteAZoneRulesetRuleAsync(String ruleId, String rulesetId, String zoneId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsDeleteAZoneRulesetRuleValidateBeforeCall(ruleId, rulesetId, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsDeleteAZoneRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsDeleteAZoneRulesetVersionCall(String rulesetVersion, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/versions/{ruleset_version}"
            .replaceAll("\\{" + "ruleset_version" + "\\}", apiClient.escapeString(rulesetVersion.toString()))
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsDeleteAZoneRulesetVersionValidateBeforeCall(String rulesetVersion, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling zoneRulesetsDeleteAZoneRulesetVersion(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling zoneRulesetsDeleteAZoneRulesetVersion(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsDeleteAZoneRulesetVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsDeleteAZoneRulesetVersionCall(rulesetVersion, rulesetId, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a zone ruleset version
     * Deletes an existing version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void zoneRulesetsDeleteAZoneRulesetVersion(String rulesetVersion, String rulesetId, String zoneId) throws ApiException {
        zoneRulesetsDeleteAZoneRulesetVersionWithHttpInfo(rulesetVersion, rulesetId, zoneId);
    }

    /**
     * Delete a zone ruleset version
     * Deletes an existing version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> zoneRulesetsDeleteAZoneRulesetVersionWithHttpInfo(String rulesetVersion, String rulesetId, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsDeleteAZoneRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, zoneId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a zone ruleset version (asynchronously)
     * Deletes an existing version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsDeleteAZoneRulesetVersionAsync(String rulesetVersion, String rulesetId, String zoneId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsDeleteAZoneRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, zoneId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsGetAZoneEntryPointRuleset
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsGetAZoneEntryPointRulesetCall(String rulesetPhase, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint"
            .replaceAll("\\{" + "ruleset_phase" + "\\}", apiClient.escapeString(rulesetPhase.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsGetAZoneEntryPointRulesetValidateBeforeCall(String rulesetPhase, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling zoneRulesetsGetAZoneEntryPointRuleset(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsGetAZoneEntryPointRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneEntryPointRulesetCall(rulesetPhase, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a zone entry point ruleset
     * Fetches the latest version of the zone entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse zoneRulesetsGetAZoneEntryPointRuleset(String rulesetPhase, String zoneId) throws ApiException {
        ApiResponse<RulesetResponse> resp = zoneRulesetsGetAZoneEntryPointRulesetWithHttpInfo(rulesetPhase, zoneId);
        return resp.getData();
    }

    /**
     * Get a zone entry point ruleset
     * Fetches the latest version of the zone entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> zoneRulesetsGetAZoneEntryPointRulesetWithHttpInfo(String rulesetPhase, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneEntryPointRulesetValidateBeforeCall(rulesetPhase, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a zone entry point ruleset (asynchronously)
     * Fetches the latest version of the zone entry point ruleset for a given phase.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsGetAZoneEntryPointRulesetAsync(String rulesetPhase, String zoneId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneEntryPointRulesetValidateBeforeCall(rulesetPhase, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsGetAZoneEntryPointRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsGetAZoneEntryPointRulesetVersionCall(String rulesetVersion, String rulesetPhase, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions/{ruleset_version}"
            .replaceAll("\\{" + "ruleset_version" + "\\}", apiClient.escapeString(rulesetVersion.toString()))
            .replaceAll("\\{" + "ruleset_phase" + "\\}", apiClient.escapeString(rulesetPhase.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsGetAZoneEntryPointRulesetVersionValidateBeforeCall(String rulesetVersion, String rulesetPhase, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling zoneRulesetsGetAZoneEntryPointRulesetVersion(Async)");
        }
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling zoneRulesetsGetAZoneEntryPointRulesetVersion(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsGetAZoneEntryPointRulesetVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneEntryPointRulesetVersionCall(rulesetVersion, rulesetPhase, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a zone entry point ruleset version
     * Fetches a specific version of a zone entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse zoneRulesetsGetAZoneEntryPointRulesetVersion(String rulesetVersion, String rulesetPhase, String zoneId) throws ApiException {
        ApiResponse<RulesetResponse> resp = zoneRulesetsGetAZoneEntryPointRulesetVersionWithHttpInfo(rulesetVersion, rulesetPhase, zoneId);
        return resp.getData();
    }

    /**
     * Get a zone entry point ruleset version
     * Fetches a specific version of a zone entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> zoneRulesetsGetAZoneEntryPointRulesetVersionWithHttpInfo(String rulesetVersion, String rulesetPhase, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneEntryPointRulesetVersionValidateBeforeCall(rulesetVersion, rulesetPhase, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a zone entry point ruleset version (asynchronously)
     * Fetches a specific version of a zone entry point ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsGetAZoneEntryPointRulesetVersionAsync(String rulesetVersion, String rulesetPhase, String zoneId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneEntryPointRulesetVersionValidateBeforeCall(rulesetVersion, rulesetPhase, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsGetAZoneRuleset
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsGetAZoneRulesetCall(String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsGetAZoneRulesetValidateBeforeCall(String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling zoneRulesetsGetAZoneRuleset(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsGetAZoneRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneRulesetCall(rulesetId, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a zone ruleset
     * Fetches the latest version of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse zoneRulesetsGetAZoneRuleset(String rulesetId, String zoneId) throws ApiException {
        ApiResponse<RulesetResponse> resp = zoneRulesetsGetAZoneRulesetWithHttpInfo(rulesetId, zoneId);
        return resp.getData();
    }

    /**
     * Get a zone ruleset
     * Fetches the latest version of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> zoneRulesetsGetAZoneRulesetWithHttpInfo(String rulesetId, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneRulesetValidateBeforeCall(rulesetId, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a zone ruleset (asynchronously)
     * Fetches the latest version of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsGetAZoneRulesetAsync(String rulesetId, String zoneId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneRulesetValidateBeforeCall(rulesetId, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsGetAZoneRulesetVersion
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsGetAZoneRulesetVersionCall(String rulesetVersion, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/versions/{ruleset_version}"
            .replaceAll("\\{" + "ruleset_version" + "\\}", apiClient.escapeString(rulesetVersion.toString()))
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsGetAZoneRulesetVersionValidateBeforeCall(String rulesetVersion, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetVersion' is set
        if (rulesetVersion == null) {
            throw new ApiException("Missing the required parameter 'rulesetVersion' when calling zoneRulesetsGetAZoneRulesetVersion(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling zoneRulesetsGetAZoneRulesetVersion(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsGetAZoneRulesetVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneRulesetVersionCall(rulesetVersion, rulesetId, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a zone ruleset version
     * Fetches a specific version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse zoneRulesetsGetAZoneRulesetVersion(String rulesetVersion, String rulesetId, String zoneId) throws ApiException {
        ApiResponse<RulesetResponse> resp = zoneRulesetsGetAZoneRulesetVersionWithHttpInfo(rulesetVersion, rulesetId, zoneId);
        return resp.getData();
    }

    /**
     * Get a zone ruleset version
     * Fetches a specific version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> zoneRulesetsGetAZoneRulesetVersionWithHttpInfo(String rulesetVersion, String rulesetId, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a zone ruleset version (asynchronously)
     * Fetches a specific version of a zone ruleset.
     * @param rulesetVersion  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsGetAZoneRulesetVersionAsync(String rulesetVersion, String rulesetId, String zoneId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsGetAZoneRulesetVersionValidateBeforeCall(rulesetVersion, rulesetId, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsListAZoneEntryPointRulesetSVersions
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsListAZoneEntryPointRulesetSVersionsCall(String rulesetPhase, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions"
            .replaceAll("\\{" + "ruleset_phase" + "\\}", apiClient.escapeString(rulesetPhase.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsListAZoneEntryPointRulesetSVersionsValidateBeforeCall(String rulesetPhase, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling zoneRulesetsListAZoneEntryPointRulesetSVersions(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsListAZoneEntryPointRulesetSVersions(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsListAZoneEntryPointRulesetSVersionsCall(rulesetPhase, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List a zone entry point ruleset&#x27;s versions
     * Fetches the versions of a zone entry point ruleset.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return RulesetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetsResponse zoneRulesetsListAZoneEntryPointRulesetSVersions(String rulesetPhase, String zoneId) throws ApiException {
        ApiResponse<RulesetsResponse> resp = zoneRulesetsListAZoneEntryPointRulesetSVersionsWithHttpInfo(rulesetPhase, zoneId);
        return resp.getData();
    }

    /**
     * List a zone entry point ruleset&#x27;s versions
     * Fetches the versions of a zone entry point ruleset.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetsResponse> zoneRulesetsListAZoneEntryPointRulesetSVersionsWithHttpInfo(String rulesetPhase, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsListAZoneEntryPointRulesetSVersionsValidateBeforeCall(rulesetPhase, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List a zone entry point ruleset&#x27;s versions (asynchronously)
     * Fetches the versions of a zone entry point ruleset.
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsListAZoneEntryPointRulesetSVersionsAsync(String rulesetPhase, String zoneId, final ApiCallback<RulesetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsListAZoneEntryPointRulesetSVersionsValidateBeforeCall(rulesetPhase, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsListAZoneRulesetSVersions
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsListAZoneRulesetSVersionsCall(String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/versions"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsListAZoneRulesetSVersionsValidateBeforeCall(String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling zoneRulesetsListAZoneRulesetSVersions(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsListAZoneRulesetSVersions(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsListAZoneRulesetSVersionsCall(rulesetId, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List a zone ruleset&#x27;s versions
     * Fetches the versions of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return RulesetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetsResponse zoneRulesetsListAZoneRulesetSVersions(String rulesetId, String zoneId) throws ApiException {
        ApiResponse<RulesetsResponse> resp = zoneRulesetsListAZoneRulesetSVersionsWithHttpInfo(rulesetId, zoneId);
        return resp.getData();
    }

    /**
     * List a zone ruleset&#x27;s versions
     * Fetches the versions of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetsResponse> zoneRulesetsListAZoneRulesetSVersionsWithHttpInfo(String rulesetId, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsListAZoneRulesetSVersionsValidateBeforeCall(rulesetId, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List a zone ruleset&#x27;s versions (asynchronously)
     * Fetches the versions of a zone ruleset.
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsListAZoneRulesetSVersionsAsync(String rulesetId, String zoneId, final ApiCallback<RulesetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsListAZoneRulesetSVersionsValidateBeforeCall(rulesetId, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsListZoneRulesets
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsListZoneRulesetsCall(String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets"
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsListZoneRulesetsValidateBeforeCall(String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsListZoneRulesets(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsListZoneRulesetsCall(zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List zone rulesets
     * Fetches all rulesets at the zone level.
     * @param zoneId  (required)
     * @return RulesetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetsResponse zoneRulesetsListZoneRulesets(String zoneId) throws ApiException {
        ApiResponse<RulesetsResponse> resp = zoneRulesetsListZoneRulesetsWithHttpInfo(zoneId);
        return resp.getData();
    }

    /**
     * List zone rulesets
     * Fetches all rulesets at the zone level.
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetsResponse> zoneRulesetsListZoneRulesetsWithHttpInfo(String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsListZoneRulesetsValidateBeforeCall(zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List zone rulesets (asynchronously)
     * Fetches all rulesets at the zone level.
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsListZoneRulesetsAsync(String zoneId, final ApiCallback<RulesetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsListZoneRulesetsValidateBeforeCall(zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsUpdateAZoneEntryPointRuleset
     * @param body  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsUpdateAZoneEntryPointRulesetCall(UpdateRuleset body, String rulesetPhase, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint"
            .replaceAll("\\{" + "ruleset_phase" + "\\}", apiClient.escapeString(rulesetPhase.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsUpdateAZoneEntryPointRulesetValidateBeforeCall(UpdateRuleset body, String rulesetPhase, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zoneRulesetsUpdateAZoneEntryPointRuleset(Async)");
        }
        // verify the required parameter 'rulesetPhase' is set
        if (rulesetPhase == null) {
            throw new ApiException("Missing the required parameter 'rulesetPhase' when calling zoneRulesetsUpdateAZoneEntryPointRuleset(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsUpdateAZoneEntryPointRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsUpdateAZoneEntryPointRulesetCall(body, rulesetPhase, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a zone entry point ruleset
     * Updates a zone entry point ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse zoneRulesetsUpdateAZoneEntryPointRuleset(UpdateRuleset body, String rulesetPhase, String zoneId) throws ApiException {
        ApiResponse<RulesetResponse> resp = zoneRulesetsUpdateAZoneEntryPointRulesetWithHttpInfo(body, rulesetPhase, zoneId);
        return resp.getData();
    }

    /**
     * Update a zone entry point ruleset
     * Updates a zone entry point ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> zoneRulesetsUpdateAZoneEntryPointRulesetWithHttpInfo(UpdateRuleset body, String rulesetPhase, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsUpdateAZoneEntryPointRulesetValidateBeforeCall(body, rulesetPhase, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a zone entry point ruleset (asynchronously)
     * Updates a zone entry point ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetPhase  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsUpdateAZoneEntryPointRulesetAsync(UpdateRuleset body, String rulesetPhase, String zoneId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsUpdateAZoneEntryPointRulesetValidateBeforeCall(body, rulesetPhase, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsUpdateAZoneRuleset
     * @param body  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsUpdateAZoneRulesetCall(UpdateRuleset body, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}"
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsUpdateAZoneRulesetValidateBeforeCall(UpdateRuleset body, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zoneRulesetsUpdateAZoneRuleset(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling zoneRulesetsUpdateAZoneRuleset(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsUpdateAZoneRuleset(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsUpdateAZoneRulesetCall(body, rulesetId, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a zone ruleset
     * Updates a zone ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse zoneRulesetsUpdateAZoneRuleset(UpdateRuleset body, String rulesetId, String zoneId) throws ApiException {
        ApiResponse<RulesetResponse> resp = zoneRulesetsUpdateAZoneRulesetWithHttpInfo(body, rulesetId, zoneId);
        return resp.getData();
    }

    /**
     * Update a zone ruleset
     * Updates a zone ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> zoneRulesetsUpdateAZoneRulesetWithHttpInfo(UpdateRuleset body, String rulesetId, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsUpdateAZoneRulesetValidateBeforeCall(body, rulesetId, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a zone ruleset (asynchronously)
     * Updates a zone ruleset, creating a new version.
     * @param body  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsUpdateAZoneRulesetAsync(UpdateRuleset body, String rulesetId, String zoneId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsUpdateAZoneRulesetValidateBeforeCall(body, rulesetId, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneRulesetsUpdateAZoneRulesetRule
     * @param body  (required)
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsUpdateAZoneRulesetRuleCall(CreateUpdateRule body, String ruleId, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/rulesets/{ruleset_id}/rules/{rule_id}"
            .replaceAll("\\{" + "rule_id" + "\\}", apiClient.escapeString(ruleId.toString()))
            .replaceAll("\\{" + "ruleset_id" + "\\}", apiClient.escapeString(rulesetId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneRulesetsUpdateAZoneRulesetRuleValidateBeforeCall(CreateUpdateRule body, String ruleId, String rulesetId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zoneRulesetsUpdateAZoneRulesetRule(Async)");
        }
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling zoneRulesetsUpdateAZoneRulesetRule(Async)");
        }
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling zoneRulesetsUpdateAZoneRulesetRule(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneRulesetsUpdateAZoneRulesetRule(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneRulesetsUpdateAZoneRulesetRuleCall(body, ruleId, rulesetId, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a zone ruleset rule
     * Updates an existing rule in a zone ruleset.
     * @param body  (required)
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return RulesetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RulesetResponse zoneRulesetsUpdateAZoneRulesetRule(CreateUpdateRule body, String ruleId, String rulesetId, String zoneId) throws ApiException {
        ApiResponse<RulesetResponse> resp = zoneRulesetsUpdateAZoneRulesetRuleWithHttpInfo(body, ruleId, rulesetId, zoneId);
        return resp.getData();
    }

    /**
     * Update a zone ruleset rule
     * Updates an existing rule in a zone ruleset.
     * @param body  (required)
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;RulesetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RulesetResponse> zoneRulesetsUpdateAZoneRulesetRuleWithHttpInfo(CreateUpdateRule body, String ruleId, String rulesetId, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = zoneRulesetsUpdateAZoneRulesetRuleValidateBeforeCall(body, ruleId, rulesetId, zoneId, null, null);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a zone ruleset rule (asynchronously)
     * Updates an existing rule in a zone ruleset.
     * @param body  (required)
     * @param ruleId  (required)
     * @param rulesetId  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneRulesetsUpdateAZoneRulesetRuleAsync(CreateUpdateRule body, String ruleId, String rulesetId, String zoneId, final ApiCallback<RulesetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneRulesetsUpdateAZoneRulesetRuleValidateBeforeCall(body, ruleId, rulesetId, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RulesetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
