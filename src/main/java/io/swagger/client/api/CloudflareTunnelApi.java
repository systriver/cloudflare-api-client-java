/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccountIdentifierCfdTunnelBody;
import io.swagger.client.model.CfdTunnelTunnelIdBody;
import io.swagger.client.model.CloudflareTunnelComponentsSchemasEmptyResponse;
import io.swagger.client.model.InlineResponse4xx17;
import io.swagger.client.model.InlineResponse4xx18;
import io.swagger.client.model.InlineResponse4xx20;
import io.swagger.client.model.InlineResponse4xx21;
import io.swagger.client.model.InlineResponse4xx22;
import io.swagger.client.model.SchemasTunnelResponseCollection;
import io.swagger.client.model.SchemasTunnelResponseSingle;
import io.swagger.client.model.TunnelConnectionsResponse;
import io.swagger.client.model.TunnelResponseToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudflareTunnelApi {
    private ApiClient apiClient;

    public CloudflareTunnelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudflareTunnelApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cloudflareTunnelCleanUpCloudflareTunnelConnections
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelCleanUpCloudflareTunnelConnectionsCall(Object body, String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cfd_tunnel/{tunnel_id}/connections"
            .replaceAll("\\{" + "tunnel_id" + "\\}", apiClient.escapeString(tunnelId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareTunnelCleanUpCloudflareTunnelConnectionsValidateBeforeCall(Object body, String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cloudflareTunnelCleanUpCloudflareTunnelConnections(Async)");
        }
        // verify the required parameter 'tunnelId' is set
        if (tunnelId == null) {
            throw new ApiException("Missing the required parameter 'tunnelId' when calling cloudflareTunnelCleanUpCloudflareTunnelConnections(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareTunnelCleanUpCloudflareTunnelConnections(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareTunnelCleanUpCloudflareTunnelConnectionsCall(body, tunnelId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clean up Cloudflare Tunnel connections
     * Removes connections that are in a disconnected or pending reconnect state. We recommend running this command after shutting down a tunnel.
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return CloudflareTunnelComponentsSchemasEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareTunnelComponentsSchemasEmptyResponse cloudflareTunnelCleanUpCloudflareTunnelConnections(Object body, String tunnelId, String accountIdentifier) throws ApiException {
        ApiResponse<CloudflareTunnelComponentsSchemasEmptyResponse> resp = cloudflareTunnelCleanUpCloudflareTunnelConnectionsWithHttpInfo(body, tunnelId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Clean up Cloudflare Tunnel connections
     * Removes connections that are in a disconnected or pending reconnect state. We recommend running this command after shutting down a tunnel.
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CloudflareTunnelComponentsSchemasEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareTunnelComponentsSchemasEmptyResponse> cloudflareTunnelCleanUpCloudflareTunnelConnectionsWithHttpInfo(Object body, String tunnelId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareTunnelCleanUpCloudflareTunnelConnectionsValidateBeforeCall(body, tunnelId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareTunnelComponentsSchemasEmptyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clean up Cloudflare Tunnel connections (asynchronously)
     * Removes connections that are in a disconnected or pending reconnect state. We recommend running this command after shutting down a tunnel.
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelCleanUpCloudflareTunnelConnectionsAsync(Object body, String tunnelId, String accountIdentifier, final ApiCallback<CloudflareTunnelComponentsSchemasEmptyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareTunnelCleanUpCloudflareTunnelConnectionsValidateBeforeCall(body, tunnelId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareTunnelComponentsSchemasEmptyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareTunnelCreateACloudflareTunnel
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelCreateACloudflareTunnelCall(AccountIdentifierCfdTunnelBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cfd_tunnel"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareTunnelCreateACloudflareTunnelValidateBeforeCall(AccountIdentifierCfdTunnelBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cloudflareTunnelCreateACloudflareTunnel(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareTunnelCreateACloudflareTunnel(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareTunnelCreateACloudflareTunnelCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Cloudflare Tunnel
     * Creates a new Cloudflare Tunnel in an account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return SchemasTunnelResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasTunnelResponseSingle cloudflareTunnelCreateACloudflareTunnel(AccountIdentifierCfdTunnelBody body, String accountIdentifier) throws ApiException {
        ApiResponse<SchemasTunnelResponseSingle> resp = cloudflareTunnelCreateACloudflareTunnelWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create a Cloudflare Tunnel
     * Creates a new Cloudflare Tunnel in an account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;SchemasTunnelResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasTunnelResponseSingle> cloudflareTunnelCreateACloudflareTunnelWithHttpInfo(AccountIdentifierCfdTunnelBody body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareTunnelCreateACloudflareTunnelValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasTunnelResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Cloudflare Tunnel (asynchronously)
     * Creates a new Cloudflare Tunnel in an account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelCreateACloudflareTunnelAsync(AccountIdentifierCfdTunnelBody body, String accountIdentifier, final ApiCallback<SchemasTunnelResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareTunnelCreateACloudflareTunnelValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasTunnelResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareTunnelDeleteACloudflareTunnel
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelDeleteACloudflareTunnelCall(Object body, String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cfd_tunnel/{tunnel_id}"
            .replaceAll("\\{" + "tunnel_id" + "\\}", apiClient.escapeString(tunnelId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareTunnelDeleteACloudflareTunnelValidateBeforeCall(Object body, String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cloudflareTunnelDeleteACloudflareTunnel(Async)");
        }
        // verify the required parameter 'tunnelId' is set
        if (tunnelId == null) {
            throw new ApiException("Missing the required parameter 'tunnelId' when calling cloudflareTunnelDeleteACloudflareTunnel(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareTunnelDeleteACloudflareTunnel(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareTunnelDeleteACloudflareTunnelCall(body, tunnelId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Cloudflare Tunnel
     * Deletes a Cloudflare Tunnel from an account.
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return SchemasTunnelResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasTunnelResponseSingle cloudflareTunnelDeleteACloudflareTunnel(Object body, String tunnelId, String accountIdentifier) throws ApiException {
        ApiResponse<SchemasTunnelResponseSingle> resp = cloudflareTunnelDeleteACloudflareTunnelWithHttpInfo(body, tunnelId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete a Cloudflare Tunnel
     * Deletes a Cloudflare Tunnel from an account.
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;SchemasTunnelResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasTunnelResponseSingle> cloudflareTunnelDeleteACloudflareTunnelWithHttpInfo(Object body, String tunnelId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareTunnelDeleteACloudflareTunnelValidateBeforeCall(body, tunnelId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasTunnelResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a Cloudflare Tunnel (asynchronously)
     * Deletes a Cloudflare Tunnel from an account.
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelDeleteACloudflareTunnelAsync(Object body, String tunnelId, String accountIdentifier, final ApiCallback<SchemasTunnelResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareTunnelDeleteACloudflareTunnelValidateBeforeCall(body, tunnelId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasTunnelResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareTunnelGetACloudflareTunnel
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelGetACloudflareTunnelCall(String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cfd_tunnel/{tunnel_id}"
            .replaceAll("\\{" + "tunnel_id" + "\\}", apiClient.escapeString(tunnelId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareTunnelGetACloudflareTunnelValidateBeforeCall(String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tunnelId' is set
        if (tunnelId == null) {
            throw new ApiException("Missing the required parameter 'tunnelId' when calling cloudflareTunnelGetACloudflareTunnel(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareTunnelGetACloudflareTunnel(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareTunnelGetACloudflareTunnelCall(tunnelId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Cloudflare Tunnel
     * Fetches a single Cloudflare Tunnel.
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return SchemasTunnelResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasTunnelResponseSingle cloudflareTunnelGetACloudflareTunnel(String tunnelId, String accountIdentifier) throws ApiException {
        ApiResponse<SchemasTunnelResponseSingle> resp = cloudflareTunnelGetACloudflareTunnelWithHttpInfo(tunnelId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get a Cloudflare Tunnel
     * Fetches a single Cloudflare Tunnel.
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;SchemasTunnelResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasTunnelResponseSingle> cloudflareTunnelGetACloudflareTunnelWithHttpInfo(String tunnelId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareTunnelGetACloudflareTunnelValidateBeforeCall(tunnelId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasTunnelResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Cloudflare Tunnel (asynchronously)
     * Fetches a single Cloudflare Tunnel.
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelGetACloudflareTunnelAsync(String tunnelId, String accountIdentifier, final ApiCallback<SchemasTunnelResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareTunnelGetACloudflareTunnelValidateBeforeCall(tunnelId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasTunnelResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareTunnelGetACloudflareTunnelToken
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelGetACloudflareTunnelTokenCall(String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cfd_tunnel/{tunnel_id}/token"
            .replaceAll("\\{" + "tunnel_id" + "\\}", apiClient.escapeString(tunnelId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareTunnelGetACloudflareTunnelTokenValidateBeforeCall(String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tunnelId' is set
        if (tunnelId == null) {
            throw new ApiException("Missing the required parameter 'tunnelId' when calling cloudflareTunnelGetACloudflareTunnelToken(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareTunnelGetACloudflareTunnelToken(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareTunnelGetACloudflareTunnelTokenCall(tunnelId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Cloudflare Tunnel token
     * Gets the token used to associate cloudflared with a specific tunnel.
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return TunnelResponseToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TunnelResponseToken cloudflareTunnelGetACloudflareTunnelToken(String tunnelId, String accountIdentifier) throws ApiException {
        ApiResponse<TunnelResponseToken> resp = cloudflareTunnelGetACloudflareTunnelTokenWithHttpInfo(tunnelId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get a Cloudflare Tunnel token
     * Gets the token used to associate cloudflared with a specific tunnel.
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;TunnelResponseToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TunnelResponseToken> cloudflareTunnelGetACloudflareTunnelTokenWithHttpInfo(String tunnelId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareTunnelGetACloudflareTunnelTokenValidateBeforeCall(tunnelId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<TunnelResponseToken>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Cloudflare Tunnel token (asynchronously)
     * Gets the token used to associate cloudflared with a specific tunnel.
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelGetACloudflareTunnelTokenAsync(String tunnelId, String accountIdentifier, final ApiCallback<TunnelResponseToken> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareTunnelGetACloudflareTunnelTokenValidateBeforeCall(tunnelId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TunnelResponseToken>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareTunnelListCloudflareTunnelConnections
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelListCloudflareTunnelConnectionsCall(String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cfd_tunnel/{tunnel_id}/connections"
            .replaceAll("\\{" + "tunnel_id" + "\\}", apiClient.escapeString(tunnelId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareTunnelListCloudflareTunnelConnectionsValidateBeforeCall(String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tunnelId' is set
        if (tunnelId == null) {
            throw new ApiException("Missing the required parameter 'tunnelId' when calling cloudflareTunnelListCloudflareTunnelConnections(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareTunnelListCloudflareTunnelConnections(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareTunnelListCloudflareTunnelConnectionsCall(tunnelId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Cloudflare Tunnel connections
     * Fetches connection details for a Cloudflare Tunnel.
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return TunnelConnectionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TunnelConnectionsResponse cloudflareTunnelListCloudflareTunnelConnections(String tunnelId, String accountIdentifier) throws ApiException {
        ApiResponse<TunnelConnectionsResponse> resp = cloudflareTunnelListCloudflareTunnelConnectionsWithHttpInfo(tunnelId, accountIdentifier);
        return resp.getData();
    }

    /**
     * List Cloudflare Tunnel connections
     * Fetches connection details for a Cloudflare Tunnel.
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;TunnelConnectionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TunnelConnectionsResponse> cloudflareTunnelListCloudflareTunnelConnectionsWithHttpInfo(String tunnelId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareTunnelListCloudflareTunnelConnectionsValidateBeforeCall(tunnelId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<TunnelConnectionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Cloudflare Tunnel connections (asynchronously)
     * Fetches connection details for a Cloudflare Tunnel.
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelListCloudflareTunnelConnectionsAsync(String tunnelId, String accountIdentifier, final ApiCallback<TunnelConnectionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareTunnelListCloudflareTunnelConnectionsValidateBeforeCall(tunnelId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TunnelConnectionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareTunnelListCloudflareTunnels
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelListCloudflareTunnelsCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cfd_tunnel"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareTunnelListCloudflareTunnelsValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareTunnelListCloudflareTunnels(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareTunnelListCloudflareTunnelsCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Cloudflare Tunnels
     * Lists and filters Cloudflare Tunnels in an account.
     * @param accountIdentifier  (required)
     * @return SchemasTunnelResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasTunnelResponseCollection cloudflareTunnelListCloudflareTunnels(String accountIdentifier) throws ApiException {
        ApiResponse<SchemasTunnelResponseCollection> resp = cloudflareTunnelListCloudflareTunnelsWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List Cloudflare Tunnels
     * Lists and filters Cloudflare Tunnels in an account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;SchemasTunnelResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasTunnelResponseCollection> cloudflareTunnelListCloudflareTunnelsWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareTunnelListCloudflareTunnelsValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasTunnelResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Cloudflare Tunnels (asynchronously)
     * Lists and filters Cloudflare Tunnels in an account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelListCloudflareTunnelsAsync(String accountIdentifier, final ApiCallback<SchemasTunnelResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareTunnelListCloudflareTunnelsValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasTunnelResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareTunnelUpdateACloudflareTunnel
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelUpdateACloudflareTunnelCall(CfdTunnelTunnelIdBody body, String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/cfd_tunnel/{tunnel_id}"
            .replaceAll("\\{" + "tunnel_id" + "\\}", apiClient.escapeString(tunnelId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareTunnelUpdateACloudflareTunnelValidateBeforeCall(CfdTunnelTunnelIdBody body, String tunnelId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cloudflareTunnelUpdateACloudflareTunnel(Async)");
        }
        // verify the required parameter 'tunnelId' is set
        if (tunnelId == null) {
            throw new ApiException("Missing the required parameter 'tunnelId' when calling cloudflareTunnelUpdateACloudflareTunnel(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareTunnelUpdateACloudflareTunnel(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareTunnelUpdateACloudflareTunnelCall(body, tunnelId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Cloudflare Tunnel
     * Updates an existing Cloudflare Tunnel.
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return SchemasTunnelResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasTunnelResponseSingle cloudflareTunnelUpdateACloudflareTunnel(CfdTunnelTunnelIdBody body, String tunnelId, String accountIdentifier) throws ApiException {
        ApiResponse<SchemasTunnelResponseSingle> resp = cloudflareTunnelUpdateACloudflareTunnelWithHttpInfo(body, tunnelId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update a Cloudflare Tunnel
     * Updates an existing Cloudflare Tunnel.
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;SchemasTunnelResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasTunnelResponseSingle> cloudflareTunnelUpdateACloudflareTunnelWithHttpInfo(CfdTunnelTunnelIdBody body, String tunnelId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareTunnelUpdateACloudflareTunnelValidateBeforeCall(body, tunnelId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasTunnelResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Cloudflare Tunnel (asynchronously)
     * Updates an existing Cloudflare Tunnel.
     * @param body  (required)
     * @param tunnelId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareTunnelUpdateACloudflareTunnelAsync(CfdTunnelTunnelIdBody body, String tunnelId, String accountIdentifier, final ApiCallback<SchemasTunnelResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareTunnelUpdateACloudflareTunnelValidateBeforeCall(body, tunnelId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasTunnelResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
