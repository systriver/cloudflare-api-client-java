/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse4xx390;
import io.swagger.client.model.InlineResponse4xx391;
import io.swagger.client.model.InlineResponse4xx392;
import io.swagger.client.model.KeylessCertificatesIdentifierBody;
import io.swagger.client.model.KeylessResponseCollection;
import io.swagger.client.model.KeylessResponseSingle;
import io.swagger.client.model.KeylessResponseSingleId;
import io.swagger.client.model.ZoneIdentifierKeylessCertificatesBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KeylessSslForAZoneApi {
    private ApiClient apiClient;

    public KeylessSslForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KeylessSslForAZoneApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for keylessSslForAZoneCreateKeylessSslConfiguration
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call keylessSslForAZoneCreateKeylessSslConfigurationCall(ZoneIdentifierKeylessCertificatesBody body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/keyless_certificates"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call keylessSslForAZoneCreateKeylessSslConfigurationValidateBeforeCall(ZoneIdentifierKeylessCertificatesBody body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling keylessSslForAZoneCreateKeylessSslConfiguration(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling keylessSslForAZoneCreateKeylessSslConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = keylessSslForAZoneCreateKeylessSslConfigurationCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Keyless SSL Configuration
     * 
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return KeylessResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeylessResponseSingle keylessSslForAZoneCreateKeylessSslConfiguration(ZoneIdentifierKeylessCertificatesBody body, String zoneIdentifier) throws ApiException {
        ApiResponse<KeylessResponseSingle> resp = keylessSslForAZoneCreateKeylessSslConfigurationWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Create Keyless SSL Configuration
     * 
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;KeylessResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeylessResponseSingle> keylessSslForAZoneCreateKeylessSslConfigurationWithHttpInfo(ZoneIdentifierKeylessCertificatesBody body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = keylessSslForAZoneCreateKeylessSslConfigurationValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<KeylessResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Keyless SSL Configuration (asynchronously)
     * 
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call keylessSslForAZoneCreateKeylessSslConfigurationAsync(ZoneIdentifierKeylessCertificatesBody body, String zoneIdentifier, final ApiCallback<KeylessResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = keylessSslForAZoneCreateKeylessSslConfigurationValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeylessResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for keylessSslForAZoneDeleteKeylessSslConfiguration
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call keylessSslForAZoneDeleteKeylessSslConfigurationCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/keyless_certificates/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call keylessSslForAZoneDeleteKeylessSslConfigurationValidateBeforeCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling keylessSslForAZoneDeleteKeylessSslConfiguration(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling keylessSslForAZoneDeleteKeylessSslConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = keylessSslForAZoneDeleteKeylessSslConfigurationCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Keyless SSL Configuration
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return KeylessResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeylessResponseSingleId keylessSslForAZoneDeleteKeylessSslConfiguration(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<KeylessResponseSingleId> resp = keylessSslForAZoneDeleteKeylessSslConfigurationWithHttpInfo(identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Delete Keyless SSL Configuration
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;KeylessResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeylessResponseSingleId> keylessSslForAZoneDeleteKeylessSslConfigurationWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = keylessSslForAZoneDeleteKeylessSslConfigurationValidateBeforeCall(identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<KeylessResponseSingleId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Keyless SSL Configuration (asynchronously)
     * 
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call keylessSslForAZoneDeleteKeylessSslConfigurationAsync(String identifier, String zoneIdentifier, final ApiCallback<KeylessResponseSingleId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = keylessSslForAZoneDeleteKeylessSslConfigurationValidateBeforeCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeylessResponseSingleId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for keylessSslForAZoneEditKeylessSslConfiguration
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call keylessSslForAZoneEditKeylessSslConfigurationCall(KeylessCertificatesIdentifierBody body, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/keyless_certificates/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call keylessSslForAZoneEditKeylessSslConfigurationValidateBeforeCall(KeylessCertificatesIdentifierBody body, String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling keylessSslForAZoneEditKeylessSslConfiguration(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling keylessSslForAZoneEditKeylessSslConfiguration(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling keylessSslForAZoneEditKeylessSslConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = keylessSslForAZoneEditKeylessSslConfigurationCall(body, identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit Keyless SSL Configuration
     * This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port,certificate,enabled.
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return KeylessResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeylessResponseSingle keylessSslForAZoneEditKeylessSslConfiguration(KeylessCertificatesIdentifierBody body, String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<KeylessResponseSingle> resp = keylessSslForAZoneEditKeylessSslConfigurationWithHttpInfo(body, identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Edit Keyless SSL Configuration
     * This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port,certificate,enabled.
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;KeylessResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeylessResponseSingle> keylessSslForAZoneEditKeylessSslConfigurationWithHttpInfo(KeylessCertificatesIdentifierBody body, String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = keylessSslForAZoneEditKeylessSslConfigurationValidateBeforeCall(body, identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<KeylessResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit Keyless SSL Configuration (asynchronously)
     * This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port,certificate,enabled.
     * @param body  (required)
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call keylessSslForAZoneEditKeylessSslConfigurationAsync(KeylessCertificatesIdentifierBody body, String identifier, String zoneIdentifier, final ApiCallback<KeylessResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = keylessSslForAZoneEditKeylessSslConfigurationValidateBeforeCall(body, identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeylessResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for keylessSslForAZoneGetKeylessSslConfiguration
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call keylessSslForAZoneGetKeylessSslConfigurationCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/keyless_certificates/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call keylessSslForAZoneGetKeylessSslConfigurationValidateBeforeCall(String identifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling keylessSslForAZoneGetKeylessSslConfiguration(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling keylessSslForAZoneGetKeylessSslConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = keylessSslForAZoneGetKeylessSslConfigurationCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Keyless SSL Configuration
     * Get details for one Keyless SSL configuration.
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return KeylessResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeylessResponseSingle keylessSslForAZoneGetKeylessSslConfiguration(String identifier, String zoneIdentifier) throws ApiException {
        ApiResponse<KeylessResponseSingle> resp = keylessSslForAZoneGetKeylessSslConfigurationWithHttpInfo(identifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Get Keyless SSL Configuration
     * Get details for one Keyless SSL configuration.
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;KeylessResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeylessResponseSingle> keylessSslForAZoneGetKeylessSslConfigurationWithHttpInfo(String identifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = keylessSslForAZoneGetKeylessSslConfigurationValidateBeforeCall(identifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<KeylessResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Keyless SSL Configuration (asynchronously)
     * Get details for one Keyless SSL configuration.
     * @param identifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call keylessSslForAZoneGetKeylessSslConfigurationAsync(String identifier, String zoneIdentifier, final ApiCallback<KeylessResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = keylessSslForAZoneGetKeylessSslConfigurationValidateBeforeCall(identifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeylessResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for keylessSslForAZoneListKeylessSslConfigurations
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call keylessSslForAZoneListKeylessSslConfigurationsCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/keyless_certificates"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call keylessSslForAZoneListKeylessSslConfigurationsValidateBeforeCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling keylessSslForAZoneListKeylessSslConfigurations(Async)");
        }
        
        com.squareup.okhttp.Call call = keylessSslForAZoneListKeylessSslConfigurationsCall(zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Keyless SSL Configurations
     * List all Keyless SSL configurations for a given zone.
     * @param zoneIdentifier  (required)
     * @return KeylessResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeylessResponseCollection keylessSslForAZoneListKeylessSslConfigurations(String zoneIdentifier) throws ApiException {
        ApiResponse<KeylessResponseCollection> resp = keylessSslForAZoneListKeylessSslConfigurationsWithHttpInfo(zoneIdentifier);
        return resp.getData();
    }

    /**
     * List Keyless SSL Configurations
     * List all Keyless SSL configurations for a given zone.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;KeylessResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeylessResponseCollection> keylessSslForAZoneListKeylessSslConfigurationsWithHttpInfo(String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = keylessSslForAZoneListKeylessSslConfigurationsValidateBeforeCall(zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<KeylessResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Keyless SSL Configurations (asynchronously)
     * List all Keyless SSL configurations for a given zone.
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call keylessSslForAZoneListKeylessSslConfigurationsAsync(String zoneIdentifier, final ApiCallback<KeylessResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = keylessSslForAZoneListKeylessSslConfigurationsValidateBeforeCall(zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeylessResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
