/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AddressMapsAddressMapIdentifierBody;
import io.swagger.client.model.AddressMapsComponentsSchemasResponseCollection;
import io.swagger.client.model.AddressMapsComponentsSchemasSingleResponse;
import io.swagger.client.model.AddressingAddressMapsBody;
import io.swagger.client.model.ApiResponseCollection;
import io.swagger.client.model.FullResponse;
import io.swagger.client.model.InlineResponse4xx1;
import io.swagger.client.model.InlineResponse4xx2;
import io.swagger.client.model.InlineResponse4xx3;
import io.swagger.client.model.InlineResponse4xx4;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpAddressManagementAddressMapsApi {
    private ApiClient apiClient;

    public IpAddressManagementAddressMapsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpAddressManagementAddressMapsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap
     * @param zoneIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapCall(String zoneIdentifier, String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}/zones/{zone_identifier}"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()))
            .replaceAll("\\{" + "address_map_identifier" + "\\}", apiClient.escapeString(addressMapIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapValidateBeforeCall(String zoneIdentifier, String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(Async)");
        }
        // verify the required parameter 'addressMapIdentifier' is set
        if (addressMapIdentifier == null) {
            throw new ApiException("Missing the required parameter 'addressMapIdentifier' when calling ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapCall(zoneIdentifier, addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a zone membership to an Address Map
     * Add a zone as a member of a particular address map.
     * @param zoneIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseCollection ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(String zoneIdentifier, String addressMapIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseCollection> resp = ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapWithHttpInfo(zoneIdentifier, addressMapIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Add a zone membership to an Address Map
     * Add a zone as a member of a particular address map.
     * @param zoneIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseCollection> ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapWithHttpInfo(String zoneIdentifier, String addressMapIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapValidateBeforeCall(zoneIdentifier, addressMapIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a zone membership to an Address Map (asynchronously)
     * Add a zone as a member of a particular address map.
     * @param zoneIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapAsync(String zoneIdentifier, String addressMapIdentifier, String accountIdentifier, final ApiCallback<ApiResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMapValidateBeforeCall(zoneIdentifier, addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap
     * @param accountIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier1  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapCall(String accountIdentifier, String addressMapIdentifier, String accountIdentifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier1}/addressing/address_maps/{address_map_identifier}/accounts/{account_identifier}"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()))
            .replaceAll("\\{" + "address_map_identifier" + "\\}", apiClient.escapeString(addressMapIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier1" + "\\}", apiClient.escapeString(accountIdentifier1.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapValidateBeforeCall(String accountIdentifier, String addressMapIdentifier, String accountIdentifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(Async)");
        }
        // verify the required parameter 'addressMapIdentifier' is set
        if (addressMapIdentifier == null) {
            throw new ApiException("Missing the required parameter 'addressMapIdentifier' when calling ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(Async)");
        }
        // verify the required parameter 'accountIdentifier1' is set
        if (accountIdentifier1 == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier1' when calling ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapCall(accountIdentifier, addressMapIdentifier, accountIdentifier1, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add an account membership to an Address Map
     * Add an account as a member of a particular address map.
     * @param accountIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier1  (required)
     * @return ApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseCollection ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(String accountIdentifier, String addressMapIdentifier, String accountIdentifier1) throws ApiException {
        ApiResponse<ApiResponseCollection> resp = ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapWithHttpInfo(accountIdentifier, addressMapIdentifier, accountIdentifier1);
        return resp.getData();
    }

    /**
     * Add an account membership to an Address Map
     * Add an account as a member of a particular address map.
     * @param accountIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier1  (required)
     * @return ApiResponse&lt;ApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseCollection> ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapWithHttpInfo(String accountIdentifier, String addressMapIdentifier, String accountIdentifier1) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapValidateBeforeCall(accountIdentifier, addressMapIdentifier, accountIdentifier1, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an account membership to an Address Map (asynchronously)
     * Add an account as a member of a particular address map.
     * @param accountIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier1  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapAsync(String accountIdentifier, String addressMapIdentifier, String accountIdentifier1, final ApiCallback<ApiResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMapValidateBeforeCall(accountIdentifier, addressMapIdentifier, accountIdentifier1, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementAddressMapsAddAnIpToAnAddressMap
     * @param ipAddress  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsAddAnIpToAnAddressMapCall(String ipAddress, String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}/ips/{ip_address}"
            .replaceAll("\\{" + "ip_address" + "\\}", apiClient.escapeString(ipAddress.toString()))
            .replaceAll("\\{" + "address_map_identifier" + "\\}", apiClient.escapeString(addressMapIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementAddressMapsAddAnIpToAnAddressMapValidateBeforeCall(String ipAddress, String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling ipAddressManagementAddressMapsAddAnIpToAnAddressMap(Async)");
        }
        // verify the required parameter 'addressMapIdentifier' is set
        if (addressMapIdentifier == null) {
            throw new ApiException("Missing the required parameter 'addressMapIdentifier' when calling ipAddressManagementAddressMapsAddAnIpToAnAddressMap(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementAddressMapsAddAnIpToAnAddressMap(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddAnIpToAnAddressMapCall(ipAddress, addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add an IP to an Address Map
     * Add an IP from a prefix owned by the account to a particular address map.
     * @param ipAddress  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseCollection ipAddressManagementAddressMapsAddAnIpToAnAddressMap(String ipAddress, String addressMapIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseCollection> resp = ipAddressManagementAddressMapsAddAnIpToAnAddressMapWithHttpInfo(ipAddress, addressMapIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Add an IP to an Address Map
     * Add an IP from a prefix owned by the account to a particular address map.
     * @param ipAddress  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseCollection> ipAddressManagementAddressMapsAddAnIpToAnAddressMapWithHttpInfo(String ipAddress, String addressMapIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddAnIpToAnAddressMapValidateBeforeCall(ipAddress, addressMapIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an IP to an Address Map (asynchronously)
     * Add an IP from a prefix owned by the account to a particular address map.
     * @param ipAddress  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsAddAnIpToAnAddressMapAsync(String ipAddress, String addressMapIdentifier, String accountIdentifier, final ApiCallback<ApiResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddAnIpToAnAddressMapValidateBeforeCall(ipAddress, addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementAddressMapsAddressMapDetails
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsAddressMapDetailsCall(String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}"
            .replaceAll("\\{" + "address_map_identifier" + "\\}", apiClient.escapeString(addressMapIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementAddressMapsAddressMapDetailsValidateBeforeCall(String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'addressMapIdentifier' is set
        if (addressMapIdentifier == null) {
            throw new ApiException("Missing the required parameter 'addressMapIdentifier' when calling ipAddressManagementAddressMapsAddressMapDetails(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementAddressMapsAddressMapDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddressMapDetailsCall(addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Address Map Details
     * Show a particular address map owned by the account.
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return FullResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FullResponse ipAddressManagementAddressMapsAddressMapDetails(String addressMapIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<FullResponse> resp = ipAddressManagementAddressMapsAddressMapDetailsWithHttpInfo(addressMapIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Address Map Details
     * Show a particular address map owned by the account.
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;FullResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FullResponse> ipAddressManagementAddressMapsAddressMapDetailsWithHttpInfo(String addressMapIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddressMapDetailsValidateBeforeCall(addressMapIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<FullResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Address Map Details (asynchronously)
     * Show a particular address map owned by the account.
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsAddressMapDetailsAsync(String addressMapIdentifier, String accountIdentifier, final ApiCallback<FullResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsAddressMapDetailsValidateBeforeCall(addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FullResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementAddressMapsCreateAddressMap
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsCreateAddressMapCall(AddressingAddressMapsBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/address_maps"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementAddressMapsCreateAddressMapValidateBeforeCall(AddressingAddressMapsBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ipAddressManagementAddressMapsCreateAddressMap(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementAddressMapsCreateAddressMap(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsCreateAddressMapCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Address Map
     * Create a new address map under the account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return FullResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FullResponse ipAddressManagementAddressMapsCreateAddressMap(AddressingAddressMapsBody body, String accountIdentifier) throws ApiException {
        ApiResponse<FullResponse> resp = ipAddressManagementAddressMapsCreateAddressMapWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create Address Map
     * Create a new address map under the account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;FullResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FullResponse> ipAddressManagementAddressMapsCreateAddressMapWithHttpInfo(AddressingAddressMapsBody body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsCreateAddressMapValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<FullResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Address Map (asynchronously)
     * Create a new address map under the account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsCreateAddressMapAsync(AddressingAddressMapsBody body, String accountIdentifier, final ApiCallback<FullResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsCreateAddressMapValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FullResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementAddressMapsDeleteAddressMap
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsDeleteAddressMapCall(String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}"
            .replaceAll("\\{" + "address_map_identifier" + "\\}", apiClient.escapeString(addressMapIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementAddressMapsDeleteAddressMapValidateBeforeCall(String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'addressMapIdentifier' is set
        if (addressMapIdentifier == null) {
            throw new ApiException("Missing the required parameter 'addressMapIdentifier' when calling ipAddressManagementAddressMapsDeleteAddressMap(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementAddressMapsDeleteAddressMap(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsDeleteAddressMapCall(addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Address Map
     * Delete a particular address map owned by the account. An Address Map must be disabled before it can be deleted.
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseCollection ipAddressManagementAddressMapsDeleteAddressMap(String addressMapIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseCollection> resp = ipAddressManagementAddressMapsDeleteAddressMapWithHttpInfo(addressMapIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete Address Map
     * Delete a particular address map owned by the account. An Address Map must be disabled before it can be deleted.
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseCollection> ipAddressManagementAddressMapsDeleteAddressMapWithHttpInfo(String addressMapIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsDeleteAddressMapValidateBeforeCall(addressMapIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Address Map (asynchronously)
     * Delete a particular address map owned by the account. An Address Map must be disabled before it can be deleted.
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsDeleteAddressMapAsync(String addressMapIdentifier, String accountIdentifier, final ApiCallback<ApiResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsDeleteAddressMapValidateBeforeCall(addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementAddressMapsListAddressMaps
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsListAddressMapsCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/address_maps"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementAddressMapsListAddressMapsValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementAddressMapsListAddressMaps(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsListAddressMapsCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Address Maps
     * List all address maps owned by the account.
     * @param accountIdentifier  (required)
     * @return AddressMapsComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddressMapsComponentsSchemasResponseCollection ipAddressManagementAddressMapsListAddressMaps(String accountIdentifier) throws ApiException {
        ApiResponse<AddressMapsComponentsSchemasResponseCollection> resp = ipAddressManagementAddressMapsListAddressMapsWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List Address Maps
     * List all address maps owned by the account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;AddressMapsComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddressMapsComponentsSchemasResponseCollection> ipAddressManagementAddressMapsListAddressMapsWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsListAddressMapsValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<AddressMapsComponentsSchemasResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Address Maps (asynchronously)
     * List all address maps owned by the account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsListAddressMapsAsync(String accountIdentifier, final ApiCallback<AddressMapsComponentsSchemasResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsListAddressMapsValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddressMapsComponentsSchemasResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap
     * @param zoneIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapCall(String zoneIdentifier, String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}/zones/{zone_identifier}"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()))
            .replaceAll("\\{" + "address_map_identifier" + "\\}", apiClient.escapeString(addressMapIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapValidateBeforeCall(String zoneIdentifier, String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(Async)");
        }
        // verify the required parameter 'addressMapIdentifier' is set
        if (addressMapIdentifier == null) {
            throw new ApiException("Missing the required parameter 'addressMapIdentifier' when calling ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapCall(zoneIdentifier, addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove a zone membership from an Address Map
     * Remove a zone as a member of a particular address map.
     * @param zoneIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseCollection ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(String zoneIdentifier, String addressMapIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseCollection> resp = ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapWithHttpInfo(zoneIdentifier, addressMapIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Remove a zone membership from an Address Map
     * Remove a zone as a member of a particular address map.
     * @param zoneIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseCollection> ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapWithHttpInfo(String zoneIdentifier, String addressMapIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapValidateBeforeCall(zoneIdentifier, addressMapIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove a zone membership from an Address Map (asynchronously)
     * Remove a zone as a member of a particular address map.
     * @param zoneIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapAsync(String zoneIdentifier, String addressMapIdentifier, String accountIdentifier, final ApiCallback<ApiResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMapValidateBeforeCall(zoneIdentifier, addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap
     * @param accountIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier1  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapCall(String accountIdentifier, String addressMapIdentifier, String accountIdentifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier1}/addressing/address_maps/{address_map_identifier}/accounts/{account_identifier}"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()))
            .replaceAll("\\{" + "address_map_identifier" + "\\}", apiClient.escapeString(addressMapIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier1" + "\\}", apiClient.escapeString(accountIdentifier1.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapValidateBeforeCall(String accountIdentifier, String addressMapIdentifier, String accountIdentifier1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(Async)");
        }
        // verify the required parameter 'addressMapIdentifier' is set
        if (addressMapIdentifier == null) {
            throw new ApiException("Missing the required parameter 'addressMapIdentifier' when calling ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(Async)");
        }
        // verify the required parameter 'accountIdentifier1' is set
        if (accountIdentifier1 == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier1' when calling ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapCall(accountIdentifier, addressMapIdentifier, accountIdentifier1, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove an account membership from an Address Map
     * Remove an account as a member of a particular address map.
     * @param accountIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier1  (required)
     * @return ApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseCollection ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(String accountIdentifier, String addressMapIdentifier, String accountIdentifier1) throws ApiException {
        ApiResponse<ApiResponseCollection> resp = ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapWithHttpInfo(accountIdentifier, addressMapIdentifier, accountIdentifier1);
        return resp.getData();
    }

    /**
     * Remove an account membership from an Address Map
     * Remove an account as a member of a particular address map.
     * @param accountIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier1  (required)
     * @return ApiResponse&lt;ApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseCollection> ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapWithHttpInfo(String accountIdentifier, String addressMapIdentifier, String accountIdentifier1) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapValidateBeforeCall(accountIdentifier, addressMapIdentifier, accountIdentifier1, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove an account membership from an Address Map (asynchronously)
     * Remove an account as a member of a particular address map.
     * @param accountIdentifier  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier1  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapAsync(String accountIdentifier, String addressMapIdentifier, String accountIdentifier1, final ApiCallback<ApiResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMapValidateBeforeCall(accountIdentifier, addressMapIdentifier, accountIdentifier1, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap
     * @param ipAddress  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapCall(String ipAddress, String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}/ips/{ip_address}"
            .replaceAll("\\{" + "ip_address" + "\\}", apiClient.escapeString(ipAddress.toString()))
            .replaceAll("\\{" + "address_map_identifier" + "\\}", apiClient.escapeString(addressMapIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapValidateBeforeCall(String ipAddress, String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(Async)");
        }
        // verify the required parameter 'addressMapIdentifier' is set
        if (addressMapIdentifier == null) {
            throw new ApiException("Missing the required parameter 'addressMapIdentifier' when calling ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapCall(ipAddress, addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove an IP from an Address Map
     * Remove an IP from a particular address map.
     * @param ipAddress  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseCollection ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(String ipAddress, String addressMapIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseCollection> resp = ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapWithHttpInfo(ipAddress, addressMapIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Remove an IP from an Address Map
     * Remove an IP from a particular address map.
     * @param ipAddress  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseCollection> ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapWithHttpInfo(String ipAddress, String addressMapIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapValidateBeforeCall(ipAddress, addressMapIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove an IP from an Address Map (asynchronously)
     * Remove an IP from a particular address map.
     * @param ipAddress  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapAsync(String ipAddress, String addressMapIdentifier, String accountIdentifier, final ApiCallback<ApiResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMapValidateBeforeCall(ipAddress, addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementAddressMapsUpdateAddressMap
     * @param body  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsUpdateAddressMapCall(AddressMapsAddressMapIdentifierBody body, String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}"
            .replaceAll("\\{" + "address_map_identifier" + "\\}", apiClient.escapeString(addressMapIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementAddressMapsUpdateAddressMapValidateBeforeCall(AddressMapsAddressMapIdentifierBody body, String addressMapIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ipAddressManagementAddressMapsUpdateAddressMap(Async)");
        }
        // verify the required parameter 'addressMapIdentifier' is set
        if (addressMapIdentifier == null) {
            throw new ApiException("Missing the required parameter 'addressMapIdentifier' when calling ipAddressManagementAddressMapsUpdateAddressMap(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementAddressMapsUpdateAddressMap(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsUpdateAddressMapCall(body, addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Address Map
     * Modify properties of an address map owned by the account.
     * @param body  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return AddressMapsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddressMapsComponentsSchemasSingleResponse ipAddressManagementAddressMapsUpdateAddressMap(AddressMapsAddressMapIdentifierBody body, String addressMapIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<AddressMapsComponentsSchemasSingleResponse> resp = ipAddressManagementAddressMapsUpdateAddressMapWithHttpInfo(body, addressMapIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update Address Map
     * Modify properties of an address map owned by the account.
     * @param body  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;AddressMapsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddressMapsComponentsSchemasSingleResponse> ipAddressManagementAddressMapsUpdateAddressMapWithHttpInfo(AddressMapsAddressMapIdentifierBody body, String addressMapIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsUpdateAddressMapValidateBeforeCall(body, addressMapIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<AddressMapsComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Address Map (asynchronously)
     * Modify properties of an address map owned by the account.
     * @param body  (required)
     * @param addressMapIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementAddressMapsUpdateAddressMapAsync(AddressMapsAddressMapIdentifierBody body, String addressMapIdentifier, String accountIdentifier, final ApiCallback<AddressMapsComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementAddressMapsUpdateAddressMapValidateBeforeCall(body, addressMapIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddressMapsComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
