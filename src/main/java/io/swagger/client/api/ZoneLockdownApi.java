/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse200114;
import io.swagger.client.model.InlineResponse4xx369;
import io.swagger.client.model.InlineResponse4xx370;
import io.swagger.client.model.InlineResponse4xx371;
import io.swagger.client.model.ZonelockdownResponseCollection;
import io.swagger.client.model.ZonelockdownResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneLockdownApi {
    private ApiClient apiClient;

    public ZoneLockdownApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneLockdownApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for zoneLockdownCreateAZoneLockdownRule
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLockdownCreateAZoneLockdownRuleCall(Object body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/lockdowns"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLockdownCreateAZoneLockdownRuleValidateBeforeCall(Object body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zoneLockdownCreateAZoneLockdownRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneLockdownCreateAZoneLockdownRule(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLockdownCreateAZoneLockdownRuleCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Zone Lockdown rule
     * Creates a new Zone Lockdown rule.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ZonelockdownResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ZonelockdownResponseSingle zoneLockdownCreateAZoneLockdownRule(Object body, String zoneIdentifier) throws ApiException {
        ApiResponse<ZonelockdownResponseSingle> resp = zoneLockdownCreateAZoneLockdownRuleWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Create a Zone Lockdown rule
     * Creates a new Zone Lockdown rule.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ZonelockdownResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ZonelockdownResponseSingle> zoneLockdownCreateAZoneLockdownRuleWithHttpInfo(Object body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLockdownCreateAZoneLockdownRuleValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ZonelockdownResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Zone Lockdown rule (asynchronously)
     * Creates a new Zone Lockdown rule.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLockdownCreateAZoneLockdownRuleAsync(Object body, String zoneIdentifier, final ApiCallback<ZonelockdownResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLockdownCreateAZoneLockdownRuleValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ZonelockdownResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneLockdownDeleteAZoneLockdownRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLockdownDeleteAZoneLockdownRuleCall(String id, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/lockdowns/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLockdownDeleteAZoneLockdownRuleValidateBeforeCall(String id, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling zoneLockdownDeleteAZoneLockdownRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneLockdownDeleteAZoneLockdownRule(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLockdownDeleteAZoneLockdownRuleCall(id, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Zone Lockdown rule
     * Deletes an existing Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return InlineResponse200114
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200114 zoneLockdownDeleteAZoneLockdownRule(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<InlineResponse200114> resp = zoneLockdownDeleteAZoneLockdownRuleWithHttpInfo(id, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Delete a Zone Lockdown rule
     * Deletes an existing Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;InlineResponse200114&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200114> zoneLockdownDeleteAZoneLockdownRuleWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLockdownDeleteAZoneLockdownRuleValidateBeforeCall(id, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200114>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a Zone Lockdown rule (asynchronously)
     * Deletes an existing Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLockdownDeleteAZoneLockdownRuleAsync(String id, String zoneIdentifier, final ApiCallback<InlineResponse200114> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLockdownDeleteAZoneLockdownRuleValidateBeforeCall(id, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200114>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneLockdownGetAZoneLockdownRule
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLockdownGetAZoneLockdownRuleCall(String id, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/lockdowns/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLockdownGetAZoneLockdownRuleValidateBeforeCall(String id, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling zoneLockdownGetAZoneLockdownRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneLockdownGetAZoneLockdownRule(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLockdownGetAZoneLockdownRuleCall(id, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Zone Lockdown rule
     * Fetches the details of a Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ZonelockdownResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ZonelockdownResponseSingle zoneLockdownGetAZoneLockdownRule(String id, String zoneIdentifier) throws ApiException {
        ApiResponse<ZonelockdownResponseSingle> resp = zoneLockdownGetAZoneLockdownRuleWithHttpInfo(id, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Get a Zone Lockdown rule
     * Fetches the details of a Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ZonelockdownResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ZonelockdownResponseSingle> zoneLockdownGetAZoneLockdownRuleWithHttpInfo(String id, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLockdownGetAZoneLockdownRuleValidateBeforeCall(id, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ZonelockdownResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Zone Lockdown rule (asynchronously)
     * Fetches the details of a Zone Lockdown rule.
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLockdownGetAZoneLockdownRuleAsync(String id, String zoneIdentifier, final ApiCallback<ZonelockdownResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLockdownGetAZoneLockdownRuleValidateBeforeCall(id, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ZonelockdownResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneLockdownListZoneLockdownRules
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLockdownListZoneLockdownRulesCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/lockdowns"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLockdownListZoneLockdownRulesValidateBeforeCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneLockdownListZoneLockdownRules(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLockdownListZoneLockdownRulesCall(zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Zone Lockdown rules
     * Fetches Zone Lockdown rules. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @return ZonelockdownResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ZonelockdownResponseCollection zoneLockdownListZoneLockdownRules(String zoneIdentifier) throws ApiException {
        ApiResponse<ZonelockdownResponseCollection> resp = zoneLockdownListZoneLockdownRulesWithHttpInfo(zoneIdentifier);
        return resp.getData();
    }

    /**
     * List Zone Lockdown rules
     * Fetches Zone Lockdown rules. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ZonelockdownResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ZonelockdownResponseCollection> zoneLockdownListZoneLockdownRulesWithHttpInfo(String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLockdownListZoneLockdownRulesValidateBeforeCall(zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ZonelockdownResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Zone Lockdown rules (asynchronously)
     * Fetches Zone Lockdown rules. You can filter the results using several optional parameters.
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLockdownListZoneLockdownRulesAsync(String zoneIdentifier, final ApiCallback<ZonelockdownResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLockdownListZoneLockdownRulesValidateBeforeCall(zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ZonelockdownResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zoneLockdownUpdateAZoneLockdownRule
     * @param body  (required)
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zoneLockdownUpdateAZoneLockdownRuleCall(Object body, String id, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/lockdowns/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zoneLockdownUpdateAZoneLockdownRuleValidateBeforeCall(Object body, String id, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zoneLockdownUpdateAZoneLockdownRule(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling zoneLockdownUpdateAZoneLockdownRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling zoneLockdownUpdateAZoneLockdownRule(Async)");
        }
        
        com.squareup.okhttp.Call call = zoneLockdownUpdateAZoneLockdownRuleCall(body, id, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Zone Lockdown rule
     * Updates an existing Zone Lockdown rule.
     * @param body  (required)
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ZonelockdownResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ZonelockdownResponseSingle zoneLockdownUpdateAZoneLockdownRule(Object body, String id, String zoneIdentifier) throws ApiException {
        ApiResponse<ZonelockdownResponseSingle> resp = zoneLockdownUpdateAZoneLockdownRuleWithHttpInfo(body, id, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Update a Zone Lockdown rule
     * Updates an existing Zone Lockdown rule.
     * @param body  (required)
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;ZonelockdownResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ZonelockdownResponseSingle> zoneLockdownUpdateAZoneLockdownRuleWithHttpInfo(Object body, String id, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = zoneLockdownUpdateAZoneLockdownRuleValidateBeforeCall(body, id, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ZonelockdownResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Zone Lockdown rule (asynchronously)
     * Updates an existing Zone Lockdown rule.
     * @param body  (required)
     * @param id  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zoneLockdownUpdateAZoneLockdownRuleAsync(Object body, String id, String zoneIdentifier, final ApiCallback<ZonelockdownResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zoneLockdownUpdateAZoneLockdownRuleValidateBeforeCall(body, id, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ZonelockdownResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
