/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiGatewayOperationsBody;
import io.swagger.client.model.CloudflareClientAPISchemasSingleResponse;
import io.swagger.client.model.CollectionResponse;
import io.swagger.client.model.CollectionResponsePaginated;
import io.swagger.client.model.DefaultResponse;
import io.swagger.client.model.InlineResponse4xx491;
import io.swagger.client.model.InlineResponse4xx492;
import io.swagger.client.model.InlineResponse4xx493;
import io.swagger.client.model.InlineResponse4xx494;
import io.swagger.client.model.InlineResponse4xx495;
import io.swagger.client.model.InlineResponse4xx496;
import io.swagger.client.model.SchemaResponseDiscovery;
import io.swagger.client.model.SchemaResponseWithThresholds;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiShieldEndpointManagementApi {
    private ApiClient apiClient;

    public ApiShieldEndpointManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiShieldEndpointManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiShieldEndpointManagementAddOperationsToAZone
     * @param body  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementAddOperationsToAZoneCall(List<ApiGatewayOperationsBody> body, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/operations"
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiShieldEndpointManagementAddOperationsToAZoneValidateBeforeCall(List<ApiGatewayOperationsBody> body, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiShieldEndpointManagementAddOperationsToAZone(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldEndpointManagementAddOperationsToAZone(Async)");
        }
        
        com.squareup.okhttp.Call call = apiShieldEndpointManagementAddOperationsToAZoneCall(body, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add operations to a zone
     * Add one or more operations to a zone. Endpoints can contain path variables. Host, method, endpoint will be normalized to a canoncial form when creating an operation and must be unique on the zone. Inserting an operation that matches an existing one will return the record of the already existing operation and update its last_updated date.
     * @param body  (required)
     * @param zoneId  (required)
     * @return CollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionResponse apiShieldEndpointManagementAddOperationsToAZone(List<ApiGatewayOperationsBody> body, String zoneId) throws ApiException {
        ApiResponse<CollectionResponse> resp = apiShieldEndpointManagementAddOperationsToAZoneWithHttpInfo(body, zoneId);
        return resp.getData();
    }

    /**
     * Add operations to a zone
     * Add one or more operations to a zone. Endpoints can contain path variables. Host, method, endpoint will be normalized to a canoncial form when creating an operation and must be unique on the zone. Inserting an operation that matches an existing one will return the record of the already existing operation and update its last_updated date.
     * @param body  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;CollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionResponse> apiShieldEndpointManagementAddOperationsToAZoneWithHttpInfo(List<ApiGatewayOperationsBody> body, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = apiShieldEndpointManagementAddOperationsToAZoneValidateBeforeCall(body, zoneId, null, null);
        Type localVarReturnType = new TypeToken<CollectionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add operations to a zone (asynchronously)
     * Add one or more operations to a zone. Endpoints can contain path variables. Host, method, endpoint will be normalized to a canoncial form when creating an operation and must be unique on the zone. Inserting an operation that matches an existing one will return the record of the already existing operation and update its last_updated date.
     * @param body  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementAddOperationsToAZoneAsync(List<ApiGatewayOperationsBody> body, String zoneId, final ApiCallback<CollectionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiShieldEndpointManagementAddOperationsToAZoneValidateBeforeCall(body, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiShieldEndpointManagementDeleteAnOperation
     * @param operationId  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementDeleteAnOperationCall(String operationId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/operations/{operation_id}"
            .replaceAll("\\{" + "operation_id" + "\\}", apiClient.escapeString(operationId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiShieldEndpointManagementDeleteAnOperationValidateBeforeCall(String operationId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling apiShieldEndpointManagementDeleteAnOperation(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldEndpointManagementDeleteAnOperation(Async)");
        }
        
        com.squareup.okhttp.Call call = apiShieldEndpointManagementDeleteAnOperationCall(operationId, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an operation
     * 
     * @param operationId  (required)
     * @param zoneId  (required)
     * @return DefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DefaultResponse apiShieldEndpointManagementDeleteAnOperation(String operationId, String zoneId) throws ApiException {
        ApiResponse<DefaultResponse> resp = apiShieldEndpointManagementDeleteAnOperationWithHttpInfo(operationId, zoneId);
        return resp.getData();
    }

    /**
     * Delete an operation
     * 
     * @param operationId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;DefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DefaultResponse> apiShieldEndpointManagementDeleteAnOperationWithHttpInfo(String operationId, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = apiShieldEndpointManagementDeleteAnOperationValidateBeforeCall(operationId, zoneId, null, null);
        Type localVarReturnType = new TypeToken<DefaultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an operation (asynchronously)
     * 
     * @param operationId  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementDeleteAnOperationAsync(String operationId, String zoneId, final ApiCallback<DefaultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiShieldEndpointManagementDeleteAnOperationValidateBeforeCall(operationId, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DefaultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiShieldEndpointManagementRetrieveApiDiscoveryResultsForAZone
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveApiDiscoveryResultsForAZoneCall(String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/discovery"
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveApiDiscoveryResultsForAZoneValidateBeforeCall(String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldEndpointManagementRetrieveApiDiscoveryResultsForAZone(Async)");
        }
        
        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveApiDiscoveryResultsForAZoneCall(zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve API Discovery results for a zone
     * Retrieve the most up to date view of API Discovery on a zone.
     * @param zoneId  (required)
     * @return SchemaResponseDiscovery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemaResponseDiscovery apiShieldEndpointManagementRetrieveApiDiscoveryResultsForAZone(String zoneId) throws ApiException {
        ApiResponse<SchemaResponseDiscovery> resp = apiShieldEndpointManagementRetrieveApiDiscoveryResultsForAZoneWithHttpInfo(zoneId);
        return resp.getData();
    }

    /**
     * Retrieve API Discovery results for a zone
     * Retrieve the most up to date view of API Discovery on a zone.
     * @param zoneId  (required)
     * @return ApiResponse&lt;SchemaResponseDiscovery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemaResponseDiscovery> apiShieldEndpointManagementRetrieveApiDiscoveryResultsForAZoneWithHttpInfo(String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveApiDiscoveryResultsForAZoneValidateBeforeCall(zoneId, null, null);
        Type localVarReturnType = new TypeToken<SchemaResponseDiscovery>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve API Discovery results for a zone (asynchronously)
     * Retrieve the most up to date view of API Discovery on a zone.
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveApiDiscoveryResultsForAZoneAsync(String zoneId, final ApiCallback<SchemaResponseDiscovery> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveApiDiscoveryResultsForAZoneValidateBeforeCall(zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemaResponseDiscovery>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZone
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZoneCall(String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/operations"
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZoneValidateBeforeCall(String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZone(Async)");
        }
        
        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZoneCall(zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve information about all operations on a zone
     * 
     * @param zoneId  (required)
     * @return CollectionResponsePaginated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionResponsePaginated apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZone(String zoneId) throws ApiException {
        ApiResponse<CollectionResponsePaginated> resp = apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZoneWithHttpInfo(zoneId);
        return resp.getData();
    }

    /**
     * Retrieve information about all operations on a zone
     * 
     * @param zoneId  (required)
     * @return ApiResponse&lt;CollectionResponsePaginated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionResponsePaginated> apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZoneWithHttpInfo(String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZoneValidateBeforeCall(zoneId, null, null);
        Type localVarReturnType = new TypeToken<CollectionResponsePaginated>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve information about all operations on a zone (asynchronously)
     * 
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZoneAsync(String zoneId, final ApiCallback<CollectionResponsePaginated> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZoneValidateBeforeCall(zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionResponsePaginated>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiShieldEndpointManagementRetrieveInformationAboutAnOperation
     * @param operationId  (required)
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveInformationAboutAnOperationCall(String operationId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/operations/{operation_id}"
            .replaceAll("\\{" + "operation_id" + "\\}", apiClient.escapeString(operationId.toString()))
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveInformationAboutAnOperationValidateBeforeCall(String operationId, String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling apiShieldEndpointManagementRetrieveInformationAboutAnOperation(Async)");
        }
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldEndpointManagementRetrieveInformationAboutAnOperation(Async)");
        }
        
        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveInformationAboutAnOperationCall(operationId, zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve information about an operation
     * 
     * @param operationId  (required)
     * @param zoneId  (required)
     * @return CloudflareClientAPISchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPISchemasSingleResponse apiShieldEndpointManagementRetrieveInformationAboutAnOperation(String operationId, String zoneId) throws ApiException {
        ApiResponse<CloudflareClientAPISchemasSingleResponse> resp = apiShieldEndpointManagementRetrieveInformationAboutAnOperationWithHttpInfo(operationId, zoneId);
        return resp.getData();
    }

    /**
     * Retrieve information about an operation
     * 
     * @param operationId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;CloudflareClientAPISchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPISchemasSingleResponse> apiShieldEndpointManagementRetrieveInformationAboutAnOperationWithHttpInfo(String operationId, String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveInformationAboutAnOperationValidateBeforeCall(operationId, zoneId, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPISchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve information about an operation (asynchronously)
     * 
     * @param operationId  (required)
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveInformationAboutAnOperationAsync(String operationId, String zoneId, final ApiCallback<CloudflareClientAPISchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveInformationAboutAnOperationValidateBeforeCall(operationId, zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPISchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemas
     * @param zoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemasCall(String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/schemas"
            .replaceAll("\\{" + "zone_id" + "\\}", apiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemasValidateBeforeCall(String zoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemas(Async)");
        }
        
        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemasCall(zoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve operations and features as OpenAPI schemas
     * 
     * @param zoneId  (required)
     * @return SchemaResponseWithThresholds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemaResponseWithThresholds apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemas(String zoneId) throws ApiException {
        ApiResponse<SchemaResponseWithThresholds> resp = apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemasWithHttpInfo(zoneId);
        return resp.getData();
    }

    /**
     * Retrieve operations and features as OpenAPI schemas
     * 
     * @param zoneId  (required)
     * @return ApiResponse&lt;SchemaResponseWithThresholds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemaResponseWithThresholds> apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemasWithHttpInfo(String zoneId) throws ApiException {
        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemasValidateBeforeCall(zoneId, null, null);
        Type localVarReturnType = new TypeToken<SchemaResponseWithThresholds>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve operations and features as OpenAPI schemas (asynchronously)
     * 
     * @param zoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemasAsync(String zoneId, final ApiCallback<SchemaResponseWithThresholds> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemasValidateBeforeCall(zoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemaResponseWithThresholds>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
