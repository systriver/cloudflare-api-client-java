/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse20039;
import io.swagger.client.model.InlineResponse20093;
import io.swagger.client.model.InlineResponse20094;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarNetflowsApi {
    private ApiClient apiClient;

    public RadarNetflowsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarNetflowsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for radarGetNetflowsTopASes
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetNetflowsTopASesCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/netflows/top/ases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetNetflowsTopASesValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetNetflowsTopASesCall(limit, name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems
     * Get the top autonomous systems (AS) by network traffic. Values are a percentage out of the total network traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20093
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20093 radarGetNetflowsTopASes(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        ApiResponse<InlineResponse20093> resp = radarGetNetflowsTopASesWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems
     * Get the top autonomous systems (AS) by network traffic. Values are a percentage out of the total network traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20093&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20093> radarGetNetflowsTopASesWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetNetflowsTopASesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20093>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems (asynchronously)
     * Get the top autonomous systems (AS) by network traffic. Values are a percentage out of the total network traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetNetflowsTopASesAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ApiCallback<InlineResponse20093> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetNetflowsTopASesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20093>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetNetflowsTopLocations
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetNetflowsTopLocationsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/netflows/top/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetNetflowsTopLocationsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetNetflowsTopLocationsCall(limit, name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations
     * Get the top locations by network traffic. Values are a percentage out of the total network traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20094
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20094 radarGetNetflowsTopLocations(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        ApiResponse<InlineResponse20094> resp = radarGetNetflowsTopLocationsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, format);
        return resp.getData();
    }

    /**
     * Get top locations
     * Get the top locations by network traffic. Values are a percentage out of the total network traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20094&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20094> radarGetNetflowsTopLocationsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetNetflowsTopLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20094>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations (asynchronously)
     * Get the top locations by network traffic. Values are a percentage out of the total network traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetNetflowsTopLocationsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, String format, final ApiCallback<InlineResponse20094> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetNetflowsTopLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20094>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetTimeseries
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param product Array of network traffic product types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> product, List<String> asn, List<String> location, String normalization, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/netflows/timeseries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (product != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "product", product));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (normalization != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("normalization", normalization));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetTimeseriesValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> product, List<String> asn, List<String> location, String normalization, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetTimeseriesCall(aggInterval, name, dateRange, dateStart, dateEnd, product, asn, location, normalization, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get NetFlow time series
     * Get network traffic change over time. Values are normalized using min-max by default, with the minimum set to 0. When asking for multiple time series, you can also get the percentage relative change of the first/main series, with respect to the second/control series - for example, to get the relative change of this week from the previous week, the first series would have a date range of &#x60;7d&#x60;, the second, a date range of &#x60;7dControl&#x60;, and the normalization would be set to &#x60;PERCENTAGE_CHANGE&#x60;.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param product Array of network traffic product types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20039
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20039 radarGetTimeseries(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> product, List<String> asn, List<String> location, String normalization, String format) throws ApiException {
        ApiResponse<InlineResponse20039> resp = radarGetTimeseriesWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, product, asn, location, normalization, format);
        return resp.getData();
    }

    /**
     * Get NetFlow time series
     * Get network traffic change over time. Values are normalized using min-max by default, with the minimum set to 0. When asking for multiple time series, you can also get the percentage relative change of the first/main series, with respect to the second/control series - for example, to get the relative change of this week from the previous week, the first series would have a date range of &#x60;7d&#x60;, the second, a date range of &#x60;7dControl&#x60;, and the normalization would be set to &#x60;PERCENTAGE_CHANGE&#x60;.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param product Array of network traffic product types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20039&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20039> radarGetTimeseriesWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> product, List<String> asn, List<String> location, String normalization, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetTimeseriesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, product, asn, location, normalization, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20039>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get NetFlow time series (asynchronously)
     * Get network traffic change over time. Values are normalized using min-max by default, with the minimum set to 0. When asking for multiple time series, you can also get the percentage relative change of the first/main series, with respect to the second/control series - for example, to get the relative change of this week from the previous week, the first series would have a date range of &#x60;7d&#x60;, the second, a date range of &#x60;7dControl&#x60;, and the normalization would be set to &#x60;PERCENTAGE_CHANGE&#x60;.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param product Array of network traffic product types. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param normalization Normalization method applied. Refer to [Normalization methods](https://developers.cloudflare.com/radar/concepts/normalization/). (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> product, List<String> asn, List<String> location, String normalization, String format, final ApiCallback<InlineResponse20039> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetTimeseriesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, product, asn, location, normalization, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20039>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
