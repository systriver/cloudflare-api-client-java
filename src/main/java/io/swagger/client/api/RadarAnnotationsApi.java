/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse20031;
import io.swagger.client.model.InlineResponse20032;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarAnnotationsApi {
    private ApiClient apiClient;

    public RadarAnnotationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarAnnotationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for radarGetAnnotationsOutages
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param dateRange Shorthand date ranges for the last X days - use when you don&#x27;t need specific start and end dates. (optional)
     * @param dateStart Start of the date range (inclusive). (optional)
     * @param dateEnd End of the date range (inclusive). (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAnnotationsOutagesCall(Integer limit, Integer offset, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/annotations/outages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (dateRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateRange", dateRange));
        if (dateStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateStart", dateStart));
        if (dateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateEnd", dateEnd));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAnnotationsOutagesValidateBeforeCall(Integer limit, Integer offset, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAnnotationsOutagesCall(limit, offset, dateRange, dateStart, dateEnd, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get outages annotations
     * 
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param dateRange Shorthand date ranges for the last X days - use when you don&#x27;t need specific start and end dates. (optional)
     * @param dateStart Start of the date range (inclusive). (optional)
     * @param dateEnd End of the date range (inclusive). (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20031
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20031 radarGetAnnotationsOutages(Integer limit, Integer offset, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String format) throws ApiException {
        ApiResponse<InlineResponse20031> resp = radarGetAnnotationsOutagesWithHttpInfo(limit, offset, dateRange, dateStart, dateEnd, format);
        return resp.getData();
    }

    /**
     * Get outages annotations
     * 
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param dateRange Shorthand date ranges for the last X days - use when you don&#x27;t need specific start and end dates. (optional)
     * @param dateStart Start of the date range (inclusive). (optional)
     * @param dateEnd End of the date range (inclusive). (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20031&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20031> radarGetAnnotationsOutagesWithHttpInfo(Integer limit, Integer offset, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAnnotationsOutagesValidateBeforeCall(limit, offset, dateRange, dateStart, dateEnd, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20031>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get outages annotations (asynchronously)
     * 
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param offset Number of objects to skip before grabbing results. (optional, default to 0)
     * @param dateRange Shorthand date ranges for the last X days - use when you don&#x27;t need specific start and end dates. (optional)
     * @param dateStart Start of the date range (inclusive). (optional)
     * @param dateEnd End of the date range (inclusive). (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAnnotationsOutagesAsync(Integer limit, Integer offset, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String format, final ApiCallback<InlineResponse20031> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAnnotationsOutagesValidateBeforeCall(limit, offset, dateRange, dateStart, dateEnd, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20031>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetAnnotationsOutagesTop
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param dateRange Shorthand date ranges for the last X days - use when you don&#x27;t need specific start and end dates. (optional)
     * @param dateStart Start of the date range (inclusive). (optional)
     * @param dateEnd End of the date range (inclusive). (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetAnnotationsOutagesTopCall(Integer limit, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/annotations/outages/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dateRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateRange", dateRange));
        if (dateStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateStart", dateStart));
        if (dateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateEnd", dateEnd));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetAnnotationsOutagesTopValidateBeforeCall(Integer limit, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetAnnotationsOutagesTopCall(limit, dateRange, dateStart, dateEnd, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top outages annotations
     * 
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param dateRange Shorthand date ranges for the last X days - use when you don&#x27;t need specific start and end dates. (optional)
     * @param dateStart Start of the date range (inclusive). (optional)
     * @param dateEnd End of the date range (inclusive). (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20032
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20032 radarGetAnnotationsOutagesTop(Integer limit, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String format) throws ApiException {
        ApiResponse<InlineResponse20032> resp = radarGetAnnotationsOutagesTopWithHttpInfo(limit, dateRange, dateStart, dateEnd, format);
        return resp.getData();
    }

    /**
     * Get top outages annotations
     * 
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param dateRange Shorthand date ranges for the last X days - use when you don&#x27;t need specific start and end dates. (optional)
     * @param dateStart Start of the date range (inclusive). (optional)
     * @param dateEnd End of the date range (inclusive). (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20032&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20032> radarGetAnnotationsOutagesTopWithHttpInfo(Integer limit, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetAnnotationsOutagesTopValidateBeforeCall(limit, dateRange, dateStart, dateEnd, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20032>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top outages annotations (asynchronously)
     * 
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param dateRange Shorthand date ranges for the last X days - use when you don&#x27;t need specific start and end dates. (optional)
     * @param dateStart Start of the date range (inclusive). (optional)
     * @param dateEnd End of the date range (inclusive). (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetAnnotationsOutagesTopAsync(Integer limit, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String format, final ApiCallback<InlineResponse20032> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetAnnotationsOutagesTopValidateBeforeCall(limit, dateRange, dateStart, dateEnd, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20032>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
