/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ComponentsSchemasModifiedTunnelsCollectionResponse;
import io.swagger.client.model.ComponentsSchemasTunnelModifiedResponse;
import io.swagger.client.model.ComponentsSchemasTunnelSingleResponse;
import io.swagger.client.model.ComponentsSchemasTunnelUpdateRequest;
import io.swagger.client.model.ComponentsSchemasTunnelsCollectionResponse;
import io.swagger.client.model.InlineResponse4xx86;
import io.swagger.client.model.InlineResponse4xx87;
import io.swagger.client.model.InlineResponse4xx88;
import io.swagger.client.model.InlineResponse4xx89;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MagicInterconnectsApi {
    private ApiClient apiClient;

    public MagicInterconnectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MagicInterconnectsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for magicInterconnectsListInterconnectDetails
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicInterconnectsListInterconnectDetailsCall(String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/magic/cf_interconnects/{tunnel_identifier}"
            .replaceAll("\\{" + "tunnel_identifier" + "\\}", apiClient.escapeString(tunnelIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicInterconnectsListInterconnectDetailsValidateBeforeCall(String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tunnelIdentifier' is set
        if (tunnelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'tunnelIdentifier' when calling magicInterconnectsListInterconnectDetails(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicInterconnectsListInterconnectDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = magicInterconnectsListInterconnectDetailsCall(tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List interconnect Details
     * Lists details for a specific interconnect.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ComponentsSchemasTunnelSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentsSchemasTunnelSingleResponse magicInterconnectsListInterconnectDetails(String tunnelIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ComponentsSchemasTunnelSingleResponse> resp = magicInterconnectsListInterconnectDetailsWithHttpInfo(tunnelIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * List interconnect Details
     * Lists details for a specific interconnect.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ComponentsSchemasTunnelSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentsSchemasTunnelSingleResponse> magicInterconnectsListInterconnectDetailsWithHttpInfo(String tunnelIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicInterconnectsListInterconnectDetailsValidateBeforeCall(tunnelIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ComponentsSchemasTunnelSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List interconnect Details (asynchronously)
     * Lists details for a specific interconnect.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicInterconnectsListInterconnectDetailsAsync(String tunnelIdentifier, String accountIdentifier, final ApiCallback<ComponentsSchemasTunnelSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicInterconnectsListInterconnectDetailsValidateBeforeCall(tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentsSchemasTunnelSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicInterconnectsListInterconnects
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicInterconnectsListInterconnectsCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/magic/cf_interconnects"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicInterconnectsListInterconnectsValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicInterconnectsListInterconnects(Async)");
        }
        
        com.squareup.okhttp.Call call = magicInterconnectsListInterconnectsCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List interconnects
     * Lists interconnects associated with an account.
     * @param accountIdentifier  (required)
     * @return ComponentsSchemasTunnelsCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentsSchemasTunnelsCollectionResponse magicInterconnectsListInterconnects(String accountIdentifier) throws ApiException {
        ApiResponse<ComponentsSchemasTunnelsCollectionResponse> resp = magicInterconnectsListInterconnectsWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List interconnects
     * Lists interconnects associated with an account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ComponentsSchemasTunnelsCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentsSchemasTunnelsCollectionResponse> magicInterconnectsListInterconnectsWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicInterconnectsListInterconnectsValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ComponentsSchemasTunnelsCollectionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List interconnects (asynchronously)
     * Lists interconnects associated with an account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicInterconnectsListInterconnectsAsync(String accountIdentifier, final ApiCallback<ComponentsSchemasTunnelsCollectionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicInterconnectsListInterconnectsValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentsSchemasTunnelsCollectionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicInterconnectsUpdateInterconnect
     * @param body  (required)
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicInterconnectsUpdateInterconnectCall(ComponentsSchemasTunnelUpdateRequest body, String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/magic/cf_interconnects/{tunnel_identifier}"
            .replaceAll("\\{" + "tunnel_identifier" + "\\}", apiClient.escapeString(tunnelIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicInterconnectsUpdateInterconnectValidateBeforeCall(ComponentsSchemasTunnelUpdateRequest body, String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling magicInterconnectsUpdateInterconnect(Async)");
        }
        // verify the required parameter 'tunnelIdentifier' is set
        if (tunnelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'tunnelIdentifier' when calling magicInterconnectsUpdateInterconnect(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicInterconnectsUpdateInterconnect(Async)");
        }
        
        com.squareup.okhttp.Call call = magicInterconnectsUpdateInterconnectCall(body, tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update interconnect
     * Updates a specific interconnect associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ComponentsSchemasTunnelModifiedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentsSchemasTunnelModifiedResponse magicInterconnectsUpdateInterconnect(ComponentsSchemasTunnelUpdateRequest body, String tunnelIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ComponentsSchemasTunnelModifiedResponse> resp = magicInterconnectsUpdateInterconnectWithHttpInfo(body, tunnelIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update interconnect
     * Updates a specific interconnect associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ComponentsSchemasTunnelModifiedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentsSchemasTunnelModifiedResponse> magicInterconnectsUpdateInterconnectWithHttpInfo(ComponentsSchemasTunnelUpdateRequest body, String tunnelIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicInterconnectsUpdateInterconnectValidateBeforeCall(body, tunnelIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ComponentsSchemasTunnelModifiedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update interconnect (asynchronously)
     * Updates a specific interconnect associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicInterconnectsUpdateInterconnectAsync(ComponentsSchemasTunnelUpdateRequest body, String tunnelIdentifier, String accountIdentifier, final ApiCallback<ComponentsSchemasTunnelModifiedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicInterconnectsUpdateInterconnectValidateBeforeCall(body, tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentsSchemasTunnelModifiedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicInterconnectsUpdateMultipleInterconnects
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicInterconnectsUpdateMultipleInterconnectsCall(Object body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/magic/cf_interconnects"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicInterconnectsUpdateMultipleInterconnectsValidateBeforeCall(Object body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling magicInterconnectsUpdateMultipleInterconnects(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicInterconnectsUpdateMultipleInterconnects(Async)");
        }
        
        com.squareup.okhttp.Call call = magicInterconnectsUpdateMultipleInterconnectsCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update multiple interconnects
     * Updates multiple interconnects associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ComponentsSchemasModifiedTunnelsCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentsSchemasModifiedTunnelsCollectionResponse magicInterconnectsUpdateMultipleInterconnects(Object body, String accountIdentifier) throws ApiException {
        ApiResponse<ComponentsSchemasModifiedTunnelsCollectionResponse> resp = magicInterconnectsUpdateMultipleInterconnectsWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update multiple interconnects
     * Updates multiple interconnects associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ComponentsSchemasModifiedTunnelsCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentsSchemasModifiedTunnelsCollectionResponse> magicInterconnectsUpdateMultipleInterconnectsWithHttpInfo(Object body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicInterconnectsUpdateMultipleInterconnectsValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ComponentsSchemasModifiedTunnelsCollectionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update multiple interconnects (asynchronously)
     * Updates multiple interconnects associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicInterconnectsUpdateMultipleInterconnectsAsync(Object body, String accountIdentifier, final ApiCallback<ComponentsSchemasModifiedTunnelsCollectionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicInterconnectsUpdateMultipleInterconnectsValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentsSchemasModifiedTunnelsCollectionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
