/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DestinationExistsBody;
import io.swagger.client.model.DestinationExistsResponse;
import io.swagger.client.model.GetOwnershipResponse;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse4xx77;
import io.swagger.client.model.InlineResponse4xx78;
import io.swagger.client.model.InlineResponse4xx79;
import io.swagger.client.model.InlineResponse4xx80;
import io.swagger.client.model.InlineResponse4xx81;
import io.swagger.client.model.InlineResponse4xx82;
import io.swagger.client.model.InlineResponse4xx83;
import io.swagger.client.model.InlineResponse4xx84;
import io.swagger.client.model.JobsJobIdentifierBody;
import io.swagger.client.model.LogpushFieldResponseCollection;
import io.swagger.client.model.LogpushJobResponseCollection;
import io.swagger.client.model.LogpushJobResponseSingle;
import io.swagger.client.model.LogpushJobsBody;
import io.swagger.client.model.LogpushOwnershipBody;
import io.swagger.client.model.OwnershipValidateBody;
import io.swagger.client.model.ValidateOriginBody;
import io.swagger.client.model.ValidateOwnershipResponse;
import io.swagger.client.model.ValidateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogpushJobsForAnAccountApi {
    private ApiClient apiClient;

    public LogpushJobsForAnAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogpushJobsForAnAccountApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAccountsAccountIdentifierLogpushJobsJobIdentifier
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountsAccountIdentifierLogpushJobsJobIdentifierCall(String jobIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/logpush/jobs/{job_identifier}"
            .replaceAll("\\{" + "job_identifier" + "\\}", apiClient.escapeString(jobIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(String jobIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobIdentifier' is set
        if (jobIdentifier == null) {
            throw new ApiException("Missing the required parameter 'jobIdentifier' when calling deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAccountsAccountIdentifierLogpushJobsJobIdentifierCall(jobIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Logpush job
     * Deletes a Logpush job.
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(String jobIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<InlineResponse2004> resp = deleteAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(jobIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete Logpush job
     * Deletes a Logpush job.
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> deleteAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(String jobIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Logpush job (asynchronously)
     * Deletes a Logpush job.
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountsAccountIdentifierLogpushJobsJobIdentifierAsync(String jobIdentifier, String accountIdentifier, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAccountsAccountIdentifierLogpushValidateDestinationExists
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountsAccountIdentifierLogpushValidateDestinationExistsCall(DestinationExistsBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/logpush/validate/destination/exists"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountsAccountIdentifierLogpushValidateDestinationExistsValidateBeforeCall(DestinationExistsBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteAccountsAccountIdentifierLogpushValidateDestinationExists(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteAccountsAccountIdentifierLogpushValidateDestinationExists(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAccountsAccountIdentifierLogpushValidateDestinationExistsCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check destination exists
     * Checks if there is an existing job with a destination.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return DestinationExistsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DestinationExistsResponse deleteAccountsAccountIdentifierLogpushValidateDestinationExists(DestinationExistsBody body, String accountIdentifier) throws ApiException {
        ApiResponse<DestinationExistsResponse> resp = deleteAccountsAccountIdentifierLogpushValidateDestinationExistsWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Check destination exists
     * Checks if there is an existing job with a destination.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;DestinationExistsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DestinationExistsResponse> deleteAccountsAccountIdentifierLogpushValidateDestinationExistsWithHttpInfo(DestinationExistsBody body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountsAccountIdentifierLogpushValidateDestinationExistsValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<DestinationExistsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check destination exists (asynchronously)
     * Checks if there is an existing job with a destination.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountsAccountIdentifierLogpushValidateDestinationExistsAsync(DestinationExistsBody body, String accountIdentifier, final ApiCallback<DestinationExistsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountsAccountIdentifierLogpushValidateDestinationExistsValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DestinationExistsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountsAccountIdentifierLogpushDatasetsDatasetFields
     * @param dataset  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsCall(String dataset, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/logpush/datasets/{dataset}/fields"
            .replaceAll("\\{" + "dataset" + "\\}", apiClient.escapeString(dataset.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(String dataset, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling getAccountsAccountIdentifierLogpushDatasetsDatasetFields(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAccountsAccountIdentifierLogpushDatasetsDatasetFields(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsCall(dataset, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List fields
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param dataset  (required)
     * @param accountIdentifier  (required)
     * @return LogpushFieldResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushFieldResponseCollection getAccountsAccountIdentifierLogpushDatasetsDatasetFields(String dataset, String accountIdentifier) throws ApiException {
        ApiResponse<LogpushFieldResponseCollection> resp = getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsWithHttpInfo(dataset, accountIdentifier);
        return resp.getData();
    }

    /**
     * List fields
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param dataset  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;LogpushFieldResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushFieldResponseCollection> getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsWithHttpInfo(String dataset, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(dataset, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushFieldResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List fields (asynchronously)
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @param dataset  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsAsync(String dataset, String accountIdentifier, final ApiCallback<LogpushFieldResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushDatasetsDatasetFieldsValidateBeforeCall(dataset, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushFieldResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountsAccountIdentifierLogpushDatasetsDatasetJobs
     * @param dataset  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushDatasetsDatasetJobsCall(String dataset, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/logpush/datasets/{dataset}/jobs"
            .replaceAll("\\{" + "dataset" + "\\}", apiClient.escapeString(dataset.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(String dataset, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushDatasetsDatasetJobsCall(dataset, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Logpush jobs for a dataset
     * Lists Logpush jobs for an account for a dataset.
     * @param dataset  (required)
     * @param accountIdentifier  (required)
     * @return LogpushJobResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushJobResponseCollection getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(String dataset, String accountIdentifier) throws ApiException {
        ApiResponse<LogpushJobResponseCollection> resp = getAccountsAccountIdentifierLogpushDatasetsDatasetJobsWithHttpInfo(dataset, accountIdentifier);
        return resp.getData();
    }

    /**
     * List Logpush jobs for a dataset
     * Lists Logpush jobs for an account for a dataset.
     * @param dataset  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;LogpushJobResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushJobResponseCollection> getAccountsAccountIdentifierLogpushDatasetsDatasetJobsWithHttpInfo(String dataset, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(dataset, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushJobResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Logpush jobs for a dataset (asynchronously)
     * Lists Logpush jobs for an account for a dataset.
     * @param dataset  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushDatasetsDatasetJobsAsync(String dataset, String accountIdentifier, final ApiCallback<LogpushJobResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushDatasetsDatasetJobsValidateBeforeCall(dataset, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushJobResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountsAccountIdentifierLogpushJobs
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushJobsCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/logpush/jobs"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushJobsValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAccountsAccountIdentifierLogpushJobs(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushJobsCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Logpush jobs
     * Lists Logpush jobs for an account.
     * @param accountIdentifier  (required)
     * @return LogpushJobResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushJobResponseCollection getAccountsAccountIdentifierLogpushJobs(String accountIdentifier) throws ApiException {
        ApiResponse<LogpushJobResponseCollection> resp = getAccountsAccountIdentifierLogpushJobsWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List Logpush jobs
     * Lists Logpush jobs for an account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;LogpushJobResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushJobResponseCollection> getAccountsAccountIdentifierLogpushJobsWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushJobsValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushJobResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Logpush jobs (asynchronously)
     * Lists Logpush jobs for an account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushJobsAsync(String accountIdentifier, final ApiCallback<LogpushJobResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushJobsValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushJobResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountsAccountIdentifierLogpushJobsJobIdentifier
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushJobsJobIdentifierCall(String jobIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/logpush/jobs/{job_identifier}"
            .replaceAll("\\{" + "job_identifier" + "\\}", apiClient.escapeString(jobIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(String jobIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobIdentifier' is set
        if (jobIdentifier == null) {
            throw new ApiException("Missing the required parameter 'jobIdentifier' when calling getAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushJobsJobIdentifierCall(jobIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Logpush job details
     * Gets the details of a Logpush job.
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return LogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushJobResponseSingle getAccountsAccountIdentifierLogpushJobsJobIdentifier(String jobIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<LogpushJobResponseSingle> resp = getAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(jobIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get Logpush job details
     * Gets the details of a Logpush job.
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;LogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushJobResponseSingle> getAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(String jobIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Logpush job details (asynchronously)
     * Gets the details of a Logpush job.
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountsAccountIdentifierLogpushJobsJobIdentifierAsync(String jobIdentifier, String accountIdentifier, final ApiCallback<LogpushJobResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(jobIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountsAccountIdentifierLogpushJobs
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushJobsCall(LogpushJobsBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/logpush/jobs"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushJobsValidateBeforeCall(LogpushJobsBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postAccountsAccountIdentifierLogpushJobs(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postAccountsAccountIdentifierLogpushJobs(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushJobsCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Logpush job
     * Creates a new Logpush job for an account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return LogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushJobResponseSingle postAccountsAccountIdentifierLogpushJobs(LogpushJobsBody body, String accountIdentifier) throws ApiException {
        ApiResponse<LogpushJobResponseSingle> resp = postAccountsAccountIdentifierLogpushJobsWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create Logpush job
     * Creates a new Logpush job for an account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;LogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushJobResponseSingle> postAccountsAccountIdentifierLogpushJobsWithHttpInfo(LogpushJobsBody body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushJobsValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Logpush job (asynchronously)
     * Creates a new Logpush job for an account.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushJobsAsync(LogpushJobsBody body, String accountIdentifier, final ApiCallback<LogpushJobResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushJobsValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountsAccountIdentifierLogpushOwnership
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushOwnershipCall(LogpushOwnershipBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/logpush/ownership"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushOwnershipValidateBeforeCall(LogpushOwnershipBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postAccountsAccountIdentifierLogpushOwnership(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postAccountsAccountIdentifierLogpushOwnership(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushOwnershipCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get ownership challenge
     * Gets a new ownership challenge sent to your destination.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return GetOwnershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetOwnershipResponse postAccountsAccountIdentifierLogpushOwnership(LogpushOwnershipBody body, String accountIdentifier) throws ApiException {
        ApiResponse<GetOwnershipResponse> resp = postAccountsAccountIdentifierLogpushOwnershipWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get ownership challenge
     * Gets a new ownership challenge sent to your destination.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;GetOwnershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetOwnershipResponse> postAccountsAccountIdentifierLogpushOwnershipWithHttpInfo(LogpushOwnershipBody body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushOwnershipValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<GetOwnershipResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get ownership challenge (asynchronously)
     * Gets a new ownership challenge sent to your destination.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushOwnershipAsync(LogpushOwnershipBody body, String accountIdentifier, final ApiCallback<GetOwnershipResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushOwnershipValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOwnershipResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountsAccountIdentifierLogpushOwnershipValidate
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushOwnershipValidateCall(OwnershipValidateBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/logpush/ownership/validate"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushOwnershipValidateValidateBeforeCall(OwnershipValidateBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postAccountsAccountIdentifierLogpushOwnershipValidate(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postAccountsAccountIdentifierLogpushOwnershipValidate(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushOwnershipValidateCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Validate ownership challenge
     * Validates ownership challenge of the destination.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ValidateOwnershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidateOwnershipResponse postAccountsAccountIdentifierLogpushOwnershipValidate(OwnershipValidateBody body, String accountIdentifier) throws ApiException {
        ApiResponse<ValidateOwnershipResponse> resp = postAccountsAccountIdentifierLogpushOwnershipValidateWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Validate ownership challenge
     * Validates ownership challenge of the destination.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ValidateOwnershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidateOwnershipResponse> postAccountsAccountIdentifierLogpushOwnershipValidateWithHttpInfo(OwnershipValidateBody body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushOwnershipValidateValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ValidateOwnershipResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate ownership challenge (asynchronously)
     * Validates ownership challenge of the destination.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushOwnershipValidateAsync(OwnershipValidateBody body, String accountIdentifier, final ApiCallback<ValidateOwnershipResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushOwnershipValidateValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidateOwnershipResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountsAccountIdentifierLogpushValidateOrigin
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushValidateOriginCall(ValidateOriginBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/logpush/validate/origin"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushValidateOriginValidateBeforeCall(ValidateOriginBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postAccountsAccountIdentifierLogpushValidateOrigin(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postAccountsAccountIdentifierLogpushValidateOrigin(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushValidateOriginCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Validate origin
     * Validates logpull origin with logpull_options.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ValidateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidateResponse postAccountsAccountIdentifierLogpushValidateOrigin(ValidateOriginBody body, String accountIdentifier) throws ApiException {
        ApiResponse<ValidateResponse> resp = postAccountsAccountIdentifierLogpushValidateOriginWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Validate origin
     * Validates logpull origin with logpull_options.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ValidateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidateResponse> postAccountsAccountIdentifierLogpushValidateOriginWithHttpInfo(ValidateOriginBody body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushValidateOriginValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ValidateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate origin (asynchronously)
     * Validates logpull origin with logpull_options.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountsAccountIdentifierLogpushValidateOriginAsync(ValidateOriginBody body, String accountIdentifier, final ApiCallback<ValidateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountsAccountIdentifierLogpushValidateOriginValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAccountsAccountIdentifierLogpushJobsJobIdentifier
     * @param body  (required)
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAccountsAccountIdentifierLogpushJobsJobIdentifierCall(JobsJobIdentifierBody body, String jobIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/logpush/jobs/{job_identifier}"
            .replaceAll("\\{" + "job_identifier" + "\\}", apiClient.escapeString(jobIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(JobsJobIdentifierBody body, String jobIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }
        // verify the required parameter 'jobIdentifier' is set
        if (jobIdentifier == null) {
            throw new ApiException("Missing the required parameter 'jobIdentifier' when calling putAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling putAccountsAccountIdentifierLogpushJobsJobIdentifier(Async)");
        }
        
        com.squareup.okhttp.Call call = putAccountsAccountIdentifierLogpushJobsJobIdentifierCall(body, jobIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Logpush job
     * Updates a Logpush job.
     * @param body  (required)
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return LogpushJobResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogpushJobResponseSingle putAccountsAccountIdentifierLogpushJobsJobIdentifier(JobsJobIdentifierBody body, String jobIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<LogpushJobResponseSingle> resp = putAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(body, jobIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update Logpush job
     * Updates a Logpush job.
     * @param body  (required)
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;LogpushJobResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogpushJobResponseSingle> putAccountsAccountIdentifierLogpushJobsJobIdentifierWithHttpInfo(JobsJobIdentifierBody body, String jobIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = putAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(body, jobIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Logpush job (asynchronously)
     * Updates a Logpush job.
     * @param body  (required)
     * @param jobIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAccountsAccountIdentifierLogpushJobsJobIdentifierAsync(JobsJobIdentifierBody body, String jobIdentifier, String accountIdentifier, final ApiCallback<LogpushJobResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAccountsAccountIdentifierLogpushJobsJobIdentifierValidateBeforeCall(body, jobIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogpushJobResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
