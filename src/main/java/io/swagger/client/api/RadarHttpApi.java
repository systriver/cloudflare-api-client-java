/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse20046;
import io.swagger.client.model.InlineResponse20071;
import io.swagger.client.model.InlineResponse20077;
import io.swagger.client.model.InlineResponse20078;
import io.swagger.client.model.InlineResponse20079;
import io.swagger.client.model.InlineResponse20080;
import io.swagger.client.model.InlineResponse20081;
import io.swagger.client.model.InlineResponse20082;
import io.swagger.client.model.InlineResponse20083;
import io.swagger.client.model.InlineResponse20084;
import io.swagger.client.model.InlineResponse20085;
import io.swagger.client.model.InlineResponse20086;
import io.swagger.client.model.InlineResponse20087;
import io.swagger.client.model.InlineResponse20088;
import io.swagger.client.model.InlineResponse20089;
import io.swagger.client.model.InlineResponse20090;
import io.swagger.client.model.InlineResponse20091;
import io.swagger.client.model.InlineResponse20092;
import io.swagger.client.model.InlineResponse404;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarHttpApi {
    private ApiClient apiClient;

    public RadarHttpApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarHttpApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for radarGetHttpTopASes
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/ases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopASesValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetHttpTopASesCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by HTTP requests
     * Get the top autonomous systems (AS) by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetHttpTopASes(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetHttpTopASesWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by HTTP requests
     * Get the top autonomous systems (AS) by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetHttpTopASesWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopASesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by HTTP requests (asynchronously)
     * Get the top autonomous systems (AS) by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopASesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopASesByBotClass
     * @param botClass Bot class. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByBotClassCall(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/ases/bot_class/{bot_class}"
            .replaceAll("\\{" + "bot_class" + "\\}", apiClient.escapeString(botClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopASesByBotClassValidateBeforeCall(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'botClass' is set
        if (botClass == null) {
            throw new ApiException("Missing the required parameter 'botClass' when calling radarGetHttpTopASesByBotClass(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopASesByBotClassCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by bot class
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#x27;s bot score - refer to [Bot Scores](https://developers.cloudflare.com/bots/concepts/bot-score) for more information. Values are a percentage out of the total traffic.
     * @param botClass Bot class. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetHttpTopASesByBotClass(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetHttpTopASesByBotClassWithHttpInfo(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by bot class
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#x27;s bot score - refer to [Bot Scores](https://developers.cloudflare.com/bots/concepts/bot-score) for more information. Values are a percentage out of the total traffic.
     * @param botClass Bot class. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetHttpTopASesByBotClassWithHttpInfo(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopASesByBotClassValidateBeforeCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by bot class (asynchronously)
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#x27;s bot score - refer to [Bot Scores](https://developers.cloudflare.com/bots/concepts/bot-score) for more information. Values are a percentage out of the total traffic.
     * @param botClass Bot class. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByBotClassAsync(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopASesByBotClassValidateBeforeCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopASesByDeviceType
     * @param deviceType Device type. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByDeviceTypeCall(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/ases/device_type/{device_type}"
            .replaceAll("\\{" + "device_type" + "\\}", apiClient.escapeString(deviceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopASesByDeviceTypeValidateBeforeCall(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling radarGetHttpTopASesByDeviceType(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopASesByDeviceTypeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by device type
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType Device type. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetHttpTopASesByDeviceType(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetHttpTopASesByDeviceTypeWithHttpInfo(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by device type
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType Device type. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetHttpTopASesByDeviceTypeWithHttpInfo(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopASesByDeviceTypeValidateBeforeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by device type (asynchronously)
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType Device type. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByDeviceTypeAsync(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopASesByDeviceTypeValidateBeforeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopASesByHTTPProtocol
     * @param httpProtocol HTTP Protocol. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByHTTPProtocolCall(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/ases/http_protocol/{http_protocol}"
            .replaceAll("\\{" + "http_protocol" + "\\}", apiClient.escapeString(httpProtocol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopASesByHTTPProtocolValidateBeforeCall(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'httpProtocol' is set
        if (httpProtocol == null) {
            throw new ApiException("Missing the required parameter 'httpProtocol' when calling radarGetHttpTopASesByHTTPProtocol(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopASesByHTTPProtocolCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by HTTP protocol
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol HTTP Protocol. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetHttpTopASesByHTTPProtocol(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetHttpTopASesByHTTPProtocolWithHttpInfo(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by HTTP protocol
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol HTTP Protocol. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetHttpTopASesByHTTPProtocolWithHttpInfo(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopASesByHTTPProtocolValidateBeforeCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by HTTP protocol (asynchronously)
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol HTTP Protocol. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByHTTPProtocolAsync(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopASesByHTTPProtocolValidateBeforeCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopASesByHTTPVersion
     * @param httpVersion HTTP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByHTTPVersionCall(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/ases/http_version/{http_version}"
            .replaceAll("\\{" + "http_version" + "\\}", apiClient.escapeString(httpVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopASesByHTTPVersionValidateBeforeCall(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'httpVersion' is set
        if (httpVersion == null) {
            throw new ApiException("Missing the required parameter 'httpVersion' when calling radarGetHttpTopASesByHTTPVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopASesByHTTPVersionCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by HTTP version
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol version. Values are a percentage out of the total traffic.
     * @param httpVersion HTTP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetHttpTopASesByHTTPVersion(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetHttpTopASesByHTTPVersionWithHttpInfo(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by HTTP version
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol version. Values are a percentage out of the total traffic.
     * @param httpVersion HTTP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetHttpTopASesByHTTPVersionWithHttpInfo(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopASesByHTTPVersionValidateBeforeCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by HTTP version (asynchronously)
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol version. Values are a percentage out of the total traffic.
     * @param httpVersion HTTP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByHTTPVersionAsync(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopASesByHTTPVersionValidateBeforeCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopASesByIpVersion
     * @param ipVersion IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByIpVersionCall(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/ases/ip_version/{ip_version}"
            .replaceAll("\\{" + "ip_version" + "\\}", apiClient.escapeString(ipVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopASesByIpVersionValidateBeforeCall(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipVersion' is set
        if (ipVersion == null) {
            throw new ApiException("Missing the required parameter 'ipVersion' when calling radarGetHttpTopASesByIpVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopASesByIpVersionCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by IP version
     * Get the top autonomous systems, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetHttpTopASesByIpVersion(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetHttpTopASesByIpVersionWithHttpInfo(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by IP version
     * Get the top autonomous systems, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetHttpTopASesByIpVersionWithHttpInfo(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopASesByIpVersionValidateBeforeCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by IP version (asynchronously)
     * Get the top autonomous systems, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByIpVersionAsync(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopASesByIpVersionValidateBeforeCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopASesByOS
     * @param os IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByOSCall(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/ases/os/{os}"
            .replaceAll("\\{" + "os" + "\\}", apiClient.escapeString(os.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopASesByOSValidateBeforeCall(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'os' is set
        if (os == null) {
            throw new ApiException("Missing the required parameter 'os' when calling radarGetHttpTopASesByOS(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopASesByOSCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by operating system
     * Get the top autonomous systems, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetHttpTopASesByOS(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetHttpTopASesByOSWithHttpInfo(os, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by operating system
     * Get the top autonomous systems, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetHttpTopASesByOSWithHttpInfo(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopASesByOSValidateBeforeCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by operating system (asynchronously)
     * Get the top autonomous systems, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByOSAsync(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopASesByOSValidateBeforeCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopASesByTLSVersion
     * @param tlsVersion TLS version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByTLSVersionCall(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/ases/tls_version/{tls_version}"
            .replaceAll("\\{" + "tls_version" + "\\}", apiClient.escapeString(tlsVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopASesByTLSVersionValidateBeforeCall(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tlsVersion' is set
        if (tlsVersion == null) {
            throw new ApiException("Missing the required parameter 'tlsVersion' when calling radarGetHttpTopASesByTLSVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopASesByTLSVersionCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by TLS version
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion TLS version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20071
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20071 radarGetHttpTopASesByTLSVersion(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        ApiResponse<InlineResponse20071> resp = radarGetHttpTopASesByTLSVersionWithHttpInfo(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by TLS version
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion TLS version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20071&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20071> radarGetHttpTopASesByTLSVersionWithHttpInfo(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopASesByTLSVersionValidateBeforeCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by TLS version (asynchronously)
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion TLS version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopASesByTLSVersionAsync(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback<InlineResponse20071> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopASesByTLSVersionValidateBeforeCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20071>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopBrowserFamilies
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopBrowserFamiliesCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/browser_families";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopBrowserFamiliesValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetHttpTopBrowserFamiliesCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top user agents aggregated in families by HTTP requests
     * Get the top user agents aggregated in families by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20092
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20092 radarGetHttpTopBrowserFamilies(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20092> resp = radarGetHttpTopBrowserFamiliesWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top user agents aggregated in families by HTTP requests
     * Get the top user agents aggregated in families by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20092&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20092> radarGetHttpTopBrowserFamiliesWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopBrowserFamiliesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20092>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top user agents aggregated in families by HTTP requests (asynchronously)
     * Get the top user agents aggregated in families by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopBrowserFamiliesAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20092> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopBrowserFamiliesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20092>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopBrowsers
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopBrowsersCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/browsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopBrowsersValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetHttpTopBrowsersCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top user agents by HTTP requests
     * Get the top user agents by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20092
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20092 radarGetHttpTopBrowsers(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20092> resp = radarGetHttpTopBrowsersWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top user agents by HTTP requests
     * Get the top user agents by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20092&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20092> radarGetHttpTopBrowsersWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopBrowsersValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20092>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top user agents by HTTP requests (asynchronously)
     * Get the top user agents by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopBrowsersAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20092> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopBrowsersValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20092>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopLocations
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopLocationsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top autonomous systems by HTTP requests
     * Get the top locations by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetHttpTopLocations(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetHttpTopLocationsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top autonomous systems by HTTP requests
     * Get the top locations by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetHttpTopLocationsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top autonomous systems by HTTP requests (asynchronously)
     * Get the top locations by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopLocationsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopLocationsByBotClass
     * @param botClass Bot class. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByBotClassCall(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/locations/bot_class/{bot_class}"
            .replaceAll("\\{" + "bot_class" + "\\}", apiClient.escapeString(botClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopLocationsByBotClassValidateBeforeCall(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'botClass' is set
        if (botClass == null) {
            throw new ApiException("Missing the required parameter 'botClass' when calling radarGetHttpTopLocationsByBotClass(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByBotClassCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by bot class
     * Get the top locations, by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#x27;s bot score - refer to [Bot scores])https://developers.cloudflare.com/bots/concepts/bot-score). Values are a percentage out of the total traffic.
     * @param botClass Bot class. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetHttpTopLocationsByBotClass(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetHttpTopLocationsByBotClassWithHttpInfo(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top locations by bot class
     * Get the top locations, by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#x27;s bot score - refer to [Bot scores])https://developers.cloudflare.com/bots/concepts/bot-score). Values are a percentage out of the total traffic.
     * @param botClass Bot class. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetHttpTopLocationsByBotClassWithHttpInfo(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByBotClassValidateBeforeCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by bot class (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#x27;s bot score - refer to [Bot scores])https://developers.cloudflare.com/bots/concepts/bot-score). Values are a percentage out of the total traffic.
     * @param botClass Bot class. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByBotClassAsync(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByBotClassValidateBeforeCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopLocationsByDeviceType
     * @param deviceType Device type. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByDeviceTypeCall(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/locations/device_type/{device_type}"
            .replaceAll("\\{" + "device_type" + "\\}", apiClient.escapeString(deviceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopLocationsByDeviceTypeValidateBeforeCall(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling radarGetHttpTopLocationsByDeviceType(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByDeviceTypeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by device type
     * Get the top locations, by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType Device type. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetHttpTopLocationsByDeviceType(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetHttpTopLocationsByDeviceTypeWithHttpInfo(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top locations by device type
     * Get the top locations, by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType Device type. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetHttpTopLocationsByDeviceTypeWithHttpInfo(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByDeviceTypeValidateBeforeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by device type (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType Device type. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByDeviceTypeAsync(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByDeviceTypeValidateBeforeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopLocationsByHTTPProtocol
     * @param httpProtocol HTTP Protocol. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByHTTPProtocolCall(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/locations/http_protocol/{http_protocol}"
            .replaceAll("\\{" + "http_protocol" + "\\}", apiClient.escapeString(httpProtocol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopLocationsByHTTPProtocolValidateBeforeCall(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'httpProtocol' is set
        if (httpProtocol == null) {
            throw new ApiException("Missing the required parameter 'httpProtocol' when calling radarGetHttpTopLocationsByHTTPProtocol(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByHTTPProtocolCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by HTTP protocol
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol HTTP Protocol. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetHttpTopLocationsByHTTPProtocol(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetHttpTopLocationsByHTTPProtocolWithHttpInfo(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top locations by HTTP protocol
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol HTTP Protocol. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetHttpTopLocationsByHTTPProtocolWithHttpInfo(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByHTTPProtocolValidateBeforeCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by HTTP protocol (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol HTTP Protocol. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByHTTPProtocolAsync(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByHTTPProtocolValidateBeforeCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopLocationsByHTTPVersion
     * @param httpVersion HTTP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByHTTPVersionCall(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/locations/http_version/{http_version}"
            .replaceAll("\\{" + "http_version" + "\\}", apiClient.escapeString(httpVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopLocationsByHTTPVersionValidateBeforeCall(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'httpVersion' is set
        if (httpVersion == null) {
            throw new ApiException("Missing the required parameter 'httpVersion' when calling radarGetHttpTopLocationsByHTTPVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByHTTPVersionCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by HTTP version
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpVersion HTTP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetHttpTopLocationsByHTTPVersion(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetHttpTopLocationsByHTTPVersionWithHttpInfo(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top locations by HTTP version
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpVersion HTTP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetHttpTopLocationsByHTTPVersionWithHttpInfo(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByHTTPVersionValidateBeforeCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by HTTP version (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpVersion HTTP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByHTTPVersionAsync(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByHTTPVersionValidateBeforeCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopLocationsByIpVersion
     * @param ipVersion IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByIpVersionCall(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/locations/ip_version/{ip_version}"
            .replaceAll("\\{" + "ip_version" + "\\}", apiClient.escapeString(ipVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopLocationsByIpVersionValidateBeforeCall(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ipVersion' is set
        if (ipVersion == null) {
            throw new ApiException("Missing the required parameter 'ipVersion' when calling radarGetHttpTopLocationsByIpVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByIpVersionCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by IP version
     * Get the top locations, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetHttpTopLocationsByIpVersion(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetHttpTopLocationsByIpVersionWithHttpInfo(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top locations by IP version
     * Get the top locations, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetHttpTopLocationsByIpVersionWithHttpInfo(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByIpVersionValidateBeforeCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by IP version (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByIpVersionAsync(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByIpVersionValidateBeforeCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopLocationsByOS
     * @param os IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByOSCall(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/locations/os/{os}"
            .replaceAll("\\{" + "os" + "\\}", apiClient.escapeString(os.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopLocationsByOSValidateBeforeCall(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'os' is set
        if (os == null) {
            throw new ApiException("Missing the required parameter 'os' when calling radarGetHttpTopLocationsByOS(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByOSCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by operating system
     * Get the top locations, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetHttpTopLocationsByOS(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetHttpTopLocationsByOSWithHttpInfo(os, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get top locations by operating system
     * Get the top locations, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetHttpTopLocationsByOSWithHttpInfo(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByOSValidateBeforeCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by operating system (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os IP version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByOSAsync(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByOSValidateBeforeCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetHttpTopLocationsByTLSVersion
     * @param tlsVersion TLS version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByTLSVersionCall(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/top/locations/tls_version/{tls_version}"
            .replaceAll("\\{" + "tls_version" + "\\}", apiClient.escapeString(tlsVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetHttpTopLocationsByTLSVersionValidateBeforeCall(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tlsVersion' is set
        if (tlsVersion == null) {
            throw new ApiException("Missing the required parameter 'tlsVersion' when calling radarGetHttpTopLocationsByTLSVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByTLSVersionCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get top locations by TLS version
     * Get the top locations, by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion TLS version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20046
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20046 radarGetHttpTopLocationsByTLSVersion(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        ApiResponse<InlineResponse20046> resp = radarGetHttpTopLocationsByTLSVersionWithHttpInfo(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        return resp.getData();
    }

    /**
     * Get top locations by TLS version
     * Get the top locations, by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion TLS version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20046&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20046> radarGetHttpTopLocationsByTLSVersionWithHttpInfo(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByTLSVersionValidateBeforeCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get top locations by TLS version (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion TLS version. (required)
     * @param limit Limit the number of objects in the response. (optional, default to 5)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetHttpTopLocationsByTLSVersionAsync(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback<InlineResponse20046> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetHttpTopLocationsByTLSVersionValidateBeforeCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20046>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetSummaryBotClass
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryBotClassCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/summary/bot_class";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetSummaryBotClassValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetSummaryBotClassCall(name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of bot classes
     * Percentage distribution of traffic classified as automated or human.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20077
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20077 radarGetSummaryBotClass(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20077> resp = radarGetSummaryBotClassWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get a summary of bot classes
     * Percentage distribution of traffic classified as automated or human.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20077&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20077> radarGetSummaryBotClassWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetSummaryBotClassValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20077>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of bot classes (asynchronously)
     * Percentage distribution of traffic classified as automated or human.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryBotClassAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20077> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetSummaryBotClassValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20077>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetSummaryDeviceType
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryDeviceTypeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/summary/device_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetSummaryDeviceTypeValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetSummaryDeviceTypeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of device types
     * Percentage distribution of traffic per device type.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20078
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20078 radarGetSummaryDeviceType(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20078> resp = radarGetSummaryDeviceTypeWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get a summary of device types
     * Percentage distribution of traffic per device type.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20078&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20078> radarGetSummaryDeviceTypeWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetSummaryDeviceTypeValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20078>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of device types (asynchronously)
     * Percentage distribution of traffic per device type.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryDeviceTypeAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20078> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetSummaryDeviceTypeValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20078>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetSummaryHttpProtocol
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryHttpProtocolCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/summary/http_protocol";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetSummaryHttpProtocolValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetSummaryHttpProtocolCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of HTTP protocols
     * Percentage distribution of traffic per HTTP protocol.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20079
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20079 radarGetSummaryHttpProtocol(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20079> resp = radarGetSummaryHttpProtocolWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get a summary of HTTP protocols
     * Percentage distribution of traffic per HTTP protocol.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20079&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20079> radarGetSummaryHttpProtocolWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetSummaryHttpProtocolValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20079>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of HTTP protocols (asynchronously)
     * Percentage distribution of traffic per HTTP protocol.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryHttpProtocolAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20079> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetSummaryHttpProtocolValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20079>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetSummaryHttpVersion
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryHttpVersionCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/summary/http_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetSummaryHttpVersionValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetSummaryHttpVersionCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of HTTP versions
     * Percentage distribution of traffic per HTTP protocol version.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20080
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20080 radarGetSummaryHttpVersion(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20080> resp = radarGetSummaryHttpVersionWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get a summary of HTTP versions
     * Percentage distribution of traffic per HTTP protocol version.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20080&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20080> radarGetSummaryHttpVersionWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetSummaryHttpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20080>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of HTTP versions (asynchronously)
     * Percentage distribution of traffic per HTTP protocol version.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryHttpVersionAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20080> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetSummaryHttpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20080>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetSummaryIpVersion
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryIpVersionCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/summary/ip_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetSummaryIpVersionValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetSummaryIpVersionCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of IP versions
     * Percentage distribution of traffic per IP protocol version.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20081
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20081 radarGetSummaryIpVersion(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20081> resp = radarGetSummaryIpVersionWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get a summary of IP versions
     * Percentage distribution of traffic per IP protocol version.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20081&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20081> radarGetSummaryIpVersionWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetSummaryIpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20081>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of IP versions (asynchronously)
     * Percentage distribution of traffic per IP protocol version.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryIpVersionAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20081> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetSummaryIpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20081>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetSummaryOS
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryOSCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/summary/os";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetSummaryOSValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetSummaryOSCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of operating systems
     * Percentage distribution of traffic per operating system.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20082
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20082 radarGetSummaryOS(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20082> resp = radarGetSummaryOSWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get a summary of operating systems
     * Percentage distribution of traffic per operating system.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20082&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20082> radarGetSummaryOSWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetSummaryOSValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20082>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of operating systems (asynchronously)
     * Percentage distribution of traffic per operating system.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryOSAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20082> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetSummaryOSValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20082>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetSummaryTLSVersion
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryTLSVersionCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/summary/tls_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetSummaryTLSVersionValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetSummaryTLSVersionCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a summary of TLS versions
     * Percentage distribution of traffic per TLS protocol version.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20083
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20083 radarGetSummaryTLSVersion(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        ApiResponse<InlineResponse20083> resp = radarGetSummaryTLSVersionWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        return resp.getData();
    }

    /**
     * Get a summary of TLS versions
     * Percentage distribution of traffic per TLS protocol version.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20083&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20083> radarGetSummaryTLSVersionWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetSummaryTLSVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20083>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a summary of TLS versions (asynchronously)
     * Percentage distribution of traffic per TLS protocol version.
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetSummaryTLSVersionAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback<InlineResponse20083> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetSummaryTLSVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20083>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetTimeseriesBotClass
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesBotClassCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/timeseries/bot_class";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetTimeseriesBotClassValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetTimeseriesBotClassCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get time series of bot classes
     * Percentage distribution of traffic classified as automated or human over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20084
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20084 radarGetTimeseriesBotClass(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20084> resp = radarGetTimeseriesBotClassWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get time series of bot classes
     * Percentage distribution of traffic classified as automated or human over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20084&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20084> radarGetTimeseriesBotClassWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetTimeseriesBotClassValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20084>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get time series of bot classes (asynchronously)
     * Percentage distribution of traffic classified as automated or human over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesBotClassAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20084> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetTimeseriesBotClassValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20084>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetTimeseriesBrowserFamilies
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesBrowserFamiliesCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/timeseries/browser_family";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetTimeseriesBrowserFamiliesValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetTimeseriesBrowserFamiliesCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get time series of user agents aggregated in families
     * Percentage distribution of traffic of the top user agents aggregated in families in the selected time range, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20085
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20085 radarGetTimeseriesBrowserFamilies(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20085> resp = radarGetTimeseriesBrowserFamiliesWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get time series of user agents aggregated in families
     * Percentage distribution of traffic of the top user agents aggregated in families in the selected time range, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20085&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20085> radarGetTimeseriesBrowserFamiliesWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetTimeseriesBrowserFamiliesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20085>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get time series of user agents aggregated in families (asynchronously)
     * Percentage distribution of traffic of the top user agents aggregated in families in the selected time range, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesBrowserFamiliesAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20085> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetTimeseriesBrowserFamiliesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20085>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetTimeseriesBrowsers
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param limitPerGroup Limit the number of objects (eg browsers) to the top items over the time range. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesBrowsersCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, Integer limitPerGroup, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/timeseries/browser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (limitPerGroup != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limitPerGroup", limitPerGroup));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetTimeseriesBrowsersValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, Integer limitPerGroup, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetTimeseriesBrowsersCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, limitPerGroup, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get time series of user agents
     * Percentage distribution of traffic of the top user agents in the selected time range, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param limitPerGroup Limit the number of objects (eg browsers) to the top items over the time range. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20085
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20085 radarGetTimeseriesBrowsers(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, Integer limitPerGroup, String format) throws ApiException {
        ApiResponse<InlineResponse20085> resp = radarGetTimeseriesBrowsersWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, limitPerGroup, format);
        return resp.getData();
    }

    /**
     * Get time series of user agents
     * Percentage distribution of traffic of the top user agents in the selected time range, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param limitPerGroup Limit the number of objects (eg browsers) to the top items over the time range. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20085&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20085> radarGetTimeseriesBrowsersWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, Integer limitPerGroup, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetTimeseriesBrowsersValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, limitPerGroup, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20085>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get time series of user agents (asynchronously)
     * Percentage distribution of traffic of the top user agents in the selected time range, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param limitPerGroup Limit the number of objects (eg browsers) to the top items over the time range. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesBrowsersAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, Integer limitPerGroup, String format, final ApiCallback<InlineResponse20085> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetTimeseriesBrowsersValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, limitPerGroup, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20085>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetTimeseriesDeviceType
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesDeviceTypeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/timeseries/device_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetTimeseriesDeviceTypeValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetTimeseriesDeviceTypeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get time series of device types
     * Percentage distribution of traffic per device type over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20086
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20086 radarGetTimeseriesDeviceType(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20086> resp = radarGetTimeseriesDeviceTypeWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get time series of device types
     * Percentage distribution of traffic per device type over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20086&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20086> radarGetTimeseriesDeviceTypeWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetTimeseriesDeviceTypeValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20086>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get time series of device types (asynchronously)
     * Percentage distribution of traffic per device type over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesDeviceTypeAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20086> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetTimeseriesDeviceTypeValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20086>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetTimeseriesHttpProtocol
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesHttpProtocolCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/timeseries/http_protocol";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetTimeseriesHttpProtocolValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetTimeseriesHttpProtocolCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get time series of HTTP protocols
     * Percentage distribution of traffic per HTTP protocol over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20087
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20087 radarGetTimeseriesHttpProtocol(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20087> resp = radarGetTimeseriesHttpProtocolWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get time series of HTTP protocols
     * Percentage distribution of traffic per HTTP protocol over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20087&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20087> radarGetTimeseriesHttpProtocolWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetTimeseriesHttpProtocolValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20087>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get time series of HTTP protocols (asynchronously)
     * Percentage distribution of traffic per HTTP protocol over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesHttpProtocolAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20087> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetTimeseriesHttpProtocolValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20087>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetTimeseriesHttpVersion
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesHttpVersionCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/timeseries/http_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetTimeseriesHttpVersionValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetTimeseriesHttpVersionCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get time series of HTTP versions
     * Percentage distribution of traffic per HTTP protocol version over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20088
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20088 radarGetTimeseriesHttpVersion(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20088> resp = radarGetTimeseriesHttpVersionWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get time series of HTTP versions
     * Percentage distribution of traffic per HTTP protocol version over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20088&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20088> radarGetTimeseriesHttpVersionWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetTimeseriesHttpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20088>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get time series of HTTP versions (asynchronously)
     * Percentage distribution of traffic per HTTP protocol version over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesHttpVersionAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20088> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetTimeseriesHttpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20088>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetTimeseriesIpVersion
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesIpVersionCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/timeseries/ip_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetTimeseriesIpVersionValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetTimeseriesIpVersionCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get time series of IP versions
     * Percentage distribution of traffic per IP protocol version over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20089
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20089 radarGetTimeseriesIpVersion(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<InlineResponse20089> resp = radarGetTimeseriesIpVersionWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        return resp.getData();
    }

    /**
     * Get time series of IP versions
     * Percentage distribution of traffic per IP protocol version over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20089&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20089> radarGetTimeseriesIpVersionWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetTimeseriesIpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20089>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get time series of IP versions (asynchronously)
     * Percentage distribution of traffic per IP protocol version over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param os Filter for os name. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesIpVersionAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<InlineResponse20089> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetTimeseriesIpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20089>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetTimeseriesOS
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param limitPerGroup Limit the number of objects (eg browsers) to the top items over the time range. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesOSCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, Integer limitPerGroup, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/timeseries/os";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (tlsVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        if (limitPerGroup != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limitPerGroup", limitPerGroup));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetTimeseriesOSValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, Integer limitPerGroup, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetTimeseriesOSCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, limitPerGroup, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get time series of operating systems
     * Percentage distribution of traffic of the top operating systems in the selected time range, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param limitPerGroup Limit the number of objects (eg browsers) to the top items over the time range. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20090
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20090 radarGetTimeseriesOS(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, Integer limitPerGroup, String format) throws ApiException {
        ApiResponse<InlineResponse20090> resp = radarGetTimeseriesOSWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, limitPerGroup, format);
        return resp.getData();
    }

    /**
     * Get time series of operating systems
     * Percentage distribution of traffic of the top operating systems in the selected time range, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param limitPerGroup Limit the number of objects (eg browsers) to the top items over the time range. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20090&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20090> radarGetTimeseriesOSWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, Integer limitPerGroup, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetTimeseriesOSValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, limitPerGroup, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20090>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get time series of operating systems (asynchronously)
     * Percentage distribution of traffic of the top operating systems in the selected time range, over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param tlsVersion Filter for tls version. (optional)
     * @param limitPerGroup Limit the number of objects (eg browsers) to the top items over the time range. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesOSAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, Integer limitPerGroup, String format, final ApiCallback<InlineResponse20090> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetTimeseriesOSValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, limitPerGroup, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20090>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for radarGetTimeseriesTLSVersion
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesTLSVersionCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/radar/http/timeseries/tls_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aggInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aggInterval", aggInterval));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "name", name));
        if (dateRange != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateRange", dateRange));
        if (dateStart != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateStart", dateStart));
        if (dateEnd != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        if (asn != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "asn", asn));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "location", location));
        if (botClass != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "botClass", botClass));
        if (deviceType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "deviceType", deviceType));
        if (httpProtocol != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        if (httpVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        if (ipVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        if (os != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "os", os));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call radarGetTimeseriesTLSVersionValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = radarGetTimeseriesTLSVersionCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get time series of TLS versions
     * Percentage distribution of traffic per TLS protocol version over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @return InlineResponse20091
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20091 radarGetTimeseriesTLSVersion(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        ApiResponse<InlineResponse20091> resp = radarGetTimeseriesTLSVersionWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        return resp.getData();
    }

    /**
     * Get time series of TLS versions
     * Percentage distribution of traffic per TLS protocol version over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @return ApiResponse&lt;InlineResponse20091&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20091> radarGetTimeseriesTLSVersionWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        com.squareup.okhttp.Call call = radarGetTimeseriesTLSVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20091>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get time series of TLS versions (asynchronously)
     * Percentage distribution of traffic per TLS protocol version over time.
     * @param aggInterval Aggregation interval results should be returned in (for example, in 15 minutes or 1 hour intervals). Refer to [Aggregation intervals](https://developers.cloudflare.com/radar/concepts/aggregation-intervals/). (optional)
     * @param name Array of names that will be used to name the series in responses. (optional)
     * @param dateRange For example, use &#x60;7d&#x60; and &#x60;7dControl&#x60; to compare this week with the previous week. Use this parameter or set specific start and end dates (&#x60;dateStart&#x60; and &#x60;dateEnd&#x60; parameters). (optional)
     * @param dateStart Array of datetimes to filter the start of a series. (optional)
     * @param dateEnd Array of datetimes to filter the end of a series. (optional)
     * @param asn Array of comma separated list of ASNs, start with &#x60;-&#x60; to exclude from results. For example, &#x60;-174, 3356&#x60; excludes results from AS174, but includes results from AS3356. (optional)
     * @param location Array of comma separated list of locations (alpha-2 country codes). Start with &#x60;-&#x60; to exclude from results. For example, &#x60;-US,PT&#x60; excludes results from the US, but includes results from PT. (optional)
     * @param botClass Filter for bot class. Refer to [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/). (optional)
     * @param deviceType Filter for device type. (optional)
     * @param httpProtocol Filter for http protocol. (optional)
     * @param httpVersion Filter for http version. (optional)
     * @param ipVersion Filter for ip version. (optional)
     * @param os Filter for os name. (optional)
     * @param format Format results are returned in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call radarGetTimeseriesTLSVersionAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback<InlineResponse20091> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = radarGetTimeseriesTLSVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20091>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
