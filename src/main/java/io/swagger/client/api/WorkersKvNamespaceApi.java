/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiResponseSingle;
import io.swagger.client.model.BulkWriteInner;
import io.swagger.client.model.CreateRenameNamespaceBody;
import io.swagger.client.model.InlineResponse20010;
import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.InlineResponse2009;
import io.swagger.client.model.InlineResponse4xx156;
import io.swagger.client.model.InlineResponse4xx157;
import io.swagger.client.model.InlineResponse4xx158;
import io.swagger.client.model.InlineResponse4xx159;
import io.swagger.client.model.InlineResponse4xx160;
import io.swagger.client.model.InlineResponse4xx33;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkersKvNamespaceApi {
    private ApiClient apiClient;

    public WorkersKvNamespaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkersKvNamespaceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for workersKvNamespaceCreateANamespace
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceCreateANamespaceCall(CreateRenameNamespaceBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/storage/kv/namespaces"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workersKvNamespaceCreateANamespaceValidateBeforeCall(CreateRenameNamespaceBody body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workersKvNamespaceCreateANamespace(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workersKvNamespaceCreateANamespace(Async)");
        }
        
        com.squareup.okhttp.Call call = workersKvNamespaceCreateANamespaceCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Namespace
     * Creates a namespace under the given title. A 400 is returned if the account already owns a namespace with this title. A namespace must be explicitly deleted to be replaced.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2009 workersKvNamespaceCreateANamespace(CreateRenameNamespaceBody body, String accountIdentifier) throws ApiException {
        ApiResponse<InlineResponse2009> resp = workersKvNamespaceCreateANamespaceWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create a Namespace
     * Creates a namespace under the given title. A 400 is returned if the account already owns a namespace with this title. A namespace must be explicitly deleted to be replaced.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2009> workersKvNamespaceCreateANamespaceWithHttpInfo(CreateRenameNamespaceBody body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workersKvNamespaceCreateANamespaceValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Namespace (asynchronously)
     * Creates a namespace under the given title. A 400 is returned if the account already owns a namespace with this title. A namespace must be explicitly deleted to be replaced.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceCreateANamespaceAsync(CreateRenameNamespaceBody body, String accountIdentifier, final ApiCallback<InlineResponse2009> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workersKvNamespaceCreateANamespaceValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workersKvNamespaceDeleteKeyValuePair
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceDeleteKeyValuePairCall(String keyName, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/storage/kv/namespaces/{namespace_identifier}/values/{key_name}"
            .replaceAll("\\{" + "key_name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "namespace_identifier" + "\\}", apiClient.escapeString(namespaceIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workersKvNamespaceDeleteKeyValuePairValidateBeforeCall(String keyName, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling workersKvNamespaceDeleteKeyValuePair(Async)");
        }
        // verify the required parameter 'namespaceIdentifier' is set
        if (namespaceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'namespaceIdentifier' when calling workersKvNamespaceDeleteKeyValuePair(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workersKvNamespaceDeleteKeyValuePair(Async)");
        }
        
        com.squareup.okhttp.Call call = workersKvNamespaceDeleteKeyValuePairCall(keyName, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete key-value pair
     * Remove a KV pair from the Namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name.
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseSingle workersKvNamespaceDeleteKeyValuePair(String keyName, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseSingle> resp = workersKvNamespaceDeleteKeyValuePairWithHttpInfo(keyName, namespaceIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete key-value pair
     * Remove a KV pair from the Namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name.
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseSingle> workersKvNamespaceDeleteKeyValuePairWithHttpInfo(String keyName, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workersKvNamespaceDeleteKeyValuePairValidateBeforeCall(keyName, namespaceIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete key-value pair (asynchronously)
     * Remove a KV pair from the Namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name.
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceDeleteKeyValuePairAsync(String keyName, String namespaceIdentifier, String accountIdentifier, final ApiCallback<ApiResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workersKvNamespaceDeleteKeyValuePairValidateBeforeCall(keyName, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workersKvNamespaceDeleteMultipleKeyValuePairs
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceDeleteMultipleKeyValuePairsCall(List<String> body, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/storage/kv/namespaces/{namespace_identifier}/bulk"
            .replaceAll("\\{" + "namespace_identifier" + "\\}", apiClient.escapeString(namespaceIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workersKvNamespaceDeleteMultipleKeyValuePairsValidateBeforeCall(List<String> body, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workersKvNamespaceDeleteMultipleKeyValuePairs(Async)");
        }
        // verify the required parameter 'namespaceIdentifier' is set
        if (namespaceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'namespaceIdentifier' when calling workersKvNamespaceDeleteMultipleKeyValuePairs(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workersKvNamespaceDeleteMultipleKeyValuePairs(Async)");
        }
        
        com.squareup.okhttp.Call call = workersKvNamespaceDeleteMultipleKeyValuePairsCall(body, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete multiple key-value pairs
     * Remove multiple KV pairs from the Namespace. Body should be an array of up to 10,000 keys to be removed.
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseSingle workersKvNamespaceDeleteMultipleKeyValuePairs(List<String> body, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseSingle> resp = workersKvNamespaceDeleteMultipleKeyValuePairsWithHttpInfo(body, namespaceIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete multiple key-value pairs
     * Remove multiple KV pairs from the Namespace. Body should be an array of up to 10,000 keys to be removed.
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseSingle> workersKvNamespaceDeleteMultipleKeyValuePairsWithHttpInfo(List<String> body, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workersKvNamespaceDeleteMultipleKeyValuePairsValidateBeforeCall(body, namespaceIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete multiple key-value pairs (asynchronously)
     * Remove multiple KV pairs from the Namespace. Body should be an array of up to 10,000 keys to be removed.
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceDeleteMultipleKeyValuePairsAsync(List<String> body, String namespaceIdentifier, String accountIdentifier, final ApiCallback<ApiResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workersKvNamespaceDeleteMultipleKeyValuePairsValidateBeforeCall(body, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workersKvNamespaceListANamespaceSKeys
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceListANamespaceSKeysCall(String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/storage/kv/namespaces/{namespace_identifier}/keys"
            .replaceAll("\\{" + "namespace_identifier" + "\\}", apiClient.escapeString(namespaceIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workersKvNamespaceListANamespaceSKeysValidateBeforeCall(String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'namespaceIdentifier' is set
        if (namespaceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'namespaceIdentifier' when calling workersKvNamespaceListANamespaceSKeys(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workersKvNamespaceListANamespaceSKeys(Async)");
        }
        
        com.squareup.okhttp.Call call = workersKvNamespaceListANamespaceSKeysCall(namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List a Namespace&#x27;s Keys
     * Lists a namespace&#x27;s keys.
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return InlineResponse20010
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20010 workersKvNamespaceListANamespaceSKeys(String namespaceIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<InlineResponse20010> resp = workersKvNamespaceListANamespaceSKeysWithHttpInfo(namespaceIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * List a Namespace&#x27;s Keys
     * Lists a namespace&#x27;s keys.
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;InlineResponse20010&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20010> workersKvNamespaceListANamespaceSKeysWithHttpInfo(String namespaceIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workersKvNamespaceListANamespaceSKeysValidateBeforeCall(namespaceIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List a Namespace&#x27;s Keys (asynchronously)
     * Lists a namespace&#x27;s keys.
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceListANamespaceSKeysAsync(String namespaceIdentifier, String accountIdentifier, final ApiCallback<InlineResponse20010> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workersKvNamespaceListANamespaceSKeysValidateBeforeCall(namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workersKvNamespaceListNamespaces
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceListNamespacesCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/storage/kv/namespaces"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workersKvNamespaceListNamespacesValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workersKvNamespaceListNamespaces(Async)");
        }
        
        com.squareup.okhttp.Call call = workersKvNamespaceListNamespacesCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Namespaces
     * Returns the namespaces owned by an account.
     * @param accountIdentifier  (required)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 workersKvNamespaceListNamespaces(String accountIdentifier) throws ApiException {
        ApiResponse<InlineResponse2008> resp = workersKvNamespaceListNamespacesWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List Namespaces
     * Returns the namespaces owned by an account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> workersKvNamespaceListNamespacesWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workersKvNamespaceListNamespacesValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Namespaces (asynchronously)
     * Returns the namespaces owned by an account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceListNamespacesAsync(String accountIdentifier, final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workersKvNamespaceListNamespacesValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workersKvNamespaceReadKeyValuePair
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceReadKeyValuePairCall(String keyName, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/storage/kv/namespaces/{namespace_identifier}/values/{key_name}"
            .replaceAll("\\{" + "key_name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "namespace_identifier" + "\\}", apiClient.escapeString(namespaceIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workersKvNamespaceReadKeyValuePairValidateBeforeCall(String keyName, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling workersKvNamespaceReadKeyValuePair(Async)");
        }
        // verify the required parameter 'namespaceIdentifier' is set
        if (namespaceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'namespaceIdentifier' when calling workersKvNamespaceReadKeyValuePair(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workersKvNamespaceReadKeyValuePair(Async)");
        }
        
        com.squareup.okhttp.Call call = workersKvNamespaceReadKeyValuePairCall(keyName, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read key-value pair
     * Returns the value associated with the given key in the given namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name. If the KV-pair is set to expire at some point, the expiration time as measured in seconds since the UNIX epoch will be returned in the \&quot;Expiration\&quot; response header.
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String workersKvNamespaceReadKeyValuePair(String keyName, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<String> resp = workersKvNamespaceReadKeyValuePairWithHttpInfo(keyName, namespaceIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Read key-value pair
     * Returns the value associated with the given key in the given namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name. If the KV-pair is set to expire at some point, the expiration time as measured in seconds since the UNIX epoch will be returned in the \&quot;Expiration\&quot; response header.
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> workersKvNamespaceReadKeyValuePairWithHttpInfo(String keyName, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workersKvNamespaceReadKeyValuePairValidateBeforeCall(keyName, namespaceIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read key-value pair (asynchronously)
     * Returns the value associated with the given key in the given namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name. If the KV-pair is set to expire at some point, the expiration time as measured in seconds since the UNIX epoch will be returned in the \&quot;Expiration\&quot; response header.
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceReadKeyValuePairAsync(String keyName, String namespaceIdentifier, String accountIdentifier, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workersKvNamespaceReadKeyValuePairValidateBeforeCall(keyName, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workersKvNamespaceReadTheMetadataForAKey
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceReadTheMetadataForAKeyCall(String keyName, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/storage/kv/namespaces/{namespace_identifier}/metadata/{key_name}"
            .replaceAll("\\{" + "key_name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "namespace_identifier" + "\\}", apiClient.escapeString(namespaceIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workersKvNamespaceReadTheMetadataForAKeyValidateBeforeCall(String keyName, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling workersKvNamespaceReadTheMetadataForAKey(Async)");
        }
        // verify the required parameter 'namespaceIdentifier' is set
        if (namespaceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'namespaceIdentifier' when calling workersKvNamespaceReadTheMetadataForAKey(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workersKvNamespaceReadTheMetadataForAKey(Async)");
        }
        
        com.squareup.okhttp.Call call = workersKvNamespaceReadTheMetadataForAKeyCall(keyName, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read the metadata for a key
     * Returns the metadata associated with the given key in the given namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name.
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return InlineResponse20011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20011 workersKvNamespaceReadTheMetadataForAKey(String keyName, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<InlineResponse20011> resp = workersKvNamespaceReadTheMetadataForAKeyWithHttpInfo(keyName, namespaceIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Read the metadata for a key
     * Returns the metadata associated with the given key in the given namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name.
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;InlineResponse20011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20011> workersKvNamespaceReadTheMetadataForAKeyWithHttpInfo(String keyName, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workersKvNamespaceReadTheMetadataForAKeyValidateBeforeCall(keyName, namespaceIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read the metadata for a key (asynchronously)
     * Returns the metadata associated with the given key in the given namespace. Use URL-encoding to use special characters (e.g. :, !, %) in the key name.
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceReadTheMetadataForAKeyAsync(String keyName, String namespaceIdentifier, String accountIdentifier, final ApiCallback<InlineResponse20011> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workersKvNamespaceReadTheMetadataForAKeyValidateBeforeCall(keyName, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workersKvNamespaceRemoveANamespace
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceRemoveANamespaceCall(String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/storage/kv/namespaces/{namespace_identifier}"
            .replaceAll("\\{" + "namespace_identifier" + "\\}", apiClient.escapeString(namespaceIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workersKvNamespaceRemoveANamespaceValidateBeforeCall(String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'namespaceIdentifier' is set
        if (namespaceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'namespaceIdentifier' when calling workersKvNamespaceRemoveANamespace(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workersKvNamespaceRemoveANamespace(Async)");
        }
        
        com.squareup.okhttp.Call call = workersKvNamespaceRemoveANamespaceCall(namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove a Namespace
     * Deletes the namespace corresponding to the given ID.
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseSingle workersKvNamespaceRemoveANamespace(String namespaceIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseSingle> resp = workersKvNamespaceRemoveANamespaceWithHttpInfo(namespaceIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Remove a Namespace
     * Deletes the namespace corresponding to the given ID.
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseSingle> workersKvNamespaceRemoveANamespaceWithHttpInfo(String namespaceIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workersKvNamespaceRemoveANamespaceValidateBeforeCall(namespaceIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove a Namespace (asynchronously)
     * Deletes the namespace corresponding to the given ID.
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceRemoveANamespaceAsync(String namespaceIdentifier, String accountIdentifier, final ApiCallback<ApiResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workersKvNamespaceRemoveANamespaceValidateBeforeCall(namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workersKvNamespaceRenameANamespace
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceRenameANamespaceCall(CreateRenameNamespaceBody body, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/storage/kv/namespaces/{namespace_identifier}"
            .replaceAll("\\{" + "namespace_identifier" + "\\}", apiClient.escapeString(namespaceIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workersKvNamespaceRenameANamespaceValidateBeforeCall(CreateRenameNamespaceBody body, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workersKvNamespaceRenameANamespace(Async)");
        }
        // verify the required parameter 'namespaceIdentifier' is set
        if (namespaceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'namespaceIdentifier' when calling workersKvNamespaceRenameANamespace(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workersKvNamespaceRenameANamespace(Async)");
        }
        
        com.squareup.okhttp.Call call = workersKvNamespaceRenameANamespaceCall(body, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Rename a Namespace
     * Modifies a namespace&#x27;s title.
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseSingle workersKvNamespaceRenameANamespace(CreateRenameNamespaceBody body, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseSingle> resp = workersKvNamespaceRenameANamespaceWithHttpInfo(body, namespaceIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Rename a Namespace
     * Modifies a namespace&#x27;s title.
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseSingle> workersKvNamespaceRenameANamespaceWithHttpInfo(CreateRenameNamespaceBody body, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workersKvNamespaceRenameANamespaceValidateBeforeCall(body, namespaceIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rename a Namespace (asynchronously)
     * Modifies a namespace&#x27;s title.
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceRenameANamespaceAsync(CreateRenameNamespaceBody body, String namespaceIdentifier, String accountIdentifier, final ApiCallback<ApiResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workersKvNamespaceRenameANamespaceValidateBeforeCall(body, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workersKvNamespaceWriteKeyValuePairWithMetadata
     * @param metadata  (required)
     * @param value  (required)
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceWriteKeyValuePairWithMetadataCall(String metadata, String value, String keyName, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/storage/kv/namespaces/{namespace_identifier}/values/{key_name}"
            .replaceAll("\\{" + "key_name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "namespace_identifier" + "\\}", apiClient.escapeString(namespaceIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (metadata != null)
        localVarFormParams.put("metadata", metadata);
        if (value != null)
        localVarFormParams.put("value", value);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workersKvNamespaceWriteKeyValuePairWithMetadataValidateBeforeCall(String metadata, String value, String keyName, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling workersKvNamespaceWriteKeyValuePairWithMetadata(Async)");
        }
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling workersKvNamespaceWriteKeyValuePairWithMetadata(Async)");
        }
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling workersKvNamespaceWriteKeyValuePairWithMetadata(Async)");
        }
        // verify the required parameter 'namespaceIdentifier' is set
        if (namespaceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'namespaceIdentifier' when calling workersKvNamespaceWriteKeyValuePairWithMetadata(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workersKvNamespaceWriteKeyValuePairWithMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = workersKvNamespaceWriteKeyValuePairWithMetadataCall(metadata, value, keyName, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Write key-value pair with metadata
     * Write a value identified by a key. Use URL-encoding to use special characters (e.g. :, !, %) in the key name. Body should be the value to be stored along with json metadata to be associated with the key/value pair. Existing values, expirations and metadata will be overwritten. If neither &#x60;expiration&#x60; nor &#x60;expiration_ttl&#x60; is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored.
     * @param metadata  (required)
     * @param value  (required)
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseSingle workersKvNamespaceWriteKeyValuePairWithMetadata(String metadata, String value, String keyName, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseSingle> resp = workersKvNamespaceWriteKeyValuePairWithMetadataWithHttpInfo(metadata, value, keyName, namespaceIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Write key-value pair with metadata
     * Write a value identified by a key. Use URL-encoding to use special characters (e.g. :, !, %) in the key name. Body should be the value to be stored along with json metadata to be associated with the key/value pair. Existing values, expirations and metadata will be overwritten. If neither &#x60;expiration&#x60; nor &#x60;expiration_ttl&#x60; is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored.
     * @param metadata  (required)
     * @param value  (required)
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseSingle> workersKvNamespaceWriteKeyValuePairWithMetadataWithHttpInfo(String metadata, String value, String keyName, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workersKvNamespaceWriteKeyValuePairWithMetadataValidateBeforeCall(metadata, value, keyName, namespaceIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Write key-value pair with metadata (asynchronously)
     * Write a value identified by a key. Use URL-encoding to use special characters (e.g. :, !, %) in the key name. Body should be the value to be stored along with json metadata to be associated with the key/value pair. Existing values, expirations and metadata will be overwritten. If neither &#x60;expiration&#x60; nor &#x60;expiration_ttl&#x60; is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored.
     * @param metadata  (required)
     * @param value  (required)
     * @param keyName  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceWriteKeyValuePairWithMetadataAsync(String metadata, String value, String keyName, String namespaceIdentifier, String accountIdentifier, final ApiCallback<ApiResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workersKvNamespaceWriteKeyValuePairWithMetadataValidateBeforeCall(metadata, value, keyName, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workersKvNamespaceWriteMultipleKeyValuePairs
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceWriteMultipleKeyValuePairsCall(List<BulkWriteInner> body, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/storage/kv/namespaces/{namespace_identifier}/bulk"
            .replaceAll("\\{" + "namespace_identifier" + "\\}", apiClient.escapeString(namespaceIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workersKvNamespaceWriteMultipleKeyValuePairsValidateBeforeCall(List<BulkWriteInner> body, String namespaceIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workersKvNamespaceWriteMultipleKeyValuePairs(Async)");
        }
        // verify the required parameter 'namespaceIdentifier' is set
        if (namespaceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'namespaceIdentifier' when calling workersKvNamespaceWriteMultipleKeyValuePairs(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling workersKvNamespaceWriteMultipleKeyValuePairs(Async)");
        }
        
        com.squareup.okhttp.Call call = workersKvNamespaceWriteMultipleKeyValuePairsCall(body, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Write multiple key-value pairs
     * Write multiple keys and values at once. Body should be an array of up to 10,000 key-value pairs to be stored, along with optional expiration information. Existing values and expirations will be overwritten. If neither expiration nor expiration_ttl is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored. The entire request size must be 100 megabytes or less.
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseSingle workersKvNamespaceWriteMultipleKeyValuePairs(List<BulkWriteInner> body, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseSingle> resp = workersKvNamespaceWriteMultipleKeyValuePairsWithHttpInfo(body, namespaceIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Write multiple key-value pairs
     * Write multiple keys and values at once. Body should be an array of up to 10,000 key-value pairs to be stored, along with optional expiration information. Existing values and expirations will be overwritten. If neither expiration nor expiration_ttl is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored. The entire request size must be 100 megabytes or less.
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseSingle> workersKvNamespaceWriteMultipleKeyValuePairsWithHttpInfo(List<BulkWriteInner> body, String namespaceIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = workersKvNamespaceWriteMultipleKeyValuePairsValidateBeforeCall(body, namespaceIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Write multiple key-value pairs (asynchronously)
     * Write multiple keys and values at once. Body should be an array of up to 10,000 key-value pairs to be stored, along with optional expiration information. Existing values and expirations will be overwritten. If neither expiration nor expiration_ttl is specified, the key-value pair will never expire. If both are set, &#x60;expiration_ttl&#x60; is used and &#x60;expiration&#x60; is ignored. The entire request size must be 100 megabytes or less.
     * @param body  (required)
     * @param namespaceIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workersKvNamespaceWriteMultipleKeyValuePairsAsync(List<BulkWriteInner> body, String namespaceIdentifier, String accountIdentifier, final ApiCallback<ApiResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workersKvNamespaceWriteMultipleKeyValuePairsValidateBeforeCall(body, namespaceIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
