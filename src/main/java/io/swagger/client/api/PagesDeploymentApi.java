/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DeploymentListResponse;
import io.swagger.client.model.DeploymentNewDeployment;
import io.swagger.client.model.DeploymentResponseDetails;
import io.swagger.client.model.DeploymentResponseLogs;
import io.swagger.client.model.InlineResponse4xx118;
import io.swagger.client.model.InlineResponse4xx119;
import io.swagger.client.model.InlineResponse4xx120;
import io.swagger.client.model.InlineResponse4xx121;
import io.swagger.client.model.InlineResponse4xx122;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PagesDeploymentApi {
    private ApiClient apiClient;

    public PagesDeploymentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PagesDeploymentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for pagesDeploymentCreateDeployment
     * @param branch  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentCreateDeploymentCall(String branch, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/pages/projects/{project_name}/deployments"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (branch != null)
        localVarFormParams.put("branch", branch);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pagesDeploymentCreateDeploymentValidateBeforeCall(String branch, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling pagesDeploymentCreateDeployment(Async)");
        }
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentCreateDeployment(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling pagesDeploymentCreateDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = pagesDeploymentCreateDeploymentCall(branch, projectName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create deployment
     * Start a new deployment from production. The repo/account must have been authorized through the Pages UI dash before.
     * @param branch  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return DeploymentNewDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentNewDeployment pagesDeploymentCreateDeployment(String branch, String projectName, String accountIdentifier) throws ApiException {
        ApiResponse<DeploymentNewDeployment> resp = pagesDeploymentCreateDeploymentWithHttpInfo(branch, projectName, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create deployment
     * Start a new deployment from production. The repo/account must have been authorized through the Pages UI dash before.
     * @param branch  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;DeploymentNewDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentNewDeployment> pagesDeploymentCreateDeploymentWithHttpInfo(String branch, String projectName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = pagesDeploymentCreateDeploymentValidateBeforeCall(branch, projectName, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<DeploymentNewDeployment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create deployment (asynchronously)
     * Start a new deployment from production. The repo/account must have been authorized through the Pages UI dash before.
     * @param branch  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentCreateDeploymentAsync(String branch, String projectName, String accountIdentifier, final ApiCallback<DeploymentNewDeployment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pagesDeploymentCreateDeploymentValidateBeforeCall(branch, projectName, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentNewDeployment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pagesDeploymentDeleteDeployment
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentDeleteDeploymentCall(String deploymentIdentifier, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/pages/projects/{project_name}/deployments/{deployment_identifier}"
            .replaceAll("\\{" + "deployment_identifier" + "\\}", apiClient.escapeString(deploymentIdentifier.toString()))
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pagesDeploymentDeleteDeploymentValidateBeforeCall(String deploymentIdentifier, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentIdentifier' is set
        if (deploymentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'deploymentIdentifier' when calling pagesDeploymentDeleteDeployment(Async)");
        }
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentDeleteDeployment(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling pagesDeploymentDeleteDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = pagesDeploymentDeleteDeploymentCall(deploymentIdentifier, projectName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete deployment
     * Destroy a deployment.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object pagesDeploymentDeleteDeployment(String deploymentIdentifier, String projectName, String accountIdentifier) throws ApiException {
        ApiResponse<Object> resp = pagesDeploymentDeleteDeploymentWithHttpInfo(deploymentIdentifier, projectName, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete deployment
     * Destroy a deployment.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> pagesDeploymentDeleteDeploymentWithHttpInfo(String deploymentIdentifier, String projectName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = pagesDeploymentDeleteDeploymentValidateBeforeCall(deploymentIdentifier, projectName, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete deployment (asynchronously)
     * Destroy a deployment.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentDeleteDeploymentAsync(String deploymentIdentifier, String projectName, String accountIdentifier, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pagesDeploymentDeleteDeploymentValidateBeforeCall(deploymentIdentifier, projectName, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pagesDeploymentGetDeploymentInfo
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentGetDeploymentInfoCall(String deploymentIdentifier, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/pages/projects/{project_name}/deployments/{deployment_identifier}"
            .replaceAll("\\{" + "deployment_identifier" + "\\}", apiClient.escapeString(deploymentIdentifier.toString()))
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pagesDeploymentGetDeploymentInfoValidateBeforeCall(String deploymentIdentifier, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentIdentifier' is set
        if (deploymentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'deploymentIdentifier' when calling pagesDeploymentGetDeploymentInfo(Async)");
        }
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentGetDeploymentInfo(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling pagesDeploymentGetDeploymentInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = pagesDeploymentGetDeploymentInfoCall(deploymentIdentifier, projectName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get deployment info
     * Fetch a deployment.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return DeploymentResponseDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResponseDetails pagesDeploymentGetDeploymentInfo(String deploymentIdentifier, String projectName, String accountIdentifier) throws ApiException {
        ApiResponse<DeploymentResponseDetails> resp = pagesDeploymentGetDeploymentInfoWithHttpInfo(deploymentIdentifier, projectName, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get deployment info
     * Fetch a deployment.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;DeploymentResponseDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResponseDetails> pagesDeploymentGetDeploymentInfoWithHttpInfo(String deploymentIdentifier, String projectName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = pagesDeploymentGetDeploymentInfoValidateBeforeCall(deploymentIdentifier, projectName, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResponseDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get deployment info (asynchronously)
     * Fetch a deployment.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentGetDeploymentInfoAsync(String deploymentIdentifier, String projectName, String accountIdentifier, final ApiCallback<DeploymentResponseDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pagesDeploymentGetDeploymentInfoValidateBeforeCall(deploymentIdentifier, projectName, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResponseDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pagesDeploymentGetDeploymentLogs
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentGetDeploymentLogsCall(String deploymentIdentifier, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/pages/projects/{project_name}/deployments/{deployment_identifier}/history/logs"
            .replaceAll("\\{" + "deployment_identifier" + "\\}", apiClient.escapeString(deploymentIdentifier.toString()))
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pagesDeploymentGetDeploymentLogsValidateBeforeCall(String deploymentIdentifier, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentIdentifier' is set
        if (deploymentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'deploymentIdentifier' when calling pagesDeploymentGetDeploymentLogs(Async)");
        }
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentGetDeploymentLogs(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling pagesDeploymentGetDeploymentLogs(Async)");
        }
        
        com.squareup.okhttp.Call call = pagesDeploymentGetDeploymentLogsCall(deploymentIdentifier, projectName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get deployment logs
     * Fetch deploy logs.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return DeploymentResponseLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResponseLogs pagesDeploymentGetDeploymentLogs(String deploymentIdentifier, String projectName, String accountIdentifier) throws ApiException {
        ApiResponse<DeploymentResponseLogs> resp = pagesDeploymentGetDeploymentLogsWithHttpInfo(deploymentIdentifier, projectName, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get deployment logs
     * Fetch deploy logs.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;DeploymentResponseLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResponseLogs> pagesDeploymentGetDeploymentLogsWithHttpInfo(String deploymentIdentifier, String projectName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = pagesDeploymentGetDeploymentLogsValidateBeforeCall(deploymentIdentifier, projectName, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResponseLogs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get deployment logs (asynchronously)
     * Fetch deploy logs.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentGetDeploymentLogsAsync(String deploymentIdentifier, String projectName, String accountIdentifier, final ApiCallback<DeploymentResponseLogs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pagesDeploymentGetDeploymentLogsValidateBeforeCall(deploymentIdentifier, projectName, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResponseLogs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pagesDeploymentGetDeployments
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentGetDeploymentsCall(String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/pages/projects/{project_name}/deployments"
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pagesDeploymentGetDeploymentsValidateBeforeCall(String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentGetDeployments(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling pagesDeploymentGetDeployments(Async)");
        }
        
        com.squareup.okhttp.Call call = pagesDeploymentGetDeploymentsCall(projectName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get deployments
     * Fetch a list of deployments from a project.
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return DeploymentListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentListResponse pagesDeploymentGetDeployments(String projectName, String accountIdentifier) throws ApiException {
        ApiResponse<DeploymentListResponse> resp = pagesDeploymentGetDeploymentsWithHttpInfo(projectName, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get deployments
     * Fetch a list of deployments from a project.
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;DeploymentListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentListResponse> pagesDeploymentGetDeploymentsWithHttpInfo(String projectName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = pagesDeploymentGetDeploymentsValidateBeforeCall(projectName, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<DeploymentListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get deployments (asynchronously)
     * Fetch a list of deployments from a project.
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentGetDeploymentsAsync(String projectName, String accountIdentifier, final ApiCallback<DeploymentListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pagesDeploymentGetDeploymentsValidateBeforeCall(projectName, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pagesDeploymentRetryDeployment
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentRetryDeploymentCall(String deploymentIdentifier, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/pages/projects/{project_name}/deployments/{deployment_identifier}/retry"
            .replaceAll("\\{" + "deployment_identifier" + "\\}", apiClient.escapeString(deploymentIdentifier.toString()))
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pagesDeploymentRetryDeploymentValidateBeforeCall(String deploymentIdentifier, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentIdentifier' is set
        if (deploymentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'deploymentIdentifier' when calling pagesDeploymentRetryDeployment(Async)");
        }
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentRetryDeployment(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling pagesDeploymentRetryDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = pagesDeploymentRetryDeploymentCall(deploymentIdentifier, projectName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retry deployment
     * Retry a previous deployment.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return DeploymentNewDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentNewDeployment pagesDeploymentRetryDeployment(String deploymentIdentifier, String projectName, String accountIdentifier) throws ApiException {
        ApiResponse<DeploymentNewDeployment> resp = pagesDeploymentRetryDeploymentWithHttpInfo(deploymentIdentifier, projectName, accountIdentifier);
        return resp.getData();
    }

    /**
     * Retry deployment
     * Retry a previous deployment.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;DeploymentNewDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentNewDeployment> pagesDeploymentRetryDeploymentWithHttpInfo(String deploymentIdentifier, String projectName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = pagesDeploymentRetryDeploymentValidateBeforeCall(deploymentIdentifier, projectName, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<DeploymentNewDeployment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retry deployment (asynchronously)
     * Retry a previous deployment.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentRetryDeploymentAsync(String deploymentIdentifier, String projectName, String accountIdentifier, final ApiCallback<DeploymentNewDeployment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pagesDeploymentRetryDeploymentValidateBeforeCall(deploymentIdentifier, projectName, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentNewDeployment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pagesDeploymentRollbackDeployment
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentRollbackDeploymentCall(String deploymentIdentifier, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/pages/projects/{project_name}/deployments/{deployment_identifier}/rollback"
            .replaceAll("\\{" + "deployment_identifier" + "\\}", apiClient.escapeString(deploymentIdentifier.toString()))
            .replaceAll("\\{" + "project_name" + "\\}", apiClient.escapeString(projectName.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pagesDeploymentRollbackDeploymentValidateBeforeCall(String deploymentIdentifier, String projectName, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'deploymentIdentifier' is set
        if (deploymentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'deploymentIdentifier' when calling pagesDeploymentRollbackDeployment(Async)");
        }
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling pagesDeploymentRollbackDeployment(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling pagesDeploymentRollbackDeployment(Async)");
        }
        
        com.squareup.okhttp.Call call = pagesDeploymentRollbackDeploymentCall(deploymentIdentifier, projectName, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Rollback deployment
     * Rollback the production deployment to a previous deploy. You can only rollback to succesful builds on production.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return DeploymentResponseDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResponseDetails pagesDeploymentRollbackDeployment(String deploymentIdentifier, String projectName, String accountIdentifier) throws ApiException {
        ApiResponse<DeploymentResponseDetails> resp = pagesDeploymentRollbackDeploymentWithHttpInfo(deploymentIdentifier, projectName, accountIdentifier);
        return resp.getData();
    }

    /**
     * Rollback deployment
     * Rollback the production deployment to a previous deploy. You can only rollback to succesful builds on production.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;DeploymentResponseDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResponseDetails> pagesDeploymentRollbackDeploymentWithHttpInfo(String deploymentIdentifier, String projectName, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = pagesDeploymentRollbackDeploymentValidateBeforeCall(deploymentIdentifier, projectName, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResponseDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rollback deployment (asynchronously)
     * Rollback the production deployment to a previous deploy. You can only rollback to succesful builds on production.
     * @param deploymentIdentifier  (required)
     * @param projectName  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pagesDeploymentRollbackDeploymentAsync(String deploymentIdentifier, String projectName, String accountIdentifier, final ApiCallback<DeploymentResponseDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pagesDeploymentRollbackDeploymentValidateBeforeCall(deploymentIdentifier, projectName, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResponseDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
