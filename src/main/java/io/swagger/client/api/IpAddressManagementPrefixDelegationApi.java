/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse4xx10;
import io.swagger.client.model.InlineResponse4xx11;
import io.swagger.client.model.InlineResponse4xx12;
import io.swagger.client.model.IpamDelegationsComponentsSchemasIdResponse;
import io.swagger.client.model.IpamDelegationsComponentsSchemasResponseCollection;
import io.swagger.client.model.IpamDelegationsComponentsSchemasSingleResponse;
import io.swagger.client.model.PrefixIdentifierDelegationsBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpAddressManagementPrefixDelegationApi {
    private ApiClient apiClient;

    public IpAddressManagementPrefixDelegationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpAddressManagementPrefixDelegationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ipAddressManagementPrefixDelegationCreatePrefixDelegation
     * @param body  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixDelegationCreatePrefixDelegationCall(PrefixIdentifierDelegationsBody body, String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}/delegations"
            .replaceAll("\\{" + "prefix_identifier" + "\\}", apiClient.escapeString(prefixIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementPrefixDelegationCreatePrefixDelegationValidateBeforeCall(PrefixIdentifierDelegationsBody body, String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ipAddressManagementPrefixDelegationCreatePrefixDelegation(Async)");
        }
        // verify the required parameter 'prefixIdentifier' is set
        if (prefixIdentifier == null) {
            throw new ApiException("Missing the required parameter 'prefixIdentifier' when calling ipAddressManagementPrefixDelegationCreatePrefixDelegation(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementPrefixDelegationCreatePrefixDelegation(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementPrefixDelegationCreatePrefixDelegationCall(body, prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Prefix Delegation
     * Create a new account delegation for a given IP prefix.
     * @param body  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return IpamDelegationsComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpamDelegationsComponentsSchemasSingleResponse ipAddressManagementPrefixDelegationCreatePrefixDelegation(PrefixIdentifierDelegationsBody body, String prefixIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<IpamDelegationsComponentsSchemasSingleResponse> resp = ipAddressManagementPrefixDelegationCreatePrefixDelegationWithHttpInfo(body, prefixIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create Prefix Delegation
     * Create a new account delegation for a given IP prefix.
     * @param body  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;IpamDelegationsComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpamDelegationsComponentsSchemasSingleResponse> ipAddressManagementPrefixDelegationCreatePrefixDelegationWithHttpInfo(PrefixIdentifierDelegationsBody body, String prefixIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementPrefixDelegationCreatePrefixDelegationValidateBeforeCall(body, prefixIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<IpamDelegationsComponentsSchemasSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Prefix Delegation (asynchronously)
     * Create a new account delegation for a given IP prefix.
     * @param body  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixDelegationCreatePrefixDelegationAsync(PrefixIdentifierDelegationsBody body, String prefixIdentifier, String accountIdentifier, final ApiCallback<IpamDelegationsComponentsSchemasSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementPrefixDelegationCreatePrefixDelegationValidateBeforeCall(body, prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpamDelegationsComponentsSchemasSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementPrefixDelegationDeletePrefixDelegation
     * @param delegationIdentifier  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixDelegationDeletePrefixDelegationCall(String delegationIdentifier, String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}/delegations/{delegation_identifier}"
            .replaceAll("\\{" + "delegation_identifier" + "\\}", apiClient.escapeString(delegationIdentifier.toString()))
            .replaceAll("\\{" + "prefix_identifier" + "\\}", apiClient.escapeString(prefixIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementPrefixDelegationDeletePrefixDelegationValidateBeforeCall(String delegationIdentifier, String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'delegationIdentifier' is set
        if (delegationIdentifier == null) {
            throw new ApiException("Missing the required parameter 'delegationIdentifier' when calling ipAddressManagementPrefixDelegationDeletePrefixDelegation(Async)");
        }
        // verify the required parameter 'prefixIdentifier' is set
        if (prefixIdentifier == null) {
            throw new ApiException("Missing the required parameter 'prefixIdentifier' when calling ipAddressManagementPrefixDelegationDeletePrefixDelegation(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementPrefixDelegationDeletePrefixDelegation(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementPrefixDelegationDeletePrefixDelegationCall(delegationIdentifier, prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Prefix Delegation
     * Delete an account delegation for a given IP prefix.
     * @param delegationIdentifier  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return IpamDelegationsComponentsSchemasIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpamDelegationsComponentsSchemasIdResponse ipAddressManagementPrefixDelegationDeletePrefixDelegation(String delegationIdentifier, String prefixIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<IpamDelegationsComponentsSchemasIdResponse> resp = ipAddressManagementPrefixDelegationDeletePrefixDelegationWithHttpInfo(delegationIdentifier, prefixIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete Prefix Delegation
     * Delete an account delegation for a given IP prefix.
     * @param delegationIdentifier  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;IpamDelegationsComponentsSchemasIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpamDelegationsComponentsSchemasIdResponse> ipAddressManagementPrefixDelegationDeletePrefixDelegationWithHttpInfo(String delegationIdentifier, String prefixIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementPrefixDelegationDeletePrefixDelegationValidateBeforeCall(delegationIdentifier, prefixIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<IpamDelegationsComponentsSchemasIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Prefix Delegation (asynchronously)
     * Delete an account delegation for a given IP prefix.
     * @param delegationIdentifier  (required)
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixDelegationDeletePrefixDelegationAsync(String delegationIdentifier, String prefixIdentifier, String accountIdentifier, final ApiCallback<IpamDelegationsComponentsSchemasIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementPrefixDelegationDeletePrefixDelegationValidateBeforeCall(delegationIdentifier, prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpamDelegationsComponentsSchemasIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ipAddressManagementPrefixDelegationListPrefixDelegations
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixDelegationListPrefixDelegationsCall(String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}/delegations"
            .replaceAll("\\{" + "prefix_identifier" + "\\}", apiClient.escapeString(prefixIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ipAddressManagementPrefixDelegationListPrefixDelegationsValidateBeforeCall(String prefixIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'prefixIdentifier' is set
        if (prefixIdentifier == null) {
            throw new ApiException("Missing the required parameter 'prefixIdentifier' when calling ipAddressManagementPrefixDelegationListPrefixDelegations(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling ipAddressManagementPrefixDelegationListPrefixDelegations(Async)");
        }
        
        com.squareup.okhttp.Call call = ipAddressManagementPrefixDelegationListPrefixDelegationsCall(prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Prefix Delegations
     * List all delegations for a given account IP prefix.
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return IpamDelegationsComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IpamDelegationsComponentsSchemasResponseCollection ipAddressManagementPrefixDelegationListPrefixDelegations(String prefixIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<IpamDelegationsComponentsSchemasResponseCollection> resp = ipAddressManagementPrefixDelegationListPrefixDelegationsWithHttpInfo(prefixIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * List Prefix Delegations
     * List all delegations for a given account IP prefix.
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;IpamDelegationsComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IpamDelegationsComponentsSchemasResponseCollection> ipAddressManagementPrefixDelegationListPrefixDelegationsWithHttpInfo(String prefixIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = ipAddressManagementPrefixDelegationListPrefixDelegationsValidateBeforeCall(prefixIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<IpamDelegationsComponentsSchemasResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Prefix Delegations (asynchronously)
     * List all delegations for a given account IP prefix.
     * @param prefixIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ipAddressManagementPrefixDelegationListPrefixDelegationsAsync(String prefixIdentifier, String accountIdentifier, final ApiCallback<IpamDelegationsComponentsSchemasResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ipAddressManagementPrefixDelegationListPrefixDelegationsValidateBeforeCall(prefixIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IpamDelegationsComponentsSchemasResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
