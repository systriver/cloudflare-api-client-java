/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccountsComponentsSchemasIdentifier;
import io.swagger.client.model.GatewayAccount;
import io.swagger.client.model.GatewayAccountConfig;
import io.swagger.client.model.GatewayAccountDeviceSettings;
import io.swagger.client.model.GatewayAccountDeviceSettingsResponse;
import io.swagger.client.model.GatewayAccountLoggingSettings;
import io.swagger.client.model.GatewayAccountLoggingSettingsResponse;
import io.swagger.client.model.GatewayAccountSettings;
import io.swagger.client.model.IdentifierGatewayBody;
import io.swagger.client.model.InlineResponse4xx262;
import io.swagger.client.model.InlineResponse4xx265;
import io.swagger.client.model.InlineResponse4xx267;
import io.swagger.client.model.InlineResponse4xx276;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZeroTrustAccountsApi {
    private ApiClient apiClient;

    public ZeroTrustAccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZeroTrustAccountsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for zeroTrustAccountsCreateZeroTrustAccount
     * @param body  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsCreateZeroTrustAccountCall(IdentifierGatewayBody body, AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/gateway"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zeroTrustAccountsCreateZeroTrustAccountValidateBeforeCall(IdentifierGatewayBody body, AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zeroTrustAccountsCreateZeroTrustAccount(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustAccountsCreateZeroTrustAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = zeroTrustAccountsCreateZeroTrustAccountCall(body, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Zero Trust account
     * Create Zero Trust account with existing cloudflare account.
     * @param body  (required)
     * @param identifier  (required)
     * @return GatewayAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayAccount zeroTrustAccountsCreateZeroTrustAccount(IdentifierGatewayBody body, AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<GatewayAccount> resp = zeroTrustAccountsCreateZeroTrustAccountWithHttpInfo(body, identifier);
        return resp.getData();
    }

    /**
     * Create Zero Trust account
     * Create Zero Trust account with existing cloudflare account.
     * @param body  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;GatewayAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayAccount> zeroTrustAccountsCreateZeroTrustAccountWithHttpInfo(IdentifierGatewayBody body, AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zeroTrustAccountsCreateZeroTrustAccountValidateBeforeCall(body, identifier, null, null);
        Type localVarReturnType = new TypeToken<GatewayAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Zero Trust account (asynchronously)
     * Create Zero Trust account with existing cloudflare account.
     * @param body  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsCreateZeroTrustAccountAsync(IdentifierGatewayBody body, AccountsComponentsSchemasIdentifier identifier, final ApiCallback<GatewayAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zeroTrustAccountsCreateZeroTrustAccountValidateBeforeCall(body, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zeroTrustAccountsGetDeviceSettingsForZeroTrustAccount
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsGetDeviceSettingsForZeroTrustAccountCall(AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/devices/settings"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zeroTrustAccountsGetDeviceSettingsForZeroTrustAccountValidateBeforeCall(AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustAccountsGetDeviceSettingsForZeroTrustAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = zeroTrustAccountsGetDeviceSettingsForZeroTrustAccountCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get device settings for Zero Trust account
     * Describes the current device settings Zero Trust account.
     * @param identifier  (required)
     * @return GatewayAccountDeviceSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayAccountDeviceSettingsResponse zeroTrustAccountsGetDeviceSettingsForZeroTrustAccount(AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<GatewayAccountDeviceSettingsResponse> resp = zeroTrustAccountsGetDeviceSettingsForZeroTrustAccountWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * Get device settings for Zero Trust account
     * Describes the current device settings Zero Trust account.
     * @param identifier  (required)
     * @return ApiResponse&lt;GatewayAccountDeviceSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayAccountDeviceSettingsResponse> zeroTrustAccountsGetDeviceSettingsForZeroTrustAccountWithHttpInfo(AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zeroTrustAccountsGetDeviceSettingsForZeroTrustAccountValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<GatewayAccountDeviceSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get device settings for Zero Trust account (asynchronously)
     * Describes the current device settings Zero Trust account.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsGetDeviceSettingsForZeroTrustAccountAsync(AccountsComponentsSchemasIdentifier identifier, final ApiCallback<GatewayAccountDeviceSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zeroTrustAccountsGetDeviceSettingsForZeroTrustAccountValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayAccountDeviceSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccount
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccountCall(AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/gateway/logging"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccountValidateBeforeCall(AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccountCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get logging settings for the Zero Trust account
     * Describes the current logging settings for Zero Trust account.
     * @param identifier  (required)
     * @return GatewayAccountLoggingSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayAccountLoggingSettingsResponse zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccount(AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<GatewayAccountLoggingSettingsResponse> resp = zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccountWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * Get logging settings for the Zero Trust account
     * Describes the current logging settings for Zero Trust account.
     * @param identifier  (required)
     * @return ApiResponse&lt;GatewayAccountLoggingSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayAccountLoggingSettingsResponse> zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccountWithHttpInfo(AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccountValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<GatewayAccountLoggingSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get logging settings for the Zero Trust account (asynchronously)
     * Describes the current logging settings for Zero Trust account.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccountAsync(AccountsComponentsSchemasIdentifier identifier, final ApiCallback<GatewayAccountLoggingSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccountValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayAccountLoggingSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zeroTrustAccountsGetZeroTrustAccountConfiguration
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsGetZeroTrustAccountConfigurationCall(AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/gateway/configuration"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zeroTrustAccountsGetZeroTrustAccountConfigurationValidateBeforeCall(AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustAccountsGetZeroTrustAccountConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = zeroTrustAccountsGetZeroTrustAccountConfigurationCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Zero Trust account configuration
     * Describes current Zero Trust account configuration.
     * @param identifier  (required)
     * @return GatewayAccountConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayAccountConfig zeroTrustAccountsGetZeroTrustAccountConfiguration(AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<GatewayAccountConfig> resp = zeroTrustAccountsGetZeroTrustAccountConfigurationWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * Get Zero Trust account configuration
     * Describes current Zero Trust account configuration.
     * @param identifier  (required)
     * @return ApiResponse&lt;GatewayAccountConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayAccountConfig> zeroTrustAccountsGetZeroTrustAccountConfigurationWithHttpInfo(AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zeroTrustAccountsGetZeroTrustAccountConfigurationValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<GatewayAccountConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Zero Trust account configuration (asynchronously)
     * Describes current Zero Trust account configuration.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsGetZeroTrustAccountConfigurationAsync(AccountsComponentsSchemasIdentifier identifier, final ApiCallback<GatewayAccountConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zeroTrustAccountsGetZeroTrustAccountConfigurationValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayAccountConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zeroTrustAccountsGetZeroTrustAccountInformation
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsGetZeroTrustAccountInformationCall(AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/gateway"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zeroTrustAccountsGetZeroTrustAccountInformationValidateBeforeCall(AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustAccountsGetZeroTrustAccountInformation(Async)");
        }
        
        com.squareup.okhttp.Call call = zeroTrustAccountsGetZeroTrustAccountInformationCall(identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Zero Trust account information
     * Get Zero Trust account information.
     * @param identifier  (required)
     * @return GatewayAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayAccount zeroTrustAccountsGetZeroTrustAccountInformation(AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<GatewayAccount> resp = zeroTrustAccountsGetZeroTrustAccountInformationWithHttpInfo(identifier);
        return resp.getData();
    }

    /**
     * Get Zero Trust account information
     * Get Zero Trust account information.
     * @param identifier  (required)
     * @return ApiResponse&lt;GatewayAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayAccount> zeroTrustAccountsGetZeroTrustAccountInformationWithHttpInfo(AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zeroTrustAccountsGetZeroTrustAccountInformationValidateBeforeCall(identifier, null, null);
        Type localVarReturnType = new TypeToken<GatewayAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Zero Trust account information (asynchronously)
     * Get Zero Trust account information.
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsGetZeroTrustAccountInformationAsync(AccountsComponentsSchemasIdentifier identifier, final ApiCallback<GatewayAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zeroTrustAccountsGetZeroTrustAccountInformationValidateBeforeCall(identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount
     * @param body  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccountCall(GatewayAccountDeviceSettings body, AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/devices/settings"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccountValidateBeforeCall(GatewayAccountDeviceSettings body, AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccountCall(body, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update device settings for the Zero Trust account
     * Updates the current device settings for Zero Trust account.
     * @param body  (required)
     * @param identifier  (required)
     * @return GatewayAccountDeviceSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayAccountDeviceSettingsResponse zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount(GatewayAccountDeviceSettings body, AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<GatewayAccountDeviceSettingsResponse> resp = zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccountWithHttpInfo(body, identifier);
        return resp.getData();
    }

    /**
     * Update device settings for the Zero Trust account
     * Updates the current device settings for Zero Trust account.
     * @param body  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;GatewayAccountDeviceSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayAccountDeviceSettingsResponse> zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccountWithHttpInfo(GatewayAccountDeviceSettings body, AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccountValidateBeforeCall(body, identifier, null, null);
        Type localVarReturnType = new TypeToken<GatewayAccountDeviceSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update device settings for the Zero Trust account (asynchronously)
     * Updates the current device settings for Zero Trust account.
     * @param body  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccountAsync(GatewayAccountDeviceSettings body, AccountsComponentsSchemasIdentifier identifier, final ApiCallback<GatewayAccountDeviceSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccountValidateBeforeCall(body, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayAccountDeviceSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount
     * @param body  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccountCall(GatewayAccountLoggingSettings body, AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/gateway/logging"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccountValidateBeforeCall(GatewayAccountLoggingSettings body, AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccountCall(body, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update logging settings for the Zero Trust account
     * Updates the current logging settings for the Zero Trust accounty.
     * @param body  (required)
     * @param identifier  (required)
     * @return GatewayAccountLoggingSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayAccountLoggingSettingsResponse zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount(GatewayAccountLoggingSettings body, AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<GatewayAccountLoggingSettingsResponse> resp = zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccountWithHttpInfo(body, identifier);
        return resp.getData();
    }

    /**
     * Update logging settings for the Zero Trust account
     * Updates the current logging settings for the Zero Trust accounty.
     * @param body  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;GatewayAccountLoggingSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayAccountLoggingSettingsResponse> zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccountWithHttpInfo(GatewayAccountLoggingSettings body, AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccountValidateBeforeCall(body, identifier, null, null);
        Type localVarReturnType = new TypeToken<GatewayAccountLoggingSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update logging settings for the Zero Trust account (asynchronously)
     * Updates the current logging settings for the Zero Trust accounty.
     * @param body  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccountAsync(GatewayAccountLoggingSettings body, AccountsComponentsSchemasIdentifier identifier, final ApiCallback<GatewayAccountLoggingSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccountValidateBeforeCall(body, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayAccountLoggingSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for zeroTrustAccountsUpdateZeroTrustAccountConfiguration
     * @param body  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsUpdateZeroTrustAccountConfigurationCall(GatewayAccountSettings body, AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{identifier}/gateway/configuration"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call zeroTrustAccountsUpdateZeroTrustAccountConfigurationValidateBeforeCall(GatewayAccountSettings body, AccountsComponentsSchemasIdentifier identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling zeroTrustAccountsUpdateZeroTrustAccountConfiguration(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling zeroTrustAccountsUpdateZeroTrustAccountConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = zeroTrustAccountsUpdateZeroTrustAccountConfigurationCall(body, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Zero Trust account configuration
     * Updates the current Zero Trust account configuration.
     * @param body  (required)
     * @param identifier  (required)
     * @return GatewayAccountConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayAccountConfig zeroTrustAccountsUpdateZeroTrustAccountConfiguration(GatewayAccountSettings body, AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        ApiResponse<GatewayAccountConfig> resp = zeroTrustAccountsUpdateZeroTrustAccountConfigurationWithHttpInfo(body, identifier);
        return resp.getData();
    }

    /**
     * Update Zero Trust account configuration
     * Updates the current Zero Trust account configuration.
     * @param body  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;GatewayAccountConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayAccountConfig> zeroTrustAccountsUpdateZeroTrustAccountConfigurationWithHttpInfo(GatewayAccountSettings body, AccountsComponentsSchemasIdentifier identifier) throws ApiException {
        com.squareup.okhttp.Call call = zeroTrustAccountsUpdateZeroTrustAccountConfigurationValidateBeforeCall(body, identifier, null, null);
        Type localVarReturnType = new TypeToken<GatewayAccountConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Zero Trust account configuration (asynchronously)
     * Updates the current Zero Trust account configuration.
     * @param body  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call zeroTrustAccountsUpdateZeroTrustAccountConfigurationAsync(GatewayAccountSettings body, AccountsComponentsSchemasIdentifier identifier, final ApiCallback<GatewayAccountConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = zeroTrustAccountsUpdateZeroTrustAccountConfigurationValidateBeforeCall(body, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayAccountConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
