/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CloudflareClientAPIDeletedResponse;
import io.swagger.client.model.DirectUploadResponseV2;
import io.swagger.client.model.ImagePatchRequest;
import io.swagger.client.model.ImageResponseBlob;
import io.swagger.client.model.ImageResponseCollection;
import io.swagger.client.model.ImageResponseSingle;
import io.swagger.client.model.ImagesStats;
import io.swagger.client.model.InlineResponse4xx45;
import io.swagger.client.model.InlineResponse4xx46;
import io.swagger.client.model.InlineResponse4xx48;
import io.swagger.client.model.InlineResponse4xx51;
import io.swagger.client.model.InlineResponse4xx52;
import io.swagger.client.model.InlineResponse4xx53;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudflareImagesApi {
    private ApiClient apiClient;

    public CloudflareImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudflareImagesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cloudflareImagesBaseImage
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesBaseImageCall(String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/images/v1/{identifier}/blob"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareImagesBaseImageValidateBeforeCall(String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling cloudflareImagesBaseImage(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareImagesBaseImage(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareImagesBaseImageCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Base image
     * Fetch base image. For most images this will be the originally uploaded file. For larger images it can be a near-lossless version of the original.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ImageResponseBlob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponseBlob cloudflareImagesBaseImage(String identifier, String accountIdentifier) throws ApiException {
        ApiResponse<ImageResponseBlob> resp = cloudflareImagesBaseImageWithHttpInfo(identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Base image
     * Fetch base image. For most images this will be the originally uploaded file. For larger images it can be a near-lossless version of the original.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ImageResponseBlob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponseBlob> cloudflareImagesBaseImageWithHttpInfo(String identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareImagesBaseImageValidateBeforeCall(identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ImageResponseBlob>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Base image (asynchronously)
     * Fetch base image. For most images this will be the originally uploaded file. For larger images it can be a near-lossless version of the original.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesBaseImageAsync(String identifier, String accountIdentifier, final ApiCallback<ImageResponseBlob> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareImagesBaseImageValidateBeforeCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponseBlob>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareImagesCreateAuthenticatedDirectUploadUrlV2
     * @param expiry  (required)
     * @param id  (required)
     * @param metadata  (required)
     * @param requireSignedURLs  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesCreateAuthenticatedDirectUploadUrlV2Call(OffsetDateTime expiry, String id, Object metadata, Boolean requireSignedURLs, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/images/v2/direct_upload"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (expiry != null)
        localVarFormParams.put("expiry", expiry);
        if (id != null)
        localVarFormParams.put("id", id);
        if (metadata != null)
        localVarFormParams.put("metadata", metadata);
        if (requireSignedURLs != null)
        localVarFormParams.put("requireSignedURLs", requireSignedURLs);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareImagesCreateAuthenticatedDirectUploadUrlV2ValidateBeforeCall(OffsetDateTime expiry, String id, Object metadata, Boolean requireSignedURLs, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'expiry' is set
        if (expiry == null) {
            throw new ApiException("Missing the required parameter 'expiry' when calling cloudflareImagesCreateAuthenticatedDirectUploadUrlV2(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cloudflareImagesCreateAuthenticatedDirectUploadUrlV2(Async)");
        }
        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling cloudflareImagesCreateAuthenticatedDirectUploadUrlV2(Async)");
        }
        // verify the required parameter 'requireSignedURLs' is set
        if (requireSignedURLs == null) {
            throw new ApiException("Missing the required parameter 'requireSignedURLs' when calling cloudflareImagesCreateAuthenticatedDirectUploadUrlV2(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareImagesCreateAuthenticatedDirectUploadUrlV2(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareImagesCreateAuthenticatedDirectUploadUrlV2Call(expiry, id, metadata, requireSignedURLs, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create authenticated direct upload URL V2
     * Direct uploads allow users to upload images without API keys. A common use case are web apps, client-side applications, or mobile devices where users upload content directly to Cloudflare Images. This method creates a draft record for a future image. It returns an upload URL and an image identifier. To verify if the image itself has been uploaded, send an image details request (accounts/:account_identifier/images/v1/:identifier), and check that the &#x60;draft: true&#x60; property is not present.
     * @param expiry  (required)
     * @param id  (required)
     * @param metadata  (required)
     * @param requireSignedURLs  (required)
     * @param accountIdentifier  (required)
     * @return DirectUploadResponseV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DirectUploadResponseV2 cloudflareImagesCreateAuthenticatedDirectUploadUrlV2(OffsetDateTime expiry, String id, Object metadata, Boolean requireSignedURLs, String accountIdentifier) throws ApiException {
        ApiResponse<DirectUploadResponseV2> resp = cloudflareImagesCreateAuthenticatedDirectUploadUrlV2WithHttpInfo(expiry, id, metadata, requireSignedURLs, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create authenticated direct upload URL V2
     * Direct uploads allow users to upload images without API keys. A common use case are web apps, client-side applications, or mobile devices where users upload content directly to Cloudflare Images. This method creates a draft record for a future image. It returns an upload URL and an image identifier. To verify if the image itself has been uploaded, send an image details request (accounts/:account_identifier/images/v1/:identifier), and check that the &#x60;draft: true&#x60; property is not present.
     * @param expiry  (required)
     * @param id  (required)
     * @param metadata  (required)
     * @param requireSignedURLs  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;DirectUploadResponseV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DirectUploadResponseV2> cloudflareImagesCreateAuthenticatedDirectUploadUrlV2WithHttpInfo(OffsetDateTime expiry, String id, Object metadata, Boolean requireSignedURLs, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareImagesCreateAuthenticatedDirectUploadUrlV2ValidateBeforeCall(expiry, id, metadata, requireSignedURLs, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<DirectUploadResponseV2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create authenticated direct upload URL V2 (asynchronously)
     * Direct uploads allow users to upload images without API keys. A common use case are web apps, client-side applications, or mobile devices where users upload content directly to Cloudflare Images. This method creates a draft record for a future image. It returns an upload URL and an image identifier. To verify if the image itself has been uploaded, send an image details request (accounts/:account_identifier/images/v1/:identifier), and check that the &#x60;draft: true&#x60; property is not present.
     * @param expiry  (required)
     * @param id  (required)
     * @param metadata  (required)
     * @param requireSignedURLs  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesCreateAuthenticatedDirectUploadUrlV2Async(OffsetDateTime expiry, String id, Object metadata, Boolean requireSignedURLs, String accountIdentifier, final ApiCallback<DirectUploadResponseV2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareImagesCreateAuthenticatedDirectUploadUrlV2ValidateBeforeCall(expiry, id, metadata, requireSignedURLs, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DirectUploadResponseV2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareImagesDeleteImage
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesDeleteImageCall(String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/images/v1/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareImagesDeleteImageValidateBeforeCall(String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling cloudflareImagesDeleteImage(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareImagesDeleteImage(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareImagesDeleteImageCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete image
     * Delete an image on Cloudflare Images. On success, all copies of the image are deleted and purged from cache.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return CloudflareClientAPIDeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIDeletedResponse cloudflareImagesDeleteImage(String identifier, String accountIdentifier) throws ApiException {
        ApiResponse<CloudflareClientAPIDeletedResponse> resp = cloudflareImagesDeleteImageWithHttpInfo(identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete image
     * Delete an image on Cloudflare Images. On success, all copies of the image are deleted and purged from cache.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIDeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIDeletedResponse> cloudflareImagesDeleteImageWithHttpInfo(String identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareImagesDeleteImageValidateBeforeCall(identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIDeletedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete image (asynchronously)
     * Delete an image on Cloudflare Images. On success, all copies of the image are deleted and purged from cache.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesDeleteImageAsync(String identifier, String accountIdentifier, final ApiCallback<CloudflareClientAPIDeletedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareImagesDeleteImageValidateBeforeCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIDeletedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareImagesImageDetails
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesImageDetailsCall(String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/images/v1/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareImagesImageDetailsValidateBeforeCall(String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling cloudflareImagesImageDetails(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareImagesImageDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareImagesImageDetailsCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Image details
     * Fetch details for a single image.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ImageResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponseSingle cloudflareImagesImageDetails(String identifier, String accountIdentifier) throws ApiException {
        ApiResponse<ImageResponseSingle> resp = cloudflareImagesImageDetailsWithHttpInfo(identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Image details
     * Fetch details for a single image.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ImageResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponseSingle> cloudflareImagesImageDetailsWithHttpInfo(String identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareImagesImageDetailsValidateBeforeCall(identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ImageResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Image details (asynchronously)
     * Fetch details for a single image.
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesImageDetailsAsync(String identifier, String accountIdentifier, final ApiCallback<ImageResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareImagesImageDetailsValidateBeforeCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareImagesImagesUsageStatistics
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesImagesUsageStatisticsCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/images/v1/stats"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareImagesImagesUsageStatisticsValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareImagesImagesUsageStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareImagesImagesUsageStatisticsCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Images usage statistics
     * Fetch usage statistics details for Cloudflare Images.
     * @param accountIdentifier  (required)
     * @return ImagesStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImagesStats cloudflareImagesImagesUsageStatistics(String accountIdentifier) throws ApiException {
        ApiResponse<ImagesStats> resp = cloudflareImagesImagesUsageStatisticsWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * Images usage statistics
     * Fetch usage statistics details for Cloudflare Images.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ImagesStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImagesStats> cloudflareImagesImagesUsageStatisticsWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareImagesImagesUsageStatisticsValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ImagesStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Images usage statistics (asynchronously)
     * Fetch usage statistics details for Cloudflare Images.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesImagesUsageStatisticsAsync(String accountIdentifier, final ApiCallback<ImagesStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareImagesImagesUsageStatisticsValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImagesStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareImagesListImages
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesListImagesCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/images/v1"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareImagesListImagesValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareImagesListImages(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareImagesListImagesCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List images
     * List up to 100 images with one request. Use the optional parameters below to get a specific range of images.
     * @param accountIdentifier  (required)
     * @return ImageResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponseCollection cloudflareImagesListImages(String accountIdentifier) throws ApiException {
        ApiResponse<ImageResponseCollection> resp = cloudflareImagesListImagesWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List images
     * List up to 100 images with one request. Use the optional parameters below to get a specific range of images.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ImageResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponseCollection> cloudflareImagesListImagesWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareImagesListImagesValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ImageResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List images (asynchronously)
     * List up to 100 images with one request. Use the optional parameters below to get a specific range of images.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesListImagesAsync(String accountIdentifier, final ApiCallback<ImageResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareImagesListImagesValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareImagesUpdateImage
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesUpdateImageCall(ImagePatchRequest body, String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/images/v1/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareImagesUpdateImageValidateBeforeCall(ImagePatchRequest body, String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cloudflareImagesUpdateImage(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling cloudflareImagesUpdateImage(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareImagesUpdateImage(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareImagesUpdateImageCall(body, identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update image
     * Update image access control. On access control change, all copies of the image are purged from cache.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ImageResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponseSingle cloudflareImagesUpdateImage(ImagePatchRequest body, String identifier, String accountIdentifier) throws ApiException {
        ApiResponse<ImageResponseSingle> resp = cloudflareImagesUpdateImageWithHttpInfo(body, identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update image
     * Update image access control. On access control change, all copies of the image are purged from cache.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ImageResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponseSingle> cloudflareImagesUpdateImageWithHttpInfo(ImagePatchRequest body, String identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareImagesUpdateImageValidateBeforeCall(body, identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ImageResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update image (asynchronously)
     * Update image access control. On access control change, all copies of the image are purged from cache.
     * @param body  (required)
     * @param identifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesUpdateImageAsync(ImagePatchRequest body, String identifier, String accountIdentifier, final ApiCallback<ImageResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareImagesUpdateImageValidateBeforeCall(body, identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloudflareImagesUploadAnImageViaUrl
     * @param metadata  (required)
     * @param requireSignedURLs  (required)
     * @param url  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesUploadAnImageViaUrlCall(Object metadata, Boolean requireSignedURLs, String url, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/images/v1"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (metadata != null)
        localVarFormParams.put("metadata", metadata);
        if (requireSignedURLs != null)
        localVarFormParams.put("requireSignedURLs", requireSignedURLs);
        if (url != null)
        localVarFormParams.put("url", url);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloudflareImagesUploadAnImageViaUrlValidateBeforeCall(Object metadata, Boolean requireSignedURLs, String url, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling cloudflareImagesUploadAnImageViaUrl(Async)");
        }
        // verify the required parameter 'requireSignedURLs' is set
        if (requireSignedURLs == null) {
            throw new ApiException("Missing the required parameter 'requireSignedURLs' when calling cloudflareImagesUploadAnImageViaUrl(Async)");
        }
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling cloudflareImagesUploadAnImageViaUrl(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling cloudflareImagesUploadAnImageViaUrl(Async)");
        }
        
        com.squareup.okhttp.Call call = cloudflareImagesUploadAnImageViaUrlCall(metadata, requireSignedURLs, url, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload an image via URL
     * Upload an image via URL with up to 10 Megabytes using a single HTTP POST (multipart/form-data) request.
     * @param metadata  (required)
     * @param requireSignedURLs  (required)
     * @param url  (required)
     * @param accountIdentifier  (required)
     * @return ImageResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponseSingle cloudflareImagesUploadAnImageViaUrl(Object metadata, Boolean requireSignedURLs, String url, String accountIdentifier) throws ApiException {
        ApiResponse<ImageResponseSingle> resp = cloudflareImagesUploadAnImageViaUrlWithHttpInfo(metadata, requireSignedURLs, url, accountIdentifier);
        return resp.getData();
    }

    /**
     * Upload an image via URL
     * Upload an image via URL with up to 10 Megabytes using a single HTTP POST (multipart/form-data) request.
     * @param metadata  (required)
     * @param requireSignedURLs  (required)
     * @param url  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ImageResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponseSingle> cloudflareImagesUploadAnImageViaUrlWithHttpInfo(Object metadata, Boolean requireSignedURLs, String url, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = cloudflareImagesUploadAnImageViaUrlValidateBeforeCall(metadata, requireSignedURLs, url, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ImageResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload an image via URL (asynchronously)
     * Upload an image via URL with up to 10 Megabytes using a single HTTP POST (multipart/form-data) request.
     * @param metadata  (required)
     * @param requireSignedURLs  (required)
     * @param url  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloudflareImagesUploadAnImageViaUrlAsync(Object metadata, Boolean requireSignedURLs, String url, String accountIdentifier, final ApiCallback<ImageResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloudflareImagesUploadAnImageViaUrlValidateBeforeCall(metadata, requireSignedURLs, url, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
