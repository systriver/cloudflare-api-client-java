/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiResponseSingle;
import io.swagger.client.model.CreateCustomProfileResponse;
import io.swagger.client.model.CreateCustomProfiles;
import io.swagger.client.model.CustomProfile;
import io.swagger.client.model.CustomProfileResponse;
import io.swagger.client.model.EitherProfileResponse;
import io.swagger.client.model.InlineResponse4xx29;
import io.swagger.client.model.InlineResponse4xx30;
import io.swagger.client.model.InlineResponse4xx31;
import io.swagger.client.model.InlineResponse4xx32;
import io.swagger.client.model.InlineResponse4xx33;
import io.swagger.client.model.InlineResponse4xx34;
import io.swagger.client.model.InlineResponse4xx35;
import io.swagger.client.model.InlineResponse4xx36;
import io.swagger.client.model.PredefinedProfile;
import io.swagger.client.model.PredefinedProfileResponse;
import io.swagger.client.model.ProfileId;
import io.swagger.client.model.ProfilesComponentsSchemasResponseCollection;
import io.swagger.client.model.UpdateCustomProfile;
import io.swagger.client.model.UpdatePredefinedProfile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DlpProfilesApi {
    private ApiClient apiClient;

    public DlpProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DlpProfilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for dlpProfilesCreateCustomProfiles
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesCreateCustomProfilesCall(CreateCustomProfiles body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/dlp/profiles/custom"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dlpProfilesCreateCustomProfilesValidateBeforeCall(CreateCustomProfiles body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling dlpProfilesCreateCustomProfiles(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpProfilesCreateCustomProfiles(Async)");
        }
        
        com.squareup.okhttp.Call call = dlpProfilesCreateCustomProfilesCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create custom profiles
     * Creates a set of DLP custom profiles.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return CreateCustomProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateCustomProfileResponse dlpProfilesCreateCustomProfiles(CreateCustomProfiles body, String accountIdentifier) throws ApiException {
        ApiResponse<CreateCustomProfileResponse> resp = dlpProfilesCreateCustomProfilesWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create custom profiles
     * Creates a set of DLP custom profiles.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CreateCustomProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateCustomProfileResponse> dlpProfilesCreateCustomProfilesWithHttpInfo(CreateCustomProfiles body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = dlpProfilesCreateCustomProfilesValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CreateCustomProfileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create custom profiles (asynchronously)
     * Creates a set of DLP custom profiles.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesCreateCustomProfilesAsync(CreateCustomProfiles body, String accountIdentifier, final ApiCallback<CreateCustomProfileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dlpProfilesCreateCustomProfilesValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateCustomProfileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dlpProfilesDeleteCustomProfile
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesDeleteCustomProfileCall(ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/dlp/profiles/custom/{profile_id}"
            .replaceAll("\\{" + "profile_id" + "\\}", apiClient.escapeString(profileId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dlpProfilesDeleteCustomProfileValidateBeforeCall(ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesDeleteCustomProfile(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpProfilesDeleteCustomProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = dlpProfilesDeleteCustomProfileCall(profileId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete custom profile
     * Deletes a DLP custom profile.
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponseSingle dlpProfilesDeleteCustomProfile(ProfileId profileId, String accountIdentifier) throws ApiException {
        ApiResponse<ApiResponseSingle> resp = dlpProfilesDeleteCustomProfileWithHttpInfo(profileId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete custom profile
     * Deletes a DLP custom profile.
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ApiResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResponseSingle> dlpProfilesDeleteCustomProfileWithHttpInfo(ProfileId profileId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = dlpProfilesDeleteCustomProfileValidateBeforeCall(profileId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete custom profile (asynchronously)
     * Deletes a DLP custom profile.
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesDeleteCustomProfileAsync(ProfileId profileId, String accountIdentifier, final ApiCallback<ApiResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dlpProfilesDeleteCustomProfileValidateBeforeCall(profileId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dlpProfilesGetCustomProfile
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesGetCustomProfileCall(ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/dlp/profiles/custom/{profile_id}"
            .replaceAll("\\{" + "profile_id" + "\\}", apiClient.escapeString(profileId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dlpProfilesGetCustomProfileValidateBeforeCall(ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesGetCustomProfile(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpProfilesGetCustomProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = dlpProfilesGetCustomProfileCall(profileId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get custom profile
     * Fetches a custom DLP profile.
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return CustomProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomProfileResponse dlpProfilesGetCustomProfile(ProfileId profileId, String accountIdentifier) throws ApiException {
        ApiResponse<CustomProfileResponse> resp = dlpProfilesGetCustomProfileWithHttpInfo(profileId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get custom profile
     * Fetches a custom DLP profile.
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CustomProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomProfileResponse> dlpProfilesGetCustomProfileWithHttpInfo(ProfileId profileId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = dlpProfilesGetCustomProfileValidateBeforeCall(profileId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CustomProfileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get custom profile (asynchronously)
     * Fetches a custom DLP profile.
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesGetCustomProfileAsync(ProfileId profileId, String accountIdentifier, final ApiCallback<CustomProfileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dlpProfilesGetCustomProfileValidateBeforeCall(profileId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomProfileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dlpProfilesGetDlpProfile
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesGetDlpProfileCall(ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/dlp/profiles/{profile_id}"
            .replaceAll("\\{" + "profile_id" + "\\}", apiClient.escapeString(profileId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dlpProfilesGetDlpProfileValidateBeforeCall(ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesGetDlpProfile(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpProfilesGetDlpProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = dlpProfilesGetDlpProfileCall(profileId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get DLP Profile
     * Fetches a DLP profile by ID. Supports both predefined and custom profiles
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return EitherProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EitherProfileResponse dlpProfilesGetDlpProfile(ProfileId profileId, String accountIdentifier) throws ApiException {
        ApiResponse<EitherProfileResponse> resp = dlpProfilesGetDlpProfileWithHttpInfo(profileId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get DLP Profile
     * Fetches a DLP profile by ID. Supports both predefined and custom profiles
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;EitherProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EitherProfileResponse> dlpProfilesGetDlpProfileWithHttpInfo(ProfileId profileId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = dlpProfilesGetDlpProfileValidateBeforeCall(profileId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<EitherProfileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get DLP Profile (asynchronously)
     * Fetches a DLP profile by ID. Supports both predefined and custom profiles
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesGetDlpProfileAsync(ProfileId profileId, String accountIdentifier, final ApiCallback<EitherProfileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dlpProfilesGetDlpProfileValidateBeforeCall(profileId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EitherProfileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dlpProfilesGetPredefinedProfile
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesGetPredefinedProfileCall(ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/dlp/profiles/predefined/{profile_id}"
            .replaceAll("\\{" + "profile_id" + "\\}", apiClient.escapeString(profileId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dlpProfilesGetPredefinedProfileValidateBeforeCall(ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesGetPredefinedProfile(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpProfilesGetPredefinedProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = dlpProfilesGetPredefinedProfileCall(profileId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get predefined profile
     * Fetches a predefined DLP profile.
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return PredefinedProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PredefinedProfileResponse dlpProfilesGetPredefinedProfile(ProfileId profileId, String accountIdentifier) throws ApiException {
        ApiResponse<PredefinedProfileResponse> resp = dlpProfilesGetPredefinedProfileWithHttpInfo(profileId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get predefined profile
     * Fetches a predefined DLP profile.
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;PredefinedProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PredefinedProfileResponse> dlpProfilesGetPredefinedProfileWithHttpInfo(ProfileId profileId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = dlpProfilesGetPredefinedProfileValidateBeforeCall(profileId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<PredefinedProfileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get predefined profile (asynchronously)
     * Fetches a predefined DLP profile.
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesGetPredefinedProfileAsync(ProfileId profileId, String accountIdentifier, final ApiCallback<PredefinedProfileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dlpProfilesGetPredefinedProfileValidateBeforeCall(profileId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PredefinedProfileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dlpProfilesListAllProfiles
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesListAllProfilesCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/dlp/profiles"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dlpProfilesListAllProfilesValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpProfilesListAllProfiles(Async)");
        }
        
        com.squareup.okhttp.Call call = dlpProfilesListAllProfilesCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all profiles
     * Lists all DLP profiles in an account.
     * @param accountIdentifier  (required)
     * @return ProfilesComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProfilesComponentsSchemasResponseCollection dlpProfilesListAllProfiles(String accountIdentifier) throws ApiException {
        ApiResponse<ProfilesComponentsSchemasResponseCollection> resp = dlpProfilesListAllProfilesWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List all profiles
     * Lists all DLP profiles in an account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;ProfilesComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProfilesComponentsSchemasResponseCollection> dlpProfilesListAllProfilesWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = dlpProfilesListAllProfilesValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ProfilesComponentsSchemasResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all profiles (asynchronously)
     * Lists all DLP profiles in an account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesListAllProfilesAsync(String accountIdentifier, final ApiCallback<ProfilesComponentsSchemasResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dlpProfilesListAllProfilesValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProfilesComponentsSchemasResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dlpProfilesUpdateCustomProfile
     * @param body  (required)
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesUpdateCustomProfileCall(UpdateCustomProfile body, ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/dlp/profiles/custom/{profile_id}"
            .replaceAll("\\{" + "profile_id" + "\\}", apiClient.escapeString(profileId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dlpProfilesUpdateCustomProfileValidateBeforeCall(UpdateCustomProfile body, ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling dlpProfilesUpdateCustomProfile(Async)");
        }
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesUpdateCustomProfile(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpProfilesUpdateCustomProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = dlpProfilesUpdateCustomProfileCall(body, profileId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update custom profile
     * Updates a DLP custom profile.
     * @param body  (required)
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return CustomProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomProfile dlpProfilesUpdateCustomProfile(UpdateCustomProfile body, ProfileId profileId, String accountIdentifier) throws ApiException {
        ApiResponse<CustomProfile> resp = dlpProfilesUpdateCustomProfileWithHttpInfo(body, profileId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update custom profile
     * Updates a DLP custom profile.
     * @param body  (required)
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;CustomProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomProfile> dlpProfilesUpdateCustomProfileWithHttpInfo(UpdateCustomProfile body, ProfileId profileId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = dlpProfilesUpdateCustomProfileValidateBeforeCall(body, profileId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CustomProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update custom profile (asynchronously)
     * Updates a DLP custom profile.
     * @param body  (required)
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesUpdateCustomProfileAsync(UpdateCustomProfile body, ProfileId profileId, String accountIdentifier, final ApiCallback<CustomProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dlpProfilesUpdateCustomProfileValidateBeforeCall(body, profileId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dlpProfilesUpdatePredefinedProfile
     * @param body  (required)
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesUpdatePredefinedProfileCall(UpdatePredefinedProfile body, ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/dlp/profiles/predefined/{profile_id}"
            .replaceAll("\\{" + "profile_id" + "\\}", apiClient.escapeString(profileId.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dlpProfilesUpdatePredefinedProfileValidateBeforeCall(UpdatePredefinedProfile body, ProfileId profileId, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling dlpProfilesUpdatePredefinedProfile(Async)");
        }
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling dlpProfilesUpdatePredefinedProfile(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling dlpProfilesUpdatePredefinedProfile(Async)");
        }
        
        com.squareup.okhttp.Call call = dlpProfilesUpdatePredefinedProfileCall(body, profileId, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update predefined profile
     * Updates a DLP predefined profile. Only supports enabling/disabling entries.
     * @param body  (required)
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return PredefinedProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PredefinedProfile dlpProfilesUpdatePredefinedProfile(UpdatePredefinedProfile body, ProfileId profileId, String accountIdentifier) throws ApiException {
        ApiResponse<PredefinedProfile> resp = dlpProfilesUpdatePredefinedProfileWithHttpInfo(body, profileId, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update predefined profile
     * Updates a DLP predefined profile. Only supports enabling/disabling entries.
     * @param body  (required)
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;PredefinedProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PredefinedProfile> dlpProfilesUpdatePredefinedProfileWithHttpInfo(UpdatePredefinedProfile body, ProfileId profileId, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = dlpProfilesUpdatePredefinedProfileValidateBeforeCall(body, profileId, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<PredefinedProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update predefined profile (asynchronously)
     * Updates a DLP predefined profile. Only supports enabling/disabling entries.
     * @param body  (required)
     * @param profileId  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dlpProfilesUpdatePredefinedProfileAsync(UpdatePredefinedProfile body, ProfileId profileId, String accountIdentifier, final ApiCallback<PredefinedProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dlpProfilesUpdatePredefinedProfileValidateBeforeCall(body, profileId, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PredefinedProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
