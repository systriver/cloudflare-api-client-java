/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CatchAllRuleResponseSingle;
import io.swagger.client.model.CloudflareClientAPIRulesResponseCollection;
import io.swagger.client.model.CreateRuleProperties;
import io.swagger.client.model.InlineResponse4xx362;
import io.swagger.client.model.InlineResponse4xx363;
import io.swagger.client.model.InlineResponse4xx364;
import io.swagger.client.model.RuleResponseSingle;
import io.swagger.client.model.UpdateCatchAllRuleProperties;
import io.swagger.client.model.UpdateRuleProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmailRoutingRoutingRulesApi {
    private ApiClient apiClient;

    public EmailRoutingRoutingRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmailRoutingRoutingRulesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for emailRoutingRoutingRulesCreateRoutingRule
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesCreateRoutingRuleCall(CreateRuleProperties body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emailRoutingRoutingRulesCreateRoutingRuleValidateBeforeCall(CreateRuleProperties body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling emailRoutingRoutingRulesCreateRoutingRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesCreateRoutingRule(Async)");
        }
        
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesCreateRoutingRuleCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create routing rule
     * Rules consist of a set of criteria for matching emails (such as an email being sent to a specific custom email address) plus a set of actions to take on the email (like forwarding it to a specific destination address).
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return RuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleResponseSingle emailRoutingRoutingRulesCreateRoutingRule(CreateRuleProperties body, String zoneIdentifier) throws ApiException {
        ApiResponse<RuleResponseSingle> resp = emailRoutingRoutingRulesCreateRoutingRuleWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Create routing rule
     * Rules consist of a set of criteria for matching emails (such as an email being sent to a specific custom email address) plus a set of actions to take on the email (like forwarding it to a specific destination address).
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;RuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleResponseSingle> emailRoutingRoutingRulesCreateRoutingRuleWithHttpInfo(CreateRuleProperties body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesCreateRoutingRuleValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RuleResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create routing rule (asynchronously)
     * Rules consist of a set of criteria for matching emails (such as an email being sent to a specific custom email address) plus a set of actions to take on the email (like forwarding it to a specific destination address).
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesCreateRoutingRuleAsync(CreateRuleProperties body, String zoneIdentifier, final ApiCallback<RuleResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emailRoutingRoutingRulesCreateRoutingRuleValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for emailRoutingRoutingRulesDeleteRoutingRule
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesDeleteRoutingRuleCall(String ruleIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules/{rule_identifier}"
            .replaceAll("\\{" + "rule_identifier" + "\\}", apiClient.escapeString(ruleIdentifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emailRoutingRoutingRulesDeleteRoutingRuleValidateBeforeCall(String ruleIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleIdentifier' is set
        if (ruleIdentifier == null) {
            throw new ApiException("Missing the required parameter 'ruleIdentifier' when calling emailRoutingRoutingRulesDeleteRoutingRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesDeleteRoutingRule(Async)");
        }
        
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesDeleteRoutingRuleCall(ruleIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete routing rule
     * Delete a specific routing rule.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return RuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleResponseSingle emailRoutingRoutingRulesDeleteRoutingRule(String ruleIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<RuleResponseSingle> resp = emailRoutingRoutingRulesDeleteRoutingRuleWithHttpInfo(ruleIdentifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Delete routing rule
     * Delete a specific routing rule.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;RuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleResponseSingle> emailRoutingRoutingRulesDeleteRoutingRuleWithHttpInfo(String ruleIdentifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesDeleteRoutingRuleValidateBeforeCall(ruleIdentifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RuleResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete routing rule (asynchronously)
     * Delete a specific routing rule.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesDeleteRoutingRuleAsync(String ruleIdentifier, String zoneIdentifier, final ApiCallback<RuleResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emailRoutingRoutingRulesDeleteRoutingRuleValidateBeforeCall(ruleIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for emailRoutingRoutingRulesGetCatchAllRule
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesGetCatchAllRuleCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules/catch_all"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emailRoutingRoutingRulesGetCatchAllRuleValidateBeforeCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesGetCatchAllRule(Async)");
        }
        
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesGetCatchAllRuleCall(zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get catch-all rule
     * Get information on the default catch-all routing rule.
     * @param zoneIdentifier  (required)
     * @return CatchAllRuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CatchAllRuleResponseSingle emailRoutingRoutingRulesGetCatchAllRule(String zoneIdentifier) throws ApiException {
        ApiResponse<CatchAllRuleResponseSingle> resp = emailRoutingRoutingRulesGetCatchAllRuleWithHttpInfo(zoneIdentifier);
        return resp.getData();
    }

    /**
     * Get catch-all rule
     * Get information on the default catch-all routing rule.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;CatchAllRuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CatchAllRuleResponseSingle> emailRoutingRoutingRulesGetCatchAllRuleWithHttpInfo(String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesGetCatchAllRuleValidateBeforeCall(zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CatchAllRuleResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get catch-all rule (asynchronously)
     * Get information on the default catch-all routing rule.
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesGetCatchAllRuleAsync(String zoneIdentifier, final ApiCallback<CatchAllRuleResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emailRoutingRoutingRulesGetCatchAllRuleValidateBeforeCall(zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CatchAllRuleResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for emailRoutingRoutingRulesGetRoutingRule
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesGetRoutingRuleCall(String ruleIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules/{rule_identifier}"
            .replaceAll("\\{" + "rule_identifier" + "\\}", apiClient.escapeString(ruleIdentifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emailRoutingRoutingRulesGetRoutingRuleValidateBeforeCall(String ruleIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleIdentifier' is set
        if (ruleIdentifier == null) {
            throw new ApiException("Missing the required parameter 'ruleIdentifier' when calling emailRoutingRoutingRulesGetRoutingRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesGetRoutingRule(Async)");
        }
        
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesGetRoutingRuleCall(ruleIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get routing rule
     * Get information for a specific routing rule already created.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return RuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleResponseSingle emailRoutingRoutingRulesGetRoutingRule(String ruleIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<RuleResponseSingle> resp = emailRoutingRoutingRulesGetRoutingRuleWithHttpInfo(ruleIdentifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Get routing rule
     * Get information for a specific routing rule already created.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;RuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleResponseSingle> emailRoutingRoutingRulesGetRoutingRuleWithHttpInfo(String ruleIdentifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesGetRoutingRuleValidateBeforeCall(ruleIdentifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RuleResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get routing rule (asynchronously)
     * Get information for a specific routing rule already created.
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesGetRoutingRuleAsync(String ruleIdentifier, String zoneIdentifier, final ApiCallback<RuleResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emailRoutingRoutingRulesGetRoutingRuleValidateBeforeCall(ruleIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for emailRoutingRoutingRulesListRoutingRules
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesListRoutingRulesCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emailRoutingRoutingRulesListRoutingRulesValidateBeforeCall(String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesListRoutingRules(Async)");
        }
        
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesListRoutingRulesCall(zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List routing rules
     * Lists existing routing rules.
     * @param zoneIdentifier  (required)
     * @return CloudflareClientAPIRulesResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudflareClientAPIRulesResponseCollection emailRoutingRoutingRulesListRoutingRules(String zoneIdentifier) throws ApiException {
        ApiResponse<CloudflareClientAPIRulesResponseCollection> resp = emailRoutingRoutingRulesListRoutingRulesWithHttpInfo(zoneIdentifier);
        return resp.getData();
    }

    /**
     * List routing rules
     * Lists existing routing rules.
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;CloudflareClientAPIRulesResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudflareClientAPIRulesResponseCollection> emailRoutingRoutingRulesListRoutingRulesWithHttpInfo(String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesListRoutingRulesValidateBeforeCall(zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIRulesResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List routing rules (asynchronously)
     * Lists existing routing rules.
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesListRoutingRulesAsync(String zoneIdentifier, final ApiCallback<CloudflareClientAPIRulesResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emailRoutingRoutingRulesListRoutingRulesValidateBeforeCall(zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudflareClientAPIRulesResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for emailRoutingRoutingRulesUpdateCatchAllRule
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesUpdateCatchAllRuleCall(UpdateCatchAllRuleProperties body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules/catch_all"
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emailRoutingRoutingRulesUpdateCatchAllRuleValidateBeforeCall(UpdateCatchAllRuleProperties body, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling emailRoutingRoutingRulesUpdateCatchAllRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesUpdateCatchAllRule(Async)");
        }
        
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesUpdateCatchAllRuleCall(body, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update catch-all rule
     * Enable or disable catch-all routing rule, or change action to forward to specific destination address.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return CatchAllRuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CatchAllRuleResponseSingle emailRoutingRoutingRulesUpdateCatchAllRule(UpdateCatchAllRuleProperties body, String zoneIdentifier) throws ApiException {
        ApiResponse<CatchAllRuleResponseSingle> resp = emailRoutingRoutingRulesUpdateCatchAllRuleWithHttpInfo(body, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Update catch-all rule
     * Enable or disable catch-all routing rule, or change action to forward to specific destination address.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;CatchAllRuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CatchAllRuleResponseSingle> emailRoutingRoutingRulesUpdateCatchAllRuleWithHttpInfo(UpdateCatchAllRuleProperties body, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesUpdateCatchAllRuleValidateBeforeCall(body, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CatchAllRuleResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update catch-all rule (asynchronously)
     * Enable or disable catch-all routing rule, or change action to forward to specific destination address.
     * @param body  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesUpdateCatchAllRuleAsync(UpdateCatchAllRuleProperties body, String zoneIdentifier, final ApiCallback<CatchAllRuleResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emailRoutingRoutingRulesUpdateCatchAllRuleValidateBeforeCall(body, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CatchAllRuleResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for emailRoutingRoutingRulesUpdateRoutingRule
     * @param body  (required)
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesUpdateRoutingRuleCall(UpdateRuleProperties body, String ruleIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/email/routing/rules/{rule_identifier}"
            .replaceAll("\\{" + "rule_identifier" + "\\}", apiClient.escapeString(ruleIdentifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emailRoutingRoutingRulesUpdateRoutingRuleValidateBeforeCall(UpdateRuleProperties body, String ruleIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling emailRoutingRoutingRulesUpdateRoutingRule(Async)");
        }
        // verify the required parameter 'ruleIdentifier' is set
        if (ruleIdentifier == null) {
            throw new ApiException("Missing the required parameter 'ruleIdentifier' when calling emailRoutingRoutingRulesUpdateRoutingRule(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling emailRoutingRoutingRulesUpdateRoutingRule(Async)");
        }
        
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesUpdateRoutingRuleCall(body, ruleIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update routing rule
     * Update actions and matches, or enable/disable specific routing rules.
     * @param body  (required)
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return RuleResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleResponseSingle emailRoutingRoutingRulesUpdateRoutingRule(UpdateRuleProperties body, String ruleIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<RuleResponseSingle> resp = emailRoutingRoutingRulesUpdateRoutingRuleWithHttpInfo(body, ruleIdentifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Update routing rule
     * Update actions and matches, or enable/disable specific routing rules.
     * @param body  (required)
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;RuleResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleResponseSingle> emailRoutingRoutingRulesUpdateRoutingRuleWithHttpInfo(UpdateRuleProperties body, String ruleIdentifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = emailRoutingRoutingRulesUpdateRoutingRuleValidateBeforeCall(body, ruleIdentifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RuleResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update routing rule (asynchronously)
     * Update actions and matches, or enable/disable specific routing rules.
     * @param body  (required)
     * @param ruleIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emailRoutingRoutingRulesUpdateRoutingRuleAsync(UpdateRuleProperties body, String ruleIdentifier, String zoneIdentifier, final ApiCallback<RuleResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emailRoutingRoutingRulesUpdateRoutingRuleValidateBeforeCall(body, ruleIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
