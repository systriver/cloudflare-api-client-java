/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.GroupsIdentifierBody;
import io.swagger.client.model.InlineResponse4xx385;
import io.swagger.client.model.InlineResponse4xx386;
import io.swagger.client.model.RuleGroupResponseCollection;
import io.swagger.client.model.RuleGroupResponseSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WafRuleGroupsApi {
    private ApiClient apiClient;

    public WafRuleGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WafRuleGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for wafRuleGroupsGetAWafRuleGroup
     * @param identifier  (required)
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call wafRuleGroupsGetAWafRuleGroupCall(String identifier, String packageIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/waf/packages/{package_identifier}/groups/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "package_identifier" + "\\}", apiClient.escapeString(packageIdentifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call wafRuleGroupsGetAWafRuleGroupValidateBeforeCall(String identifier, String packageIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling wafRuleGroupsGetAWafRuleGroup(Async)");
        }
        // verify the required parameter 'packageIdentifier' is set
        if (packageIdentifier == null) {
            throw new ApiException("Missing the required parameter 'packageIdentifier' when calling wafRuleGroupsGetAWafRuleGroup(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling wafRuleGroupsGetAWafRuleGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = wafRuleGroupsGetAWafRuleGroupCall(identifier, packageIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a WAF rule group
     * Fetches the details of a WAF rule group.
     * @param identifier  (required)
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return RuleGroupResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleGroupResponseSingle wafRuleGroupsGetAWafRuleGroup(String identifier, String packageIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<RuleGroupResponseSingle> resp = wafRuleGroupsGetAWafRuleGroupWithHttpInfo(identifier, packageIdentifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Get a WAF rule group
     * Fetches the details of a WAF rule group.
     * @param identifier  (required)
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;RuleGroupResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleGroupResponseSingle> wafRuleGroupsGetAWafRuleGroupWithHttpInfo(String identifier, String packageIdentifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = wafRuleGroupsGetAWafRuleGroupValidateBeforeCall(identifier, packageIdentifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RuleGroupResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a WAF rule group (asynchronously)
     * Fetches the details of a WAF rule group.
     * @param identifier  (required)
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wafRuleGroupsGetAWafRuleGroupAsync(String identifier, String packageIdentifier, String zoneIdentifier, final ApiCallback<RuleGroupResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wafRuleGroupsGetAWafRuleGroupValidateBeforeCall(identifier, packageIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleGroupResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for wafRuleGroupsListWafRuleGroups
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call wafRuleGroupsListWafRuleGroupsCall(String packageIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/waf/packages/{package_identifier}/groups"
            .replaceAll("\\{" + "package_identifier" + "\\}", apiClient.escapeString(packageIdentifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call wafRuleGroupsListWafRuleGroupsValidateBeforeCall(String packageIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'packageIdentifier' is set
        if (packageIdentifier == null) {
            throw new ApiException("Missing the required parameter 'packageIdentifier' when calling wafRuleGroupsListWafRuleGroups(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling wafRuleGroupsListWafRuleGroups(Async)");
        }
        
        com.squareup.okhttp.Call call = wafRuleGroupsListWafRuleGroupsCall(packageIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List WAF rule groups
     * Fetches the WAF rule groups in a WAF package.
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return RuleGroupResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleGroupResponseCollection wafRuleGroupsListWafRuleGroups(String packageIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<RuleGroupResponseCollection> resp = wafRuleGroupsListWafRuleGroupsWithHttpInfo(packageIdentifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * List WAF rule groups
     * Fetches the WAF rule groups in a WAF package.
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;RuleGroupResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleGroupResponseCollection> wafRuleGroupsListWafRuleGroupsWithHttpInfo(String packageIdentifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = wafRuleGroupsListWafRuleGroupsValidateBeforeCall(packageIdentifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RuleGroupResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List WAF rule groups (asynchronously)
     * Fetches the WAF rule groups in a WAF package.
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wafRuleGroupsListWafRuleGroupsAsync(String packageIdentifier, String zoneIdentifier, final ApiCallback<RuleGroupResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wafRuleGroupsListWafRuleGroupsValidateBeforeCall(packageIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleGroupResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for wafRuleGroupsUpdateAWafRuleGroup
     * @param body  (required)
     * @param identifier  (required)
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call wafRuleGroupsUpdateAWafRuleGroupCall(GroupsIdentifierBody body, String identifier, String packageIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/zones/{zone_identifier}/firewall/waf/packages/{package_identifier}/groups/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "package_identifier" + "\\}", apiClient.escapeString(packageIdentifier.toString()))
            .replaceAll("\\{" + "zone_identifier" + "\\}", apiClient.escapeString(zoneIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call wafRuleGroupsUpdateAWafRuleGroupValidateBeforeCall(GroupsIdentifierBody body, String identifier, String packageIdentifier, String zoneIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling wafRuleGroupsUpdateAWafRuleGroup(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling wafRuleGroupsUpdateAWafRuleGroup(Async)");
        }
        // verify the required parameter 'packageIdentifier' is set
        if (packageIdentifier == null) {
            throw new ApiException("Missing the required parameter 'packageIdentifier' when calling wafRuleGroupsUpdateAWafRuleGroup(Async)");
        }
        // verify the required parameter 'zoneIdentifier' is set
        if (zoneIdentifier == null) {
            throw new ApiException("Missing the required parameter 'zoneIdentifier' when calling wafRuleGroupsUpdateAWafRuleGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = wafRuleGroupsUpdateAWafRuleGroupCall(body, identifier, packageIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a WAF rule group
     * Updates a WAF rule group. You can update the state (&#x60;mode&#x60; parameter) of a rule group.
     * @param body  (required)
     * @param identifier  (required)
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return RuleGroupResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleGroupResponseSingle wafRuleGroupsUpdateAWafRuleGroup(GroupsIdentifierBody body, String identifier, String packageIdentifier, String zoneIdentifier) throws ApiException {
        ApiResponse<RuleGroupResponseSingle> resp = wafRuleGroupsUpdateAWafRuleGroupWithHttpInfo(body, identifier, packageIdentifier, zoneIdentifier);
        return resp.getData();
    }

    /**
     * Update a WAF rule group
     * Updates a WAF rule group. You can update the state (&#x60;mode&#x60; parameter) of a rule group.
     * @param body  (required)
     * @param identifier  (required)
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @return ApiResponse&lt;RuleGroupResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleGroupResponseSingle> wafRuleGroupsUpdateAWafRuleGroupWithHttpInfo(GroupsIdentifierBody body, String identifier, String packageIdentifier, String zoneIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = wafRuleGroupsUpdateAWafRuleGroupValidateBeforeCall(body, identifier, packageIdentifier, zoneIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RuleGroupResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a WAF rule group (asynchronously)
     * Updates a WAF rule group. You can update the state (&#x60;mode&#x60; parameter) of a rule group.
     * @param body  (required)
     * @param identifier  (required)
     * @param packageIdentifier  (required)
     * @param zoneIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wafRuleGroupsUpdateAWafRuleGroupAsync(GroupsIdentifierBody body, String identifier, String packageIdentifier, String zoneIdentifier, final ApiCallback<RuleGroupResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wafRuleGroupsUpdateAWafRuleGroupValidateBeforeCall(body, identifier, packageIdentifier, zoneIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleGroupResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
