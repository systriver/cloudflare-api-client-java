/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse4xx108;
import io.swagger.client.model.InlineResponse4xx109;
import io.swagger.client.model.InlineResponse4xx110;
import io.swagger.client.model.MnmRuleAdvertisementSingleResponse;
import io.swagger.client.model.MnmRulesCollectionResponse;
import io.swagger.client.model.MnmRulesSingleResponse;
import io.swagger.client.model.RulesComponentsSchemasAccountIdentifier;
import io.swagger.client.model.SchemasRuleIdentifier;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MagicNetworkMonitoringRulesApi {
    private ApiClient apiClient;

    public MagicNetworkMonitoringRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MagicNetworkMonitoringRulesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for magicNetworkMonitoringRulesCreateRules
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesCreateRulesCall(RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/mnm/rules"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicNetworkMonitoringRulesCreateRulesValidateBeforeCall(RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicNetworkMonitoringRulesCreateRules(Async)");
        }
        
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesCreateRulesCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create rules
     * Create network monitoring rules for account.
     * @param accountIdentifier  (required)
     * @return MnmRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MnmRulesSingleResponse magicNetworkMonitoringRulesCreateRules(RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        ApiResponse<MnmRulesSingleResponse> resp = magicNetworkMonitoringRulesCreateRulesWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * Create rules
     * Create network monitoring rules for account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MnmRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MnmRulesSingleResponse> magicNetworkMonitoringRulesCreateRulesWithHttpInfo(RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesCreateRulesValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MnmRulesSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create rules (asynchronously)
     * Create network monitoring rules for account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesCreateRulesAsync(RulesComponentsSchemasAccountIdentifier accountIdentifier, final ApiCallback<MnmRulesSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesCreateRulesValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MnmRulesSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicNetworkMonitoringRulesDeleteRule
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesDeleteRuleCall(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/mnm/rules/{rule_identifier}"
            .replaceAll("\\{" + "rule_identifier" + "\\}", apiClient.escapeString(ruleIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicNetworkMonitoringRulesDeleteRuleValidateBeforeCall(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleIdentifier' is set
        if (ruleIdentifier == null) {
            throw new ApiException("Missing the required parameter 'ruleIdentifier' when calling magicNetworkMonitoringRulesDeleteRule(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicNetworkMonitoringRulesDeleteRule(Async)");
        }
        
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesDeleteRuleCall(ruleIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete rule
     * Delete a network monitoring rule for account.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return MnmRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MnmRulesSingleResponse magicNetworkMonitoringRulesDeleteRule(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        ApiResponse<MnmRulesSingleResponse> resp = magicNetworkMonitoringRulesDeleteRuleWithHttpInfo(ruleIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete rule
     * Delete a network monitoring rule for account.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MnmRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MnmRulesSingleResponse> magicNetworkMonitoringRulesDeleteRuleWithHttpInfo(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesDeleteRuleValidateBeforeCall(ruleIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MnmRulesSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete rule (asynchronously)
     * Delete a network monitoring rule for account.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesDeleteRuleAsync(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ApiCallback<MnmRulesSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesDeleteRuleValidateBeforeCall(ruleIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MnmRulesSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicNetworkMonitoringRulesGetRule
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesGetRuleCall(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/mnm/rules/{rule_identifier}"
            .replaceAll("\\{" + "rule_identifier" + "\\}", apiClient.escapeString(ruleIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicNetworkMonitoringRulesGetRuleValidateBeforeCall(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleIdentifier' is set
        if (ruleIdentifier == null) {
            throw new ApiException("Missing the required parameter 'ruleIdentifier' when calling magicNetworkMonitoringRulesGetRule(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicNetworkMonitoringRulesGetRule(Async)");
        }
        
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesGetRuleCall(ruleIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get rule
     * List a single network monitoring rule for account.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return MnmRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MnmRulesSingleResponse magicNetworkMonitoringRulesGetRule(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        ApiResponse<MnmRulesSingleResponse> resp = magicNetworkMonitoringRulesGetRuleWithHttpInfo(ruleIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get rule
     * List a single network monitoring rule for account.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MnmRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MnmRulesSingleResponse> magicNetworkMonitoringRulesGetRuleWithHttpInfo(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesGetRuleValidateBeforeCall(ruleIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MnmRulesSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get rule (asynchronously)
     * List a single network monitoring rule for account.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesGetRuleAsync(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ApiCallback<MnmRulesSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesGetRuleValidateBeforeCall(ruleIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MnmRulesSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicNetworkMonitoringRulesListRules
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesListRulesCall(RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/mnm/rules"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicNetworkMonitoringRulesListRulesValidateBeforeCall(RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicNetworkMonitoringRulesListRules(Async)");
        }
        
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesListRulesCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List rules
     * Lists network monitoring rules for account.
     * @param accountIdentifier  (required)
     * @return MnmRulesCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MnmRulesCollectionResponse magicNetworkMonitoringRulesListRules(RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        ApiResponse<MnmRulesCollectionResponse> resp = magicNetworkMonitoringRulesListRulesWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List rules
     * Lists network monitoring rules for account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MnmRulesCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MnmRulesCollectionResponse> magicNetworkMonitoringRulesListRulesWithHttpInfo(RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesListRulesValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MnmRulesCollectionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List rules (asynchronously)
     * Lists network monitoring rules for account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesListRulesAsync(RulesComponentsSchemasAccountIdentifier accountIdentifier, final ApiCallback<MnmRulesCollectionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesListRulesValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MnmRulesCollectionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicNetworkMonitoringRulesUpdateAdvertisementForRule
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesUpdateAdvertisementForRuleCall(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/mnm/rules/{rule_identifier}/advertisement"
            .replaceAll("\\{" + "rule_identifier" + "\\}", apiClient.escapeString(ruleIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicNetworkMonitoringRulesUpdateAdvertisementForRuleValidateBeforeCall(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleIdentifier' is set
        if (ruleIdentifier == null) {
            throw new ApiException("Missing the required parameter 'ruleIdentifier' when calling magicNetworkMonitoringRulesUpdateAdvertisementForRule(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicNetworkMonitoringRulesUpdateAdvertisementForRule(Async)");
        }
        
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesUpdateAdvertisementForRuleCall(ruleIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update advertisement for rule
     * Update advertisement for rule.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return MnmRuleAdvertisementSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MnmRuleAdvertisementSingleResponse magicNetworkMonitoringRulesUpdateAdvertisementForRule(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        ApiResponse<MnmRuleAdvertisementSingleResponse> resp = magicNetworkMonitoringRulesUpdateAdvertisementForRuleWithHttpInfo(ruleIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update advertisement for rule
     * Update advertisement for rule.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MnmRuleAdvertisementSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MnmRuleAdvertisementSingleResponse> magicNetworkMonitoringRulesUpdateAdvertisementForRuleWithHttpInfo(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesUpdateAdvertisementForRuleValidateBeforeCall(ruleIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MnmRuleAdvertisementSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update advertisement for rule (asynchronously)
     * Update advertisement for rule.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesUpdateAdvertisementForRuleAsync(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ApiCallback<MnmRuleAdvertisementSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesUpdateAdvertisementForRuleValidateBeforeCall(ruleIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MnmRuleAdvertisementSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicNetworkMonitoringRulesUpdateRule
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesUpdateRuleCall(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/mnm/rules/{rule_identifier}"
            .replaceAll("\\{" + "rule_identifier" + "\\}", apiClient.escapeString(ruleIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicNetworkMonitoringRulesUpdateRuleValidateBeforeCall(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ruleIdentifier' is set
        if (ruleIdentifier == null) {
            throw new ApiException("Missing the required parameter 'ruleIdentifier' when calling magicNetworkMonitoringRulesUpdateRule(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicNetworkMonitoringRulesUpdateRule(Async)");
        }
        
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesUpdateRuleCall(ruleIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update rule
     * Update a network monitoring rule for account.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return MnmRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MnmRulesSingleResponse magicNetworkMonitoringRulesUpdateRule(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        ApiResponse<MnmRulesSingleResponse> resp = magicNetworkMonitoringRulesUpdateRuleWithHttpInfo(ruleIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update rule
     * Update a network monitoring rule for account.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MnmRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MnmRulesSingleResponse> magicNetworkMonitoringRulesUpdateRuleWithHttpInfo(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesUpdateRuleValidateBeforeCall(ruleIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MnmRulesSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update rule (asynchronously)
     * Update a network monitoring rule for account.
     * @param ruleIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesUpdateRuleAsync(SchemasRuleIdentifier ruleIdentifier, RulesComponentsSchemasAccountIdentifier accountIdentifier, final ApiCallback<MnmRulesSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesUpdateRuleValidateBeforeCall(ruleIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MnmRulesSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicNetworkMonitoringRulesUpdateRules
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesUpdateRulesCall(RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/mnm/rules"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicNetworkMonitoringRulesUpdateRulesValidateBeforeCall(RulesComponentsSchemasAccountIdentifier accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicNetworkMonitoringRulesUpdateRules(Async)");
        }
        
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesUpdateRulesCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update rules
     * Update network monitoring rules for account.
     * @param accountIdentifier  (required)
     * @return MnmRulesSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MnmRulesSingleResponse magicNetworkMonitoringRulesUpdateRules(RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        ApiResponse<MnmRulesSingleResponse> resp = magicNetworkMonitoringRulesUpdateRulesWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * Update rules
     * Update network monitoring rules for account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;MnmRulesSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MnmRulesSingleResponse> magicNetworkMonitoringRulesUpdateRulesWithHttpInfo(RulesComponentsSchemasAccountIdentifier accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesUpdateRulesValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<MnmRulesSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update rules (asynchronously)
     * Update network monitoring rules for account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicNetworkMonitoringRulesUpdateRulesAsync(RulesComponentsSchemasAccountIdentifier accountIdentifier, final ApiCallback<MnmRulesSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicNetworkMonitoringRulesUpdateRulesValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MnmRulesSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
