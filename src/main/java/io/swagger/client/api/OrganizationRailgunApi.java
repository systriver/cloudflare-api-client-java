/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse20030;
import io.swagger.client.model.InlineResponse4xx130;
import io.swagger.client.model.InlineResponse4xx131;
import io.swagger.client.model.InlineResponse4xx132;
import io.swagger.client.model.InlineResponse4xx297;
import io.swagger.client.model.OrganizationIdentifierRailgunsBody;
import io.swagger.client.model.RailgunResponseCollection;
import io.swagger.client.model.RailgunResponseSingle;
import io.swagger.client.model.RailgunResponseSingleId;
import io.swagger.client.model.RailgunsIdentifierBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationRailgunApi {
    private ApiClient apiClient;

    public OrganizationRailgunApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationRailgunApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for organizationRailgunCreateRailgun
     * @param body  (required)
     * @param organizationIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunCreateRailgunCall(OrganizationIdentifierRailgunsBody body, String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/organizations/{organization_identifier}/railguns"
            .replaceAll("\\{" + "organization_identifier" + "\\}", apiClient.escapeString(organizationIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organizationRailgunCreateRailgunValidateBeforeCall(OrganizationIdentifierRailgunsBody body, String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling organizationRailgunCreateRailgun(Async)");
        }
        // verify the required parameter 'organizationIdentifier' is set
        if (organizationIdentifier == null) {
            throw new ApiException("Missing the required parameter 'organizationIdentifier' when calling organizationRailgunCreateRailgun(Async)");
        }
        
        com.squareup.okhttp.Call call = organizationRailgunCreateRailgunCall(body, organizationIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Railgun
     * 
     * @param body  (required)
     * @param organizationIdentifier  (required)
     * @return RailgunResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RailgunResponseSingle organizationRailgunCreateRailgun(OrganizationIdentifierRailgunsBody body, String organizationIdentifier) throws ApiException {
        ApiResponse<RailgunResponseSingle> resp = organizationRailgunCreateRailgunWithHttpInfo(body, organizationIdentifier);
        return resp.getData();
    }

    /**
     * Create Railgun
     * 
     * @param body  (required)
     * @param organizationIdentifier  (required)
     * @return ApiResponse&lt;RailgunResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RailgunResponseSingle> organizationRailgunCreateRailgunWithHttpInfo(OrganizationIdentifierRailgunsBody body, String organizationIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = organizationRailgunCreateRailgunValidateBeforeCall(body, organizationIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RailgunResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Railgun (asynchronously)
     * 
     * @param body  (required)
     * @param organizationIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunCreateRailgunAsync(OrganizationIdentifierRailgunsBody body, String organizationIdentifier, final ApiCallback<RailgunResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organizationRailgunCreateRailgunValidateBeforeCall(body, organizationIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RailgunResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organizationRailgunDeleteRailgun
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunDeleteRailgunCall(String identifier, String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organizations/{organization_identifier}/railguns/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "organization_identifier" + "\\}", apiClient.escapeString(organizationIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organizationRailgunDeleteRailgunValidateBeforeCall(String identifier, String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling organizationRailgunDeleteRailgun(Async)");
        }
        // verify the required parameter 'organizationIdentifier' is set
        if (organizationIdentifier == null) {
            throw new ApiException("Missing the required parameter 'organizationIdentifier' when calling organizationRailgunDeleteRailgun(Async)");
        }
        
        com.squareup.okhttp.Call call = organizationRailgunDeleteRailgunCall(identifier, organizationIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Railgun
     * Disable and delete a Railgun. This will immediately disable the Railgun for any connected zones.
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @return RailgunResponseSingleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RailgunResponseSingleId organizationRailgunDeleteRailgun(String identifier, String organizationIdentifier) throws ApiException {
        ApiResponse<RailgunResponseSingleId> resp = organizationRailgunDeleteRailgunWithHttpInfo(identifier, organizationIdentifier);
        return resp.getData();
    }

    /**
     * Delete Railgun
     * Disable and delete a Railgun. This will immediately disable the Railgun for any connected zones.
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @return ApiResponse&lt;RailgunResponseSingleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RailgunResponseSingleId> organizationRailgunDeleteRailgunWithHttpInfo(String identifier, String organizationIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = organizationRailgunDeleteRailgunValidateBeforeCall(identifier, organizationIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RailgunResponseSingleId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Railgun (asynchronously)
     * Disable and delete a Railgun. This will immediately disable the Railgun for any connected zones.
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunDeleteRailgunAsync(String identifier, String organizationIdentifier, final ApiCallback<RailgunResponseSingleId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organizationRailgunDeleteRailgunValidateBeforeCall(identifier, organizationIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RailgunResponseSingleId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organizationRailgunEnableOrDisableARailgun
     * @param body  (required)
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunEnableOrDisableARailgunCall(RailgunsIdentifierBody body, String identifier, String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/organizations/{organization_identifier}/railguns/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "organization_identifier" + "\\}", apiClient.escapeString(organizationIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organizationRailgunEnableOrDisableARailgunValidateBeforeCall(RailgunsIdentifierBody body, String identifier, String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling organizationRailgunEnableOrDisableARailgun(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling organizationRailgunEnableOrDisableARailgun(Async)");
        }
        // verify the required parameter 'organizationIdentifier' is set
        if (organizationIdentifier == null) {
            throw new ApiException("Missing the required parameter 'organizationIdentifier' when calling organizationRailgunEnableOrDisableARailgun(Async)");
        }
        
        com.squareup.okhttp.Call call = organizationRailgunEnableOrDisableARailgunCall(body, identifier, organizationIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable or disable a Railgun
     * Enable or disable a Railgun for all zones connected to it.
     * @param body  (required)
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @return RailgunResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RailgunResponseSingle organizationRailgunEnableOrDisableARailgun(RailgunsIdentifierBody body, String identifier, String organizationIdentifier) throws ApiException {
        ApiResponse<RailgunResponseSingle> resp = organizationRailgunEnableOrDisableARailgunWithHttpInfo(body, identifier, organizationIdentifier);
        return resp.getData();
    }

    /**
     * Enable or disable a Railgun
     * Enable or disable a Railgun for all zones connected to it.
     * @param body  (required)
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @return ApiResponse&lt;RailgunResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RailgunResponseSingle> organizationRailgunEnableOrDisableARailgunWithHttpInfo(RailgunsIdentifierBody body, String identifier, String organizationIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = organizationRailgunEnableOrDisableARailgunValidateBeforeCall(body, identifier, organizationIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RailgunResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable or disable a Railgun (asynchronously)
     * Enable or disable a Railgun for all zones connected to it.
     * @param body  (required)
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunEnableOrDisableARailgunAsync(RailgunsIdentifierBody body, String identifier, String organizationIdentifier, final ApiCallback<RailgunResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organizationRailgunEnableOrDisableARailgunValidateBeforeCall(body, identifier, organizationIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RailgunResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organizationRailgunGetRailgunZones
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunGetRailgunZonesCall(String identifier, String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organizations/{organization_identifier}/railguns/{identifier}/zones"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "organization_identifier" + "\\}", apiClient.escapeString(organizationIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organizationRailgunGetRailgunZonesValidateBeforeCall(String identifier, String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling organizationRailgunGetRailgunZones(Async)");
        }
        // verify the required parameter 'organizationIdentifier' is set
        if (organizationIdentifier == null) {
            throw new ApiException("Missing the required parameter 'organizationIdentifier' when calling organizationRailgunGetRailgunZones(Async)");
        }
        
        com.squareup.okhttp.Call call = organizationRailgunGetRailgunZonesCall(identifier, organizationIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Railgun zones
     * Lists the zones that are currently using this Railgun.
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @return InlineResponse20030
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20030 organizationRailgunGetRailgunZones(String identifier, String organizationIdentifier) throws ApiException {
        ApiResponse<InlineResponse20030> resp = organizationRailgunGetRailgunZonesWithHttpInfo(identifier, organizationIdentifier);
        return resp.getData();
    }

    /**
     * Get Railgun zones
     * Lists the zones that are currently using this Railgun.
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @return ApiResponse&lt;InlineResponse20030&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20030> organizationRailgunGetRailgunZonesWithHttpInfo(String identifier, String organizationIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = organizationRailgunGetRailgunZonesValidateBeforeCall(identifier, organizationIdentifier, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20030>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Railgun zones (asynchronously)
     * Lists the zones that are currently using this Railgun.
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunGetRailgunZonesAsync(String identifier, String organizationIdentifier, final ApiCallback<InlineResponse20030> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organizationRailgunGetRailgunZonesValidateBeforeCall(identifier, organizationIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20030>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organizationRailgunListRailguns
     * @param organizationIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunListRailgunsCall(String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organizations/{organization_identifier}/railguns"
            .replaceAll("\\{" + "organization_identifier" + "\\}", apiClient.escapeString(organizationIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organizationRailgunListRailgunsValidateBeforeCall(String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organizationIdentifier' is set
        if (organizationIdentifier == null) {
            throw new ApiException("Missing the required parameter 'organizationIdentifier' when calling organizationRailgunListRailguns(Async)");
        }
        
        com.squareup.okhttp.Call call = organizationRailgunListRailgunsCall(organizationIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Railguns
     * List, search, sort and filter your Railguns.
     * @param organizationIdentifier  (required)
     * @return RailgunResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RailgunResponseCollection organizationRailgunListRailguns(String organizationIdentifier) throws ApiException {
        ApiResponse<RailgunResponseCollection> resp = organizationRailgunListRailgunsWithHttpInfo(organizationIdentifier);
        return resp.getData();
    }

    /**
     * List Railguns
     * List, search, sort and filter your Railguns.
     * @param organizationIdentifier  (required)
     * @return ApiResponse&lt;RailgunResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RailgunResponseCollection> organizationRailgunListRailgunsWithHttpInfo(String organizationIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = organizationRailgunListRailgunsValidateBeforeCall(organizationIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RailgunResponseCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Railguns (asynchronously)
     * List, search, sort and filter your Railguns.
     * @param organizationIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunListRailgunsAsync(String organizationIdentifier, final ApiCallback<RailgunResponseCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organizationRailgunListRailgunsValidateBeforeCall(organizationIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RailgunResponseCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organizationRailgunRailgunDetails
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunRailgunDetailsCall(String identifier, String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organizations/{organization_identifier}/railguns/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "organization_identifier" + "\\}", apiClient.escapeString(organizationIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organizationRailgunRailgunDetailsValidateBeforeCall(String identifier, String organizationIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling organizationRailgunRailgunDetails(Async)");
        }
        // verify the required parameter 'organizationIdentifier' is set
        if (organizationIdentifier == null) {
            throw new ApiException("Missing the required parameter 'organizationIdentifier' when calling organizationRailgunRailgunDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = organizationRailgunRailgunDetailsCall(identifier, organizationIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Railgun details
     * 
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @return RailgunResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RailgunResponseSingle organizationRailgunRailgunDetails(String identifier, String organizationIdentifier) throws ApiException {
        ApiResponse<RailgunResponseSingle> resp = organizationRailgunRailgunDetailsWithHttpInfo(identifier, organizationIdentifier);
        return resp.getData();
    }

    /**
     * Railgun details
     * 
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @return ApiResponse&lt;RailgunResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RailgunResponseSingle> organizationRailgunRailgunDetailsWithHttpInfo(String identifier, String organizationIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = organizationRailgunRailgunDetailsValidateBeforeCall(identifier, organizationIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RailgunResponseSingle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Railgun details (asynchronously)
     * 
     * @param identifier  (required)
     * @param organizationIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organizationRailgunRailgunDetailsAsync(String identifier, String organizationIdentifier, final ApiCallback<RailgunResponseSingle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organizationRailgunRailgunDetailsValidateBeforeCall(identifier, organizationIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RailgunResponseSingle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
