/*
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse4xx100;
import io.swagger.client.model.InlineResponse4xx95;
import io.swagger.client.model.InlineResponse4xx96;
import io.swagger.client.model.InlineResponse4xx97;
import io.swagger.client.model.InlineResponse4xx98;
import io.swagger.client.model.InlineResponse4xx99;
import io.swagger.client.model.PskGenerationResponse;
import io.swagger.client.model.SchemasModifiedTunnelsCollectionResponse;
import io.swagger.client.model.SchemasTunnelDeletedResponse;
import io.swagger.client.model.SchemasTunnelModifiedResponse;
import io.swagger.client.model.SchemasTunnelSingleResponse;
import io.swagger.client.model.SchemasTunnelUpdateRequest;
import io.swagger.client.model.SchemasTunnelsCollectionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MagicIPsecTunnelsApi {
    private ApiClient apiClient;

    public MagicIPsecTunnelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MagicIPsecTunnelsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for magicIPsecTunnelsCreateIPsecTunnels
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsCreateIPsecTunnelsCall(Object body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/magic/ipsec_tunnels"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicIPsecTunnelsCreateIPsecTunnelsValidateBeforeCall(Object body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling magicIPsecTunnelsCreateIPsecTunnels(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicIPsecTunnelsCreateIPsecTunnels(Async)");
        }
        
        com.squareup.okhttp.Call call = magicIPsecTunnelsCreateIPsecTunnelsCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create IPsec tunnels
     * Creates new IPsec tunnels associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return SchemasTunnelsCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasTunnelsCollectionResponse magicIPsecTunnelsCreateIPsecTunnels(Object body, String accountIdentifier) throws ApiException {
        ApiResponse<SchemasTunnelsCollectionResponse> resp = magicIPsecTunnelsCreateIPsecTunnelsWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Create IPsec tunnels
     * Creates new IPsec tunnels associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;SchemasTunnelsCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasTunnelsCollectionResponse> magicIPsecTunnelsCreateIPsecTunnelsWithHttpInfo(Object body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicIPsecTunnelsCreateIPsecTunnelsValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasTunnelsCollectionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create IPsec tunnels (asynchronously)
     * Creates new IPsec tunnels associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsCreateIPsecTunnelsAsync(Object body, String accountIdentifier, final ApiCallback<SchemasTunnelsCollectionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicIPsecTunnelsCreateIPsecTunnelsValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasTunnelsCollectionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicIPsecTunnelsDeleteIPsecTunnel
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsDeleteIPsecTunnelCall(String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/magic/ipsec_tunnels/{tunnel_identifier}"
            .replaceAll("\\{" + "tunnel_identifier" + "\\}", apiClient.escapeString(tunnelIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicIPsecTunnelsDeleteIPsecTunnelValidateBeforeCall(String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tunnelIdentifier' is set
        if (tunnelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'tunnelIdentifier' when calling magicIPsecTunnelsDeleteIPsecTunnel(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicIPsecTunnelsDeleteIPsecTunnel(Async)");
        }
        
        com.squareup.okhttp.Call call = magicIPsecTunnelsDeleteIPsecTunnelCall(tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete IPsec Tunnel
     * Disables and removes a specific static IPsec Tunnel associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return SchemasTunnelDeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasTunnelDeletedResponse magicIPsecTunnelsDeleteIPsecTunnel(String tunnelIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<SchemasTunnelDeletedResponse> resp = magicIPsecTunnelsDeleteIPsecTunnelWithHttpInfo(tunnelIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Delete IPsec Tunnel
     * Disables and removes a specific static IPsec Tunnel associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;SchemasTunnelDeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasTunnelDeletedResponse> magicIPsecTunnelsDeleteIPsecTunnelWithHttpInfo(String tunnelIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicIPsecTunnelsDeleteIPsecTunnelValidateBeforeCall(tunnelIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasTunnelDeletedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete IPsec Tunnel (asynchronously)
     * Disables and removes a specific static IPsec Tunnel associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsDeleteIPsecTunnelAsync(String tunnelIdentifier, String accountIdentifier, final ApiCallback<SchemasTunnelDeletedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicIPsecTunnelsDeleteIPsecTunnelValidateBeforeCall(tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasTunnelDeletedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnels
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnelsCall(String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/magic/ipsec_tunnels/{tunnel_identifier}/psk_generate"
            .replaceAll("\\{" + "tunnel_identifier" + "\\}", apiClient.escapeString(tunnelIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnelsValidateBeforeCall(String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tunnelIdentifier' is set
        if (tunnelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'tunnelIdentifier' when calling magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnels(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnels(Async)");
        }
        
        com.squareup.okhttp.Call call = magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnelsCall(tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Generate Pre Shared Key (PSK) for IPsec tunnels
     * Generates a Pre Shared Key for a specific IPsec tunnel used in the IKE session. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes. After a PSK is generated, the PSK is immediately persisted to Cloudflare&#x27;s edge and cannot be retrieved later. Note the PSK in a safe place.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return PskGenerationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PskGenerationResponse magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnels(String tunnelIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<PskGenerationResponse> resp = magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnelsWithHttpInfo(tunnelIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Generate Pre Shared Key (PSK) for IPsec tunnels
     * Generates a Pre Shared Key for a specific IPsec tunnel used in the IKE session. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes. After a PSK is generated, the PSK is immediately persisted to Cloudflare&#x27;s edge and cannot be retrieved later. Note the PSK in a safe place.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;PskGenerationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PskGenerationResponse> magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnelsWithHttpInfo(String tunnelIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnelsValidateBeforeCall(tunnelIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<PskGenerationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate Pre Shared Key (PSK) for IPsec tunnels (asynchronously)
     * Generates a Pre Shared Key for a specific IPsec tunnel used in the IKE session. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes. After a PSK is generated, the PSK is immediately persisted to Cloudflare&#x27;s edge and cannot be retrieved later. Note the PSK in a safe place.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnelsAsync(String tunnelIdentifier, String accountIdentifier, final ApiCallback<PskGenerationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicIPsecTunnelsGeneratePreSharedKeyPskForIPsecTunnelsValidateBeforeCall(tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PskGenerationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicIPsecTunnelsListIPsecTunnelDetails
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsListIPsecTunnelDetailsCall(String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/magic/ipsec_tunnels/{tunnel_identifier}"
            .replaceAll("\\{" + "tunnel_identifier" + "\\}", apiClient.escapeString(tunnelIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicIPsecTunnelsListIPsecTunnelDetailsValidateBeforeCall(String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tunnelIdentifier' is set
        if (tunnelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'tunnelIdentifier' when calling magicIPsecTunnelsListIPsecTunnelDetails(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicIPsecTunnelsListIPsecTunnelDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = magicIPsecTunnelsListIPsecTunnelDetailsCall(tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List IPsec tunnel details
     * Lists details for a specific IPsec tunnel.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return SchemasTunnelSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasTunnelSingleResponse magicIPsecTunnelsListIPsecTunnelDetails(String tunnelIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<SchemasTunnelSingleResponse> resp = magicIPsecTunnelsListIPsecTunnelDetailsWithHttpInfo(tunnelIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * List IPsec tunnel details
     * Lists details for a specific IPsec tunnel.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;SchemasTunnelSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasTunnelSingleResponse> magicIPsecTunnelsListIPsecTunnelDetailsWithHttpInfo(String tunnelIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicIPsecTunnelsListIPsecTunnelDetailsValidateBeforeCall(tunnelIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasTunnelSingleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List IPsec tunnel details (asynchronously)
     * Lists details for a specific IPsec tunnel.
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsListIPsecTunnelDetailsAsync(String tunnelIdentifier, String accountIdentifier, final ApiCallback<SchemasTunnelSingleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicIPsecTunnelsListIPsecTunnelDetailsValidateBeforeCall(tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasTunnelSingleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicIPsecTunnelsListIPsecTunnels
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsListIPsecTunnelsCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/magic/ipsec_tunnels"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicIPsecTunnelsListIPsecTunnelsValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicIPsecTunnelsListIPsecTunnels(Async)");
        }
        
        com.squareup.okhttp.Call call = magicIPsecTunnelsListIPsecTunnelsCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List IPsec tunnels
     * Lists IPsec tunnels associated with an account.
     * @param accountIdentifier  (required)
     * @return SchemasTunnelsCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasTunnelsCollectionResponse magicIPsecTunnelsListIPsecTunnels(String accountIdentifier) throws ApiException {
        ApiResponse<SchemasTunnelsCollectionResponse> resp = magicIPsecTunnelsListIPsecTunnelsWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * List IPsec tunnels
     * Lists IPsec tunnels associated with an account.
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;SchemasTunnelsCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasTunnelsCollectionResponse> magicIPsecTunnelsListIPsecTunnelsWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicIPsecTunnelsListIPsecTunnelsValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasTunnelsCollectionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List IPsec tunnels (asynchronously)
     * Lists IPsec tunnels associated with an account.
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsListIPsecTunnelsAsync(String accountIdentifier, final ApiCallback<SchemasTunnelsCollectionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicIPsecTunnelsListIPsecTunnelsValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasTunnelsCollectionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicIPsecTunnelsUpdateIPsecTunnel
     * @param body  (required)
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsUpdateIPsecTunnelCall(SchemasTunnelUpdateRequest body, String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/magic/ipsec_tunnels/{tunnel_identifier}"
            .replaceAll("\\{" + "tunnel_identifier" + "\\}", apiClient.escapeString(tunnelIdentifier.toString()))
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicIPsecTunnelsUpdateIPsecTunnelValidateBeforeCall(SchemasTunnelUpdateRequest body, String tunnelIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling magicIPsecTunnelsUpdateIPsecTunnel(Async)");
        }
        // verify the required parameter 'tunnelIdentifier' is set
        if (tunnelIdentifier == null) {
            throw new ApiException("Missing the required parameter 'tunnelIdentifier' when calling magicIPsecTunnelsUpdateIPsecTunnel(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicIPsecTunnelsUpdateIPsecTunnel(Async)");
        }
        
        com.squareup.okhttp.Call call = magicIPsecTunnelsUpdateIPsecTunnelCall(body, tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update IPsec Tunnel
     * Updates a specific IPsec tunnel associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return SchemasTunnelModifiedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasTunnelModifiedResponse magicIPsecTunnelsUpdateIPsecTunnel(SchemasTunnelUpdateRequest body, String tunnelIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<SchemasTunnelModifiedResponse> resp = magicIPsecTunnelsUpdateIPsecTunnelWithHttpInfo(body, tunnelIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update IPsec Tunnel
     * Updates a specific IPsec tunnel associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;SchemasTunnelModifiedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasTunnelModifiedResponse> magicIPsecTunnelsUpdateIPsecTunnelWithHttpInfo(SchemasTunnelUpdateRequest body, String tunnelIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicIPsecTunnelsUpdateIPsecTunnelValidateBeforeCall(body, tunnelIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasTunnelModifiedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update IPsec Tunnel (asynchronously)
     * Updates a specific IPsec tunnel associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param tunnelIdentifier  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsUpdateIPsecTunnelAsync(SchemasTunnelUpdateRequest body, String tunnelIdentifier, String accountIdentifier, final ApiCallback<SchemasTunnelModifiedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicIPsecTunnelsUpdateIPsecTunnelValidateBeforeCall(body, tunnelIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasTunnelModifiedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for magicIPsecTunnelsUpdateMultipleIPsecTunnels
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsUpdateMultipleIPsecTunnelsCall(Object body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_identifier}/magic/ipsec_tunnels"
            .replaceAll("\\{" + "account_identifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_email", "api_key", "api_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call magicIPsecTunnelsUpdateMultipleIPsecTunnelsValidateBeforeCall(Object body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling magicIPsecTunnelsUpdateMultipleIPsecTunnels(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling magicIPsecTunnelsUpdateMultipleIPsecTunnels(Async)");
        }
        
        com.squareup.okhttp.Call call = magicIPsecTunnelsUpdateMultipleIPsecTunnelsCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update multiple IPsec tunnels
     * Update multiple IPsec tunnels associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return SchemasModifiedTunnelsCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchemasModifiedTunnelsCollectionResponse magicIPsecTunnelsUpdateMultipleIPsecTunnels(Object body, String accountIdentifier) throws ApiException {
        ApiResponse<SchemasModifiedTunnelsCollectionResponse> resp = magicIPsecTunnelsUpdateMultipleIPsecTunnelsWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update multiple IPsec tunnels
     * Update multiple IPsec tunnels associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @return ApiResponse&lt;SchemasModifiedTunnelsCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchemasModifiedTunnelsCollectionResponse> magicIPsecTunnelsUpdateMultipleIPsecTunnelsWithHttpInfo(Object body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = magicIPsecTunnelsUpdateMultipleIPsecTunnelsValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<SchemasModifiedTunnelsCollectionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update multiple IPsec tunnels (asynchronously)
     * Update multiple IPsec tunnels associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call magicIPsecTunnelsUpdateMultipleIPsecTunnelsAsync(Object body, String accountIdentifier, final ApiCallback<SchemasModifiedTunnelsCollectionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = magicIPsecTunnelsUpdateMultipleIPsecTunnelsValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchemasModifiedTunnelsCollectionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
